[
  {
    "fullName"  : "ClientAuthenticationCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Generic",
    "request"   : "Authentication",
    "partition" : "-1",
    "requestId" : "0x0002",
    "requests" : [
      {
        "comment"  : "Name of the user for authentication.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "username"
      },
      {
        "comment"  : "Password for the user.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "password"
      },
      {
        "comment"  : "Unique string identifying the connected client uniquely. This string is generated by the owner member server<br>                             on initial connection. When the client connects to a non-owner member it sets this field on the request.",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "uuid"
      },
      {
        "comment"  : "Unique string identifying the server member uniquely.",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "ownerUuid"
      },
      {
        "comment"  : "You must set this field to true while connecting to the owner member, otherwise set to false.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "isOwnerConnection"
      },
      {
        "comment"  : "The type of the client. E.g. JAVA, CPP, CSHARP, etc.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "clientType"
      },
      {
        "comment"  : "client side supported version to inform server side",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "byte",
        "name"     : "serializationVersion"
      },
      {
        "comment"  : "The Hazelcast version of the client. (e.g. 3.7.2)<br>",
        "since"    : "1.3",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "clientHazelcastVersion"
      }
    ],

    "responseId" : "0x006b"

  , "response" : {
    "comment"  : "Returns the address, uuid and owner uuid.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "byte",
        "name"     : "status"
      },
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.Address",
        "name"     : "address"
      },
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "uuid"
      },
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "ownerUuid"
      },
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "byte",
        "name"     : "serializationVersion"
      },
      {
        "since"    : "1.3",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "serverHazelcastVersion"
      },
      {
        "since"    : "1.3",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.core.Member>",
        "name"     : "clientUnregisteredMembers"
      }
    ]
  }


  },
  {
    "fullName"  : "ClientAuthenticationCustomCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Generic",
    "request"   : "AuthenticationCustom",
    "partition" : "-1",
    "requestId" : "0x0003",
    "requests" : [
      {
        "comment"  : "Secret byte array for authentication.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "credentials"
      },
      {
        "comment"  : "Unique string identifying the connected client uniquely. This string is generated by the owner member server<br>                             on initial connection. When the client connects to a non-owner member it sets this field on the request.",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "uuid"
      },
      {
        "comment"  : "Unique string identifying the server member uniquely.",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "ownerUuid"
      },
      {
        "comment"  : "You must set this field to true while connecting to the owner member, otherwise set to false.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "isOwnerConnection"
      },
      {
        "comment"  : "The type of the client. E.g. JAVA, CPP, CSHARP, etc.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "clientType"
      },
      {
        "comment"  : "client side supported version to inform server side",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "byte",
        "name"     : "serializationVersion"
      },
      {
        "comment"  : "The Hazelcast version of the client. (e.g. 3.7.2)<br>",
        "since"    : "1.3",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "clientHazelcastVersion"
      }
    ],

    "responseId" : "0x006b"

  , "response" : {
    "comment"  : "Returns the address, uuid and owner uuid.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "byte",
        "name"     : "status"
      },
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.Address",
        "name"     : "address"
      },
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "uuid"
      },
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "ownerUuid"
      },
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "byte",
        "name"     : "serializationVersion"
      },
      {
        "since"    : "1.3",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "serverHazelcastVersion"
      },
      {
        "since"    : "1.3",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.core.Member>",
        "name"     : "clientUnregisteredMembers"
      }
    ]
  }


  },
  {
    "fullName"  : "ClientAddMembershipListenerCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Generic",
    "request"   : "AddMembershipListener",
    "partition" : "-1",
    "requestId" : "0x0004",
    "requests" : [
      {
        "comment"  : "if true only master node sends events, otherwise all registered nodes send all membership<br>                  changes.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "localOnly"
      }
    ],

    "responseId" : "0x0068"

  , "response" : {
    "comment"  : "Returns the registration id for the listener.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "response"
      }
    ]
  }

  , "event" : [
    {
      "eventId" : "0x00c8",
      "name" : "Member",
      "params"  :[
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "com.hazelcast.core.Member",
          "name"     : "member"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "eventType"
        }
      ]
    },
    {
      "eventId" : "0x00c9",
      "name" : "MemberList",
      "params"  :[
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.util.List<com.hazelcast.core.Member>",
          "name"     : "members"
        }
      ]
    },
    {
      "eventId" : "0x00ca",
      "name" : "MemberAttributeChange",
      "params"  :[
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.lang.String",
          "name"     : "uuid"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.lang.String",
          "name"     : "key"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "operationType"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "java.lang.String",
          "name"     : "value"
        }
      ]
    }
  ]

  },
  {
    "fullName"  : "ClientCreateProxyCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Generic",
    "request"   : "CreateProxy",
    "partition" : "-1",
    "requestId" : "0x0005",
    "requests" : [
      {
        "comment"  : "The distributed object name for which the proxy is being created for.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The name of the service. Possible service names are:<br>                    \"hz:impl:listService\"<br>                    \"hz:impl:queueService\"<br>                    \"hz:impl:setService\"<br>                    \"hz:impl:atomicLongService\"<br>                    \"hz:impl:atomicReferenceService\"<br>                    \"hz:impl:countDownLatchService\"<br>                    \"hz:impl:idGeneratorService\"<br>                    \"hz:impl:semaphoreService\"<br>                    \"hz:impl:executorService\"<br>                    \"hz:impl:mapService\"<br>                    \"hz:impl:mapReduceService\"<br>                    \"hz:impl:multiMapService\"<br>                    \"hz:impl:quorumService\"<br>                    \"hz:impl:replicatedMapService\"<br>                    \"hz:impl:ringbufferService\"<br>                    \"hz:core:proxyService\"<br>                    \"hz:impl:reliableTopicService\"<br>                    \"hz:impl:topicService\"<br>                    \"hz:core:txManagerService\"<br>                    \"hz:impl:xaService\"",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "serviceName"
      },
      {
        "comment"  : "",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.Address",
        "name"     : "target"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "ClientDestroyProxyCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Generic",
    "request"   : "DestroyProxy",
    "partition" : "-1",
    "requestId" : "0x0006",
    "requests" : [
      {
        "comment"  : "The distributed object name for which the proxy is being destroyed for.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The name of the service. Possible service names are:<br>                    \"hz:impl:listService\"<br>                    \"hz:impl:queueService\"<br>                    \"hz:impl:setService\"<br>                    \"hz:impl:atomicLongService\"<br>                    \"hz:impl:atomicReferenceService\"<br>                    \"hz:impl:countDownLatchService\"<br>                    \"hz:impl:idGeneratorService\"<br>                    \"hz:impl:semaphoreService\"<br>                    \"hz:impl:executorService\"<br>                    \"hz:impl:mapService\"<br>                    \"hz:impl:mapReduceService\"<br>                    \"hz:impl:multiMapService\"<br>                    \"hz:impl:quorumService\"<br>                    \"hz:impl:replicatedMapService\"<br>                    \"hz:impl:ringbufferService\"<br>                    \"hz:core:proxyService\"<br>                    \"hz:impl:reliableTopicService\"<br>                    \"hz:impl:topicService\"<br>                    \"hz:core:txManagerService\"<br>                    \"hz:impl:xaService\"",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "serviceName"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "ClientGetPartitionsCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Generic",
    "request"   : "GetPartitions",
    "partition" : "-1",
    "requestId" : "0x0008",

    "responseId" : "0x006c"

  , "response" : {
    "comment"  : "The partition list for each member address.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<com.hazelcast.nio.Address,java.util.List<java.lang.Integer>>>",
        "name"     : "partitions"
      }
    ]
  }


  },
  {
    "fullName"  : "ClientRemoveAllListenersCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Generic",
    "request"   : "RemoveAllListeners",
    "partition" : "-1",
    "requestId" : "0x0009",

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "ClientAddPartitionLostListenerCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Generic",
    "request"   : "AddPartitionLostListener",
    "partition" : "-1",
    "requestId" : "0x000a",
    "requests" : [
      {
        "comment"  : "if true only node that has the partition sends the request, if false<br>                  sends all partition lost events.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "localOnly"
      }
    ],

    "responseId" : "0x0068"

  , "response" : {
    "comment"  : "The listener registration id.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "response"
      }
    ]
  }

  , "event" : [
    {
      "eventId" : "0x00ce",
      "name" : "PartitionLost",
      "params"  :[
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "partitionId"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "lostBackupCount"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.Address",
          "name"     : "source"
        }
      ]
    }
  ]

  },
  {
    "fullName"  : "ClientRemovePartitionLostListenerCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Generic",
    "request"   : "RemovePartitionLostListener",
    "partition" : "-1",
    "requestId" : "0x000b",
    "requests" : [
      {
        "comment"  : "The id assigned during the listener registration.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "registrationId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "true if the listener existed and removed, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ClientGetDistributedObjectsCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Generic",
    "request"   : "GetDistributedObjects",
    "partition" : "-1",
    "requestId" : "0x000c",

    "responseId" : "0x006e"

  , "response" : {
    "comment"  : "An array of distributed object info in the cluster.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.client.impl.client.DistributedObjectInfo>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ClientAddDistributedObjectListenerCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Generic",
    "request"   : "AddDistributedObjectListener",
    "partition" : "-1",
    "requestId" : "0x000d",
    "requests" : [
      {
        "comment"  : "If set to true, the server adds the listener only to itself, otherwise the listener is is added for all<br>                  members in the cluster.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "localOnly"
      }
    ],

    "responseId" : "0x0068"

  , "response" : {
    "comment"  : "The registration id for the distributed object listener.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "response"
      }
    ]
  }

  , "event" : [
    {
      "eventId" : "0x00cf",
      "name" : "DistributedObject",
      "params"  :[
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.lang.String",
          "name"     : "name"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.lang.String",
          "name"     : "serviceName"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.lang.String",
          "name"     : "eventType"
        }
      ]
    }
  ]

  },
  {
    "fullName"  : "ClientRemoveDistributedObjectListenerCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Generic",
    "request"   : "RemoveDistributedObjectListener",
    "partition" : "-1",
    "requestId" : "0x000e",
    "requests" : [
      {
        "comment"  : "The id assigned during the registration.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "registrationId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "true if the listener existed and removed, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ClientPingCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Generic",
    "request"   : "Ping",
    "partition" : "-1",
    "requestId" : "0x000f",

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "ClientStatisticsCodec",
    "retryable" : "0",
    "since"     : "1.5",
    "comment"   : "comment",
    "object"    : "Generic",
    "request"   : "Statistics",
    "partition" : "-1",
    "requestId" : "0x0010",
    "requests" : [
      {
        "comment"  : "The key=value pairs separated by the ',' character",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "stats"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "ClientDeployClassesCodec",
    "retryable" : "0",
    "since"     : "1.5",
    "comment"   : "Deploys the list of classes to cluster<br> Each item is a Map.Entry<String, byte[]> in the list.<br> key of entry is full class name, and byte[] is the class definition.",
    "object"    : "Generic",
    "request"   : "DeployClasses",
    "partition" : "-1",
    "requestId" : "0x0011",
    "requests" : [
      {
        "comment"  : "list of class definitions",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<java.lang.String,byte[]>>",
        "name"     : "classDefinitions"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "ClientAddPartitionListenerCodec",
    "retryable" : "0",
    "since"     : "1.5",
    "comment"   : "",
    "object"    : "Generic",
    "request"   : "AddPartitionListener",
    "partition" : "-1",
    "requestId" : "0x0012",

    "responseId" : "0x0064"


  , "event" : [
    {
      "eventId" : "0x00d9",
      "name" : "Partitions",
      "params"  :[
        {
          "since"    : "1.5",
          "nullable" : "false",
          "type"     : "java.util.List<java.util.Map.Entry<com.hazelcast.nio.Address,java.util.List<java.lang.Integer>>>",
          "name"     : "partitions"
        }
      ]
    }
  ]

  },
  {
    "fullName"  : "MapPutCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Puts an entry into this map with a given ttl (time to live) value.Entry will expire and get evicted after the ttl<br> If ttl is 0, then the entry lives forever.This method returns a clone of the previous value, not the original<br> (identically equal) value previously put into the map.Time resolution for TTL is seconds. The given TTL value is<br> rounded to the next closest second value.",
    "object"    : "Map",
    "request"   : "Put",
    "partition" : "key",
    "requestId" : "0x0101",
    "requests" : [
      {
        "comment"  : "Name of the map.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Key for the map entry.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "Value for the map entry.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "The duration in milliseconds after which this entry shall be deleted. O means infinite.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "ttl"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "old value of the entry",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapGetCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "This method returns a clone of the original value, so modifying the returned value does not change the actual<br> value in the map. You should put the modified value back to make changes visible to all nodes.",
    "object"    : "Map",
    "request"   : "Get",
    "partition" : "key",
    "requestId" : "0x0102",
    "requests" : [
      {
        "comment"  : "Name of the map.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Key for the map entry.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The value for the key if exists",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapRemoveCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Removes the mapping for a key from this map if it is present (optional operation).<br> Returns the value to which this map previously associated the key, or null if the map contained no mapping for the key.<br> If this map permits null values, then a return value of null does not necessarily indicate that the map contained no mapping for the key; it's also<br> possible that the map explicitly mapped the key to null. The map will not contain a mapping for the specified key once the<br> call returns.",
    "object"    : "Map",
    "request"   : "Remove",
    "partition" : "key",
    "requestId" : "0x0103",
    "requests" : [
      {
        "comment"  : "Name of the map.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Key for the map entry.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "Clone of the removed value, not the original (identically equal) value previously put into the map.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapReplaceCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Replaces the entry for a key only if currently mapped to a given value.",
    "object"    : "Map",
    "request"   : "Replace",
    "partition" : "key",
    "requestId" : "0x0104",
    "requests" : [
      {
        "comment"  : "Name of the map.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Key for the map entry.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "New value for the map entry.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "Clone of the previous value, not the original (identically equal) value previously put into the map.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapReplaceIfSameCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Replaces the the entry for a key only if existing values equal to the testValue",
    "object"    : "Map",
    "request"   : "ReplaceIfSame",
    "partition" : "key",
    "requestId" : "0x0105",
    "requests" : [
      {
        "comment"  : "Name of the map.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Key for the map entry.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "Test the existing value against this value to find if equal to this value.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "testValue"
      },
      {
        "comment"  : "New value for the map entry. Only replace with this value if existing value is equal to the testValue.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "true if value is replaced with new one, false otherwise",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapContainsKeyCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns true if this map contains a mapping for the specified key.",
    "object"    : "Map",
    "request"   : "ContainsKey",
    "partition" : "key",
    "requestId" : "0x0109",
    "requests" : [
      {
        "comment"  : "Name of the map.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Key for the map entry.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "Returns true if the key exists, otherwise returns false.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapContainsValueCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns true if this map maps one or more keys to the specified value.This operation will probably require time<br> linear in the map size for most implementations of the Map interface.",
    "object"    : "Map",
    "request"   : "ContainsValue",
    "partition" : "-1",
    "requestId" : "0x010a",
    "requests" : [
      {
        "comment"  : "Name of the map.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Value to check if exists in the map.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "Returns true if the value exists, otherwise returns false.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapRemoveIfSameCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Removes the mapping for a key from this map if existing value equal to the this value",
    "object"    : "Map",
    "request"   : "RemoveIfSame",
    "partition" : "key",
    "requestId" : "0x010b",
    "requests" : [
      {
        "comment"  : "Name of the map.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Key for the map entry.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "Test the existing value against this value to find if equal to this value. Only remove the entry from the map if the value is equal to this value.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "Returns true if the key exists and removed, otherwise returns false.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapDeleteCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Removes the mapping for a key from this map if it is present.Unlike remove(Object), this operation does not return<br> the removed value, which avoids the serialization cost of the returned value.If the removed value will not be used,<br> a delete operation is preferred over a remove operation for better performance. The map will not contain a mapping<br> for the specified key once the call returns.<br> This method breaks the contract of EntryListener. When an entry is removed by delete(), it fires an EntryEvent<br> with a null oldValue. Also, a listener with predicates will have null values, so only keys can be queried via predicates",
    "object"    : "Map",
    "request"   : "Delete",
    "partition" : "key",
    "requestId" : "0x010c",
    "requests" : [
      {
        "comment"  : "Name of the map.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Key for the map entry.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "MapFlushCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "If this map has a MapStore, this method flushes all the local dirty entries by calling MapStore.storeAll()<br> and/or MapStore.deleteAll().",
    "object"    : "Map",
    "request"   : "Flush",
    "partition" : "-1",
    "requestId" : "0x010d",
    "requests" : [
      {
        "comment"  : "Name of the map.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "MapTryRemoveCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Tries to remove the entry with the given key from this map within the specified timeout value.<br> If the key is already locked by another thread and/or member, then this operation will wait the timeout<br> amount for acquiring the lock.",
    "object"    : "Map",
    "request"   : "TryRemove",
    "partition" : "key",
    "requestId" : "0x010e",
    "requests" : [
      {
        "comment"  : "Name of the map.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Key for the map entry.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "maximum time in milliseconds to wait for acquiring the lock for the key.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "timeout"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "Returns true if successful, otherwise returns false",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapTryPutCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Tries to put the given key and value into this map within a specified timeout value. If this method returns false,<br> it means that the caller thread could not acquire the lock for the key within the timeout duration,<br> thus the put operation is not successful.",
    "object"    : "Map",
    "request"   : "TryPut",
    "partition" : "key",
    "requestId" : "0x010f",
    "requests" : [
      {
        "comment"  : "Name of the map.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Key for the map entry.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "New value for the map entry.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "maximum time in milliseconds to wait for acquiring the lock for the key.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "timeout"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "Returns true if successful, otherwise returns false",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapPutTransientCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Same as put except that MapStore, if defined, will not be called to store/persist the entry.<br> If ttl is 0, then the entry lives forever.",
    "object"    : "Map",
    "request"   : "PutTransient",
    "partition" : "key",
    "requestId" : "0x0110",
    "requests" : [
      {
        "comment"  : "Name of the map.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Key for the map entry.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "New value for the map entry.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "The duration in milliseconds after which this entry shall be deleted. O means infinite.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "ttl"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "MapPutIfAbsentCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Puts an entry into this map with a given ttl (time to live) value if the specified key is not already associated<br> with a value. Entry will expire and get evicted after the ttl.",
    "object"    : "Map",
    "request"   : "PutIfAbsent",
    "partition" : "key",
    "requestId" : "0x0111",
    "requests" : [
      {
        "comment"  : "Name of the map.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Key for the map entry.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "New value for the map entry.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "The duration in milliseconds after which this entry shall be deleted. O means infinite.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "ttl"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "returns a clone of the previous value, not the original (identically equal) value previously put into the map.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapSetCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Puts an entry into this map with a given ttl (time to live) value.Entry will expire and get evicted after the ttl<br> If ttl is 0, then the entry lives forever. Similar to the put operation except that set doesn't<br> return the old value, which is more efficient.",
    "object"    : "Map",
    "request"   : "Set",
    "partition" : "key",
    "requestId" : "0x0112",
    "requests" : [
      {
        "comment"  : "Name of the map.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Key for the map entry.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "New value for the map entry.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "The duration in milliseconds after which this entry shall be deleted. O means infinite.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "ttl"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "MapLockCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Acquires the lock for the specified lease time.After lease time, lock will be released.If the lock is not<br> available then the current thread becomes disabled for thread scheduling purposes and lies dormant until the lock<br> has been acquired.<br> Scope of the lock is this map only. Acquired lock is only for the key in this map. Locks are re-entrant,<br> so if the key is locked N times then it should be unlocked N times before another thread can acquire it.",
    "object"    : "Map",
    "request"   : "Lock",
    "partition" : "key",
    "requestId" : "0x0113",
    "requests" : [
      {
        "comment"  : "Name of the map.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Key for the map entry.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "The duration in milliseconds after which this entry shall be deleted. O means infinite.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "ttl"
      },
      {
        "comment"  : "The client-wide unique id for this request. It is used to make the request idempotent by sending the same reference id during retries.",
        "since"    : "1.2",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "referenceId"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "MapTryLockCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Tries to acquire the lock for the specified key for the specified lease time.After lease time, the lock will be<br> released.If the lock is not available, then the current thread becomes disabled for thread scheduling<br> purposes and lies dormant until one of two things happens the lock is acquired by the current thread, or<br> the specified waiting time elapses.",
    "object"    : "Map",
    "request"   : "TryLock",
    "partition" : "key",
    "requestId" : "0x0114",
    "requests" : [
      {
        "comment"  : "Name of the map.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Key for the map entry.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "time in milliseconds to wait before releasing the lock.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "lease"
      },
      {
        "comment"  : "maximum time to wait for getting the lock.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "timeout"
      },
      {
        "comment"  : "The client-wide unique id for this request. It is used to make the request idempotent by sending the same reference id during retries.<br>",
        "since"    : "1.2",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "referenceId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "Returns true if successful, otherwise returns false",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapIsLockedCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Checks the lock for the specified key.If the lock is acquired then returns true, else returns false.",
    "object"    : "Map",
    "request"   : "IsLocked",
    "partition" : "key",
    "requestId" : "0x0115",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Key for the map entry to check if it is locked.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "Returns true if the entry is locked, otherwise returns false",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapUnlockCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Releases the lock for the specified key. It never blocks and returns immediately.<br> If the current thread is the holder of this lock, then the hold count is decremented.If the hold count is zero,<br> then the lock is released.  If the current thread is not the holder of this lock,<br> then ILLEGAL_MONITOR_STATE is thrown.",
    "object"    : "Map",
    "request"   : "Unlock",
    "partition" : "key",
    "requestId" : "0x0116",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Key for the map entry to unlock",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "The client-wide unique id for this request. It is used to make the request idempotent by sending the same reference id during retries.",
        "since"    : "1.2",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "referenceId"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "MapAddInterceptorCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Adds an interceptor for this map. Added interceptor will intercept operations<br> and execute user defined methods and will cancel operations if user defined method throw exception.",
    "object"    : "Map",
    "request"   : "AddInterceptor",
    "partition" : "-1",
    "requestId" : "0x0117",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "interceptor to add<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "interceptor"
      }
    ],

    "responseId" : "0x0068"

  , "response" : {
    "comment"  : "id of registered interceptor.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapRemoveInterceptorCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Removes the given interceptor for this map so it will not intercept operations anymore.",
    "object"    : "Map",
    "request"   : "RemoveInterceptor",
    "partition" : "-1",
    "requestId" : "0x0118",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "of interceptor<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "id"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "Returns true if successful, otherwise returns false",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapAddEntryListenerToKeyWithPredicateCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Adds a MapListener for this map. To receive an event, you should implement a corresponding MapListener<br> sub-interface for that event.",
    "object"    : "Map",
    "request"   : "AddEntryListenerToKeyWithPredicate",
    "partition" : "-1",
    "requestId" : "0x0119",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Key for the map entry.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "predicate for filtering entries.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "predicate"
      },
      {
        "comment"  : "true if EntryEvent should<br>                      contain the value.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "includeValue"
      },
      {
        "comment"  : "flags of enabled listeners.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "listenerFlags"
      },
      {
        "comment"  : "if true fires events that originated from this node only, otherwise fires all events<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "localOnly"
      }
    ],

    "responseId" : "0x0068"

  , "response" : {
    "comment"  : "A unique string which is used as a key to remove the listener.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "response"
      }
    ]
  }

  , "event" : [
    {
      "eventId" : "0x00cb",
      "name" : "Entry",
      "params"  :[
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "key"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "value"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "oldValue"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "mergingValue"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "eventType"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.lang.String",
          "name"     : "uuid"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "numberOfAffectedEntries"
        }
      ]
    }
  ]

  },
  {
    "fullName"  : "MapAddEntryListenerWithPredicateCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Adds an continuous entry listener for this map. Listener will get notified for map add/remove/update/evict events<br> filtered by the given predicate.",
    "object"    : "Map",
    "request"   : "AddEntryListenerWithPredicate",
    "partition" : "-1",
    "requestId" : "0x011a",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "predicate for filtering entries.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "predicate"
      },
      {
        "comment"  : "true if EntryEvent should<br>                      contain the value.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "includeValue"
      },
      {
        "comment"  : "flags of enabled listeners.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "listenerFlags"
      },
      {
        "comment"  : "if true fires events that originated from this node only, otherwise fires all events<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "localOnly"
      }
    ],

    "responseId" : "0x0068"

  , "response" : {
    "comment"  : "A unique string which is used as a key to remove the listener.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "response"
      }
    ]
  }

  , "event" : [
    {
      "eventId" : "0x00cb",
      "name" : "Entry",
      "params"  :[
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "key"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "value"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "oldValue"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "mergingValue"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "eventType"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.lang.String",
          "name"     : "uuid"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "numberOfAffectedEntries"
        }
      ]
    }
  ]

  },
  {
    "fullName"  : "MapAddEntryListenerToKeyCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Adds a MapListener for this map. To receive an event, you should implement a corresponding MapListener<br> sub-interface for that event.",
    "object"    : "Map",
    "request"   : "AddEntryListenerToKey",
    "partition" : "-1",
    "requestId" : "0x011b",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Key for the map entry.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "true if EntryEvent should contain the value.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "includeValue"
      },
      {
        "comment"  : "flags of enabled listeners.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "listenerFlags"
      },
      {
        "comment"  : "if true fires events that originated from this node only, otherwise fires all events<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "localOnly"
      }
    ],

    "responseId" : "0x0068"

  , "response" : {
    "comment"  : "A unique string which is used as a key to remove the listener.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "response"
      }
    ]
  }

  , "event" : [
    {
      "eventId" : "0x00cb",
      "name" : "Entry",
      "params"  :[
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "key"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "value"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "oldValue"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "mergingValue"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "eventType"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.lang.String",
          "name"     : "uuid"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "numberOfAffectedEntries"
        }
      ]
    }
  ]

  },
  {
    "fullName"  : "MapAddEntryListenerCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Adds a MapListener for this map. To receive an event, you should implement a corresponding MapListener<br> sub-interface for that event.",
    "object"    : "Map",
    "request"   : "AddEntryListener",
    "partition" : "-1",
    "requestId" : "0x011c",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "true if EntryEvent should contain the value.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "includeValue"
      },
      {
        "comment"  : "flags of enabled listeners.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "listenerFlags"
      },
      {
        "comment"  : "if true fires events that originated from this node only, otherwise fires all events<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "localOnly"
      }
    ],

    "responseId" : "0x0068"

  , "response" : {
    "comment"  : "A unique string which is used as a key to remove the listener.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "response"
      }
    ]
  }

  , "event" : [
    {
      "eventId" : "0x00cb",
      "name" : "Entry",
      "params"  :[
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "key"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "value"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "oldValue"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "mergingValue"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "eventType"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.lang.String",
          "name"     : "uuid"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "numberOfAffectedEntries"
        }
      ]
    }
  ]

  },
  {
    "fullName"  : "MapAddNearCacheEntryListenerCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Adds an entry listener for this map. Listener will get notified for all map add/remove/update/evict events.",
    "object"    : "Map",
    "request"   : "AddNearCacheEntryListener",
    "partition" : "-1",
    "requestId" : "0x011d",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "flags of enabled listeners.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "listenerFlags"
      },
      {
        "comment"  : "if true fires events that originated from this node only, otherwise fires all events<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "localOnly"
      }
    ],

    "responseId" : "0x0068"

  , "response" : {
    "comment"  : "A unique string which is used as a key to remove the listener.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "response"
      }
    ]
  }

  , "event" : [
    {
      "eventId" : "0x00d7",
      "name" : "IMapInvalidation",
      "params"  :[
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "key"
        },
        {
          "since"    : "1.4",
          "nullable" : "false",
          "type"     : "java.lang.String",
          "name"     : "sourceUuid"
        },
        {
          "since"    : "1.4",
          "nullable" : "false",
          "type"     : "java.util.UUID",
          "name"     : "partitionUuid"
        },
        {
          "since"    : "1.4",
          "nullable" : "false",
          "type"     : "long",
          "name"     : "sequence"
        }
      ]
    },
    {
      "eventId" : "0x00d8",
      "name" : "IMapBatchInvalidation",
      "params"  :[
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
          "name"     : "keys"
        },
        {
          "since"    : "1.4",
          "nullable" : "false",
          "type"     : "java.util.List<java.lang.String>",
          "name"     : "sourceUuids"
        },
        {
          "since"    : "1.4",
          "nullable" : "false",
          "type"     : "java.util.List<java.util.UUID>",
          "name"     : "partitionUuids"
        },
        {
          "since"    : "1.4",
          "nullable" : "false",
          "type"     : "java.util.List<java.lang.Long>",
          "name"     : "sequences"
        }
      ]
    }
  ]

  },
  {
    "fullName"  : "MapRemoveEntryListenerCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Removes the specified entry listener. Returns silently if there is no such listener added before.",
    "object"    : "Map",
    "request"   : "RemoveEntryListener",
    "partition" : "-1",
    "requestId" : "0x011e",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "id of registered listener.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "registrationId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "true if registration is removed, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapAddPartitionLostListenerCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Adds a MapPartitionLostListener. The addPartitionLostListener returns a register-id. This id is needed to remove<br> the MapPartitionLostListener using the removePartitionLostListener(String) method.<br> There is no check for duplicate registrations, so if you register the listener twice, it will get events twice.<br> IMPORTANT: Please see com.hazelcast.partition.PartitionLostListener for weaknesses.<br> IMPORTANT: Listeners registered from HazelcastClient may miss some of the map partition lost events due<br> to design limitations.",
    "object"    : "Map",
    "request"   : "AddPartitionLostListener",
    "partition" : "-1",
    "requestId" : "0x011f",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "if true fires events that originated from this node only, otherwise fires all events<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "localOnly"
      }
    ],

    "responseId" : "0x0068"

  , "response" : {
    "comment"  : "returns the registration id for the MapPartitionLostListener.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "response"
      }
    ]
  }

  , "event" : [
    {
      "eventId" : "0x00d1",
      "name" : "MapPartitionLost",
      "params"  :[
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "partitionId"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.lang.String",
          "name"     : "uuid"
        }
      ]
    }
  ]

  },
  {
    "fullName"  : "MapRemovePartitionLostListenerCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Removes the specified map partition lost listener. Returns silently if there is no such listener added before.",
    "object"    : "Map",
    "request"   : "RemovePartitionLostListener",
    "partition" : "-1",
    "requestId" : "0x0120",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "id of register<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "registrationId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "true if registration is removed, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapGetEntryViewCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns the EntryView for the specified key.<br> This method returns a clone of original mapping, modifying the returned value does not change the actual value<br> in the map. One should put modified value back to make changes visible to all nodes.",
    "object"    : "Map",
    "request"   : "GetEntryView",
    "partition" : "key",
    "requestId" : "0x0121",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "the key of the entry.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x006f"

  , "response" : {
    "comment"  : "EntryView of the specified key.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.map.impl.SimpleEntryView<com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapEvictCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Evicts the specified key from this map. If a MapStore is defined for this map, then the entry is not deleted<br> from the underlying MapStore, evict only removes the entry from the memory.",
    "object"    : "Map",
    "request"   : "Evict",
    "partition" : "key",
    "requestId" : "0x0122",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "the specified key to evict from this map.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "true if the key is evicted, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapEvictAllCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Evicts all keys from this map except the locked ones. If a MapStore is defined for this map, deleteAll is not<br> called by this method. If you do want to deleteAll to be called use the clear method. The EVICT_ALL event is<br> fired for any registered listeners.",
    "object"    : "Map",
    "request"   : "EvictAll",
    "partition" : "-1",
    "requestId" : "0x0123",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "MapLoadAllCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Loads all keys into the store. This is a batch load operation so that an implementation can optimize the multiple loads.",
    "object"    : "Map",
    "request"   : "LoadAll",
    "partition" : "-1",
    "requestId" : "0x0124",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "when <code>true</code>, existing values in the Map will<br>                              be replaced by those loaded from the MapLoader",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "replaceExistingValues"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "MapLoadGivenKeysCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Loads the given keys. This is a batch load operation so that an implementation can optimize the multiple loads.",
    "object"    : "Map",
    "request"   : "LoadGivenKeys",
    "partition" : "-1",
    "requestId" : "0x0125",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "keys to load",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "keys"
      },
      {
        "comment"  : "when <code>true</code>, existing values in the Map will be replaced by those loaded from the MapLoader",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "replaceExistingValues"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "MapKeySetCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns a set clone of the keys contained in this map. The set is NOT backed by the map, so changes to the map<br> are NOT reflected in the set, and vice-versa. This method is always executed by a distributed query, so it may<br> throw a QueryResultSizeExceededException if query result size limit is configured.",
    "object"    : "Map",
    "request"   : "KeySet",
    "partition" : "-1",
    "requestId" : "0x0126",
    "requests" : [
      {
        "comment"  : "name of the map<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x006a"

  , "response" : {
    "comment"  : "a set clone of the keys contained in this map.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapGetAllCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Returns the entries for the given keys. If any keys are not present in the Map, it will call loadAll The returned<br> map is NOT backed by the original map, so changes to the original map are NOT reflected in the returned map, and vice-versa.<br> Please note that all the keys in the request should belong to the partition id to which this request is being sent, all keys<br> matching to a different partition id shall be ignored. The API implementation using this request may need to send multiple<br> of these request messages for filling a request for a key set if the keys belong to different partitions.",
    "object"    : "Map",
    "request"   : "GetAll",
    "partition" : "any key belongs to target partition",
    "requestId" : "0x0127",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "keys to get<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "keys"
      }
    ],

    "responseId" : "0x0075"

  , "response" : {
    "comment"  : "values for the provided keys.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data>>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapValuesCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns a collection clone of the values contained in this map.<br> The collection is NOT backed by the map, so changes to the map are NOT reflected in the collection, and vice-versa.<br> This method is always executed by a distributed query, so it may throw a QueryResultSizeExceededException<br> if query result size limit is configured.",
    "object"    : "Map",
    "request"   : "Values",
    "partition" : "-1",
    "requestId" : "0x0128",
    "requests" : [
      {
        "comment"  : "name of map<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x006a"

  , "response" : {
    "comment"  : "All values in the map",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapEntrySetCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns a Set clone of the mappings contained in this map.<br> The collection is NOT backed by the map, so changes to the map are NOT reflected in the collection, and vice-versa.<br> This method is always executed by a distributed query, so it may throw a QueryResultSizeExceededException<br> if query result size limit is configured.",
    "object"    : "Map",
    "request"   : "EntrySet",
    "partition" : "-1",
    "requestId" : "0x0129",
    "requests" : [
      {
        "comment"  : "name of map<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0075"

  , "response" : {
    "comment"  : "a set clone of the keys mappings in this map",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data>>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapKeySetWithPredicateCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Queries the map based on the specified predicate and returns the keys of matching entries. Specified predicate<br> runs on all members in parallel.The set is NOT backed by the map, so changes to the map are NOT reflected in the<br> set, and vice-versa. This method is always executed by a distributed query, so it may throw a<br> QueryResultSizeExceededException if query result size limit is configured.",
    "object"    : "Map",
    "request"   : "KeySetWithPredicate",
    "partition" : "-1",
    "requestId" : "0x012a",
    "requests" : [
      {
        "comment"  : "name of map.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "specified query criteria.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "predicate"
      }
    ],

    "responseId" : "0x006a"

  , "response" : {
    "comment"  : "result key set for the query.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapValuesWithPredicateCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Queries the map based on the specified predicate and returns the values of matching entries.Specified predicate<br> runs on all members in parallel. The collection is NOT backed by the map, so changes to the map are NOT reflected<br> in the collection, and vice-versa. This method is always executed by a distributed query, so it may throw a<br> QueryResultSizeExceededException if query result size limit is configured.",
    "object"    : "Map",
    "request"   : "ValuesWithPredicate",
    "partition" : "-1",
    "requestId" : "0x012b",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "specified query criteria.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "predicate"
      }
    ],

    "responseId" : "0x006a"

  , "response" : {
    "comment"  : "result value collection of the query.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapEntriesWithPredicateCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Queries the map based on the specified predicate and returns the matching entries.Specified predicate<br> runs on all members in parallel. The collection is NOT backed by the map, so changes to the map are NOT reflected<br> in the collection, and vice-versa. This method is always executed by a distributed query, so it may throw a<br> QueryResultSizeExceededException if query result size limit is configured.",
    "object"    : "Map",
    "request"   : "EntriesWithPredicate",
    "partition" : "-1",
    "requestId" : "0x012c",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "specified query criteria.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "predicate"
      }
    ],

    "responseId" : "0x0075"

  , "response" : {
    "comment"  : "result key-value entry collection of the query.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data>>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapAddIndexCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Adds an index to this map for the specified entries so that queries can run faster.If you are querying your values<br> mostly based on age and active then you should consider indexing these fields.<br> Index attribute should either have a getter method or be public.You should also make sure to add the indexes before<br> adding entries to this map.<br> Indexing time is executed in parallel on each partition by operation threads. The Map is not blocked during this<br> operation.The time taken in proportional to the size of the Map and the number Members.<br> Until the index finishes being created, any searches for the attribute will use a full Map scan, thus avoiding<br> using a partially built index and returning incorrect results.",
    "object"    : "Map",
    "request"   : "AddIndex",
    "partition" : "-1",
    "requestId" : "0x012d",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "index attribute of value",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "attribute"
      },
      {
        "comment"  : "true if index should be ordered, false otherwise.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "ordered"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "MapSizeCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns the number of key-value mappings in this map.  If the map contains more than Integer.MAX_VALUE elements,<br> returns Integer.MAX_VALUE",
    "object"    : "Map",
    "request"   : "Size",
    "partition" : "-1",
    "requestId" : "0x012e",
    "requests" : [
      {
        "comment"  : "of map<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0066"

  , "response" : {
    "comment"  : "the number of key-value mappings in this map",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapIsEmptyCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns true if this map contains no key-value mappings.",
    "object"    : "Map",
    "request"   : "IsEmpty",
    "partition" : "-1",
    "requestId" : "0x012f",
    "requests" : [
      {
        "comment"  : "name of map<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "true if this map contains no key-value mappings",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapPutAllCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Copies all of the mappings from the specified map to this map (optional operation).The effect of this call is<br> equivalent to that of calling put(Object,Object) put(k, v) on this map once for each mapping from key k to value<br> v in the specified map.The behavior of this operation is undefined if the specified map is modified while the<br> operation is in progress.<br> Please note that all the keys in the request should belong to the partition id to which this request is being sent, all keys<br> matching to a different partition id shall be ignored. The API implementation using this request may need to send multiple<br> of these request messages for filling a request for a key set if the keys belong to different partitions.",
    "object"    : "Map",
    "request"   : "PutAll",
    "partition" : "any key belongs to target partition",
    "requestId" : "0x0130",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "mappings to be stored in this map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data>>",
        "name"     : "entries"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "MapClearCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "This method clears the map and invokes MapStore#deleteAll deleteAll on MapStore which, if connected to a database,<br> will delete the records from that database. The MAP_CLEARED event is fired for any registered listeners.<br> To clear a map without calling MapStore#deleteAll, use #evictAll.",
    "object"    : "Map",
    "request"   : "Clear",
    "partition" : "-1",
    "requestId" : "0x0131",
    "requests" : [
      {
        "comment"  : "of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "MapExecuteOnKeyCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Applies the user defined EntryProcessor to the entry mapped by the key. Returns the the object which is result of<br> the process() method of EntryProcessor.",
    "object"    : "Map",
    "request"   : "ExecuteOnKey",
    "partition" : "key",
    "requestId" : "0x0132",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "processor to execute on the map entry",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "entryProcessor"
      },
      {
        "comment"  : "the key of the map entry.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "result of entry process.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapSubmitToKeyCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Applies the user defined EntryProcessor to the entry mapped by the key. Returns immediately with a Future<br> representing that task.EntryProcessor is not cancellable, so calling Future.cancel() method won't cancel the<br> operation of EntryProcessor.",
    "object"    : "Map",
    "request"   : "SubmitToKey",
    "partition" : "key",
    "requestId" : "0x0133",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "entry processor to be executed on the entry.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "entryProcessor"
      },
      {
        "comment"  : "the key of the map entry.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "result of entry process.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapExecuteOnAllKeysCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Applies the user defined EntryProcessor to the all entries in the map.Returns the results mapped by each key in the map.",
    "object"    : "Map",
    "request"   : "ExecuteOnAllKeys",
    "partition" : "-1",
    "requestId" : "0x0134",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "entry processor to be executed.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "entryProcessor"
      }
    ],

    "responseId" : "0x0075"

  , "response" : {
    "comment"  : "results of entry process on the entries",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data>>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapExecuteWithPredicateCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Applies the user defined EntryProcessor to the entries in the map which satisfies provided predicate.<br> Returns the results mapped by each key in the map.",
    "object"    : "Map",
    "request"   : "ExecuteWithPredicate",
    "partition" : "-1",
    "requestId" : "0x0135",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "entry processor to be executed.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "entryProcessor"
      },
      {
        "comment"  : "specified query criteria.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "predicate"
      }
    ],

    "responseId" : "0x0075"

  , "response" : {
    "comment"  : "results of entry process on the entries matching the query criteria",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data>>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapExecuteOnKeysCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Applies the user defined EntryProcessor to the entries mapped by the collection of keys.The results mapped by<br> each key in the collection.",
    "object"    : "Map",
    "request"   : "ExecuteOnKeys",
    "partition" : "-1",
    "requestId" : "0x0136",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "entry processor to be executed.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "entryProcessor"
      },
      {
        "comment"  : "The keys for the entries for which the entry processor shall be executed on.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "keys"
      }
    ],

    "responseId" : "0x0075"

  , "response" : {
    "comment"  : "results of entry process on the entries with the provided keys",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data>>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapForceUnlockCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Releases the lock for the specified key regardless of the lock owner.It always successfully unlocks the key,<br> never blocks,and returns immediately.",
    "object"    : "Map",
    "request"   : "ForceUnlock",
    "partition" : "key",
    "requestId" : "0x0137",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "the key of the map entry.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The client-wide unique id for this request. It is used to make the request idempotent by sending the same reference id during retries.",
        "since"    : "1.2",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "referenceId"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "MapKeySetWithPagingPredicateCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Map",
    "request"   : "KeySetWithPagingPredicate",
    "partition" : "-1",
    "requestId" : "0x0138",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "specified query criteria.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "predicate"
      }
    ],

    "responseId" : "0x006a"

  , "response" : {
    "comment"  : "result keys for the query.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapValuesWithPagingPredicateCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Queries the map based on the specified predicate and returns the values of matching entries. Specified predicate<br> runs on all members in parallel. The collection is NOT backed by the map, so changes to the map are NOT reflected<br> in the collection, and vice-versa. This method is always executed by a distributed query, so it may throw a<br> QueryResultSizeExceededException if query result size limit is configured.",
    "object"    : "Map",
    "request"   : "ValuesWithPagingPredicate",
    "partition" : "-1",
    "requestId" : "0x0139",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "specified query criteria.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "predicate"
      }
    ],

    "responseId" : "0x0075"

  , "response" : {
    "comment"  : "values for the query.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data>>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapEntriesWithPagingPredicateCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Map",
    "request"   : "EntriesWithPagingPredicate",
    "partition" : "-1",
    "requestId" : "0x013a",
    "requests" : [
      {
        "comment"  : "name of map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "specified query criteria.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "predicate"
      }
    ],

    "responseId" : "0x0075"

  , "response" : {
    "comment"  : "key-value pairs for the query.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data>>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapClearNearCacheCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Map",
    "request"   : "ClearNearCache",
    "partition" : "-1",
    "requestId" : "0x013b",
    "requests" : [
      {
        "comment"  : "",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.Address",
        "name"     : "target"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "MapFetchKeysCodec",
    "retryable" : "1",
    "since"     : "1.1",
    "comment"   : "Fetches specified number of keys from the specified partition starting from specified table index.",
    "object"    : "Map",
    "request"   : "FetchKeys",
    "partition" : "partitionId",
    "requestId" : "0x013c",
    "requests" : [
      {
        "comment"  : "Name of the map.",
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The partition id which owns this record store.",
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "partitionId"
      },
      {
        "comment"  : "The slot number (or index) to start the iterator",
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "tableIndex"
      },
      {
        "comment"  : "The number of items to be batched<br>",
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "batch"
      }
    ],

    "responseId" : "0x0074"

  , "response" : {
    "comment"  : "last index processed and list of keys",
    "params"   :
    [
      {
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "tableIndex"
      },
      {
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "keys"
      }
    ]
  }


  },
  {
    "fullName"  : "MapFetchEntriesCodec",
    "retryable" : "1",
    "since"     : "1.1",
    "comment"   : "Fetches specified number of entries from the specified partition starting from specified table index.",
    "object"    : "Map",
    "request"   : "FetchEntries",
    "partition" : "partitionId",
    "requestId" : "0x013d",
    "requests" : [
      {
        "comment"  : "Name of the map.",
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The partition id which owns this record store.",
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "partitionId"
      },
      {
        "comment"  : "The slot number (or index) to start the iterator",
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "tableIndex"
      },
      {
        "comment"  : "The number of items to be batched<br>",
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "batch"
      }
    ],

    "responseId" : "0x0076"

  , "response" : {
    "comment"  : "last index processed and list of entries",
    "params"   :
    [
      {
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "tableIndex"
      },
      {
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data>>",
        "name"     : "entries"
      }
    ]
  }


  },
  {
    "fullName"  : "MapAggregateCodec",
    "retryable" : "1",
    "since"     : "1.4",
    "comment"   : "Applies the aggregation logic on all map entries and returns the result",
    "object"    : "Map",
    "request"   : "Aggregate",
    "partition" : "-1",
    "requestId" : "0x013e",
    "requests" : [
      {
        "comment"  : "Name of the map.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "aggregator to aggregate the entries with<br>",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "aggregator"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "the aggregation result",
    "params"   :
    [
      {
        "since"    : "1.4",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapAggregateWithPredicateCodec",
    "retryable" : "1",
    "since"     : "1.4",
    "comment"   : "Applies the aggregation logic on map entries filtered with the Predicate and returns the result",
    "object"    : "Map",
    "request"   : "AggregateWithPredicate",
    "partition" : "-1",
    "requestId" : "0x013f",
    "requests" : [
      {
        "comment"  : "Name of the map.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "aggregator to aggregate the entries with",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "aggregator"
      },
      {
        "comment"  : "predicate to filter the entries with<br>",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "predicate"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "the aggregation result",
    "params"   :
    [
      {
        "since"    : "1.4",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapProjectCodec",
    "retryable" : "1",
    "since"     : "1.4",
    "comment"   : "Applies the projection logic on all map entries and returns the result",
    "object"    : "Map",
    "request"   : "Project",
    "partition" : "-1",
    "requestId" : "0x0140",
    "requests" : [
      {
        "comment"  : "Name of the map.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "projection to transform the entries with. May return null.<br>",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "projection"
      }
    ],

    "responseId" : "0x0077"

  , "response" : {
    "comment"  : "the resulted collection upon transformation to the type of the projection",
    "params"   :
    [
      {
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "true",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapProjectWithPredicateCodec",
    "retryable" : "1",
    "since"     : "1.4",
    "comment"   : "Applies the projection logic on map entries filtered with the Predicate and returns the result",
    "object"    : "Map",
    "request"   : "ProjectWithPredicate",
    "partition" : "-1",
    "requestId" : "0x0141",
    "requests" : [
      {
        "comment"  : "Name of the map.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "projection to transform the entries with. May return null.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "projection"
      },
      {
        "comment"  : "predicate to filter the entries with<br>",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "predicate"
      }
    ],

    "responseId" : "0x0077"

  , "response" : {
    "comment"  : "the resulted collection upon transformation to the type of the projection",
    "params"   :
    [
      {
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "true",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapFetchNearCacheInvalidationMetadataCodec",
    "retryable" : "0",
    "since"     : "1.4",
    "comment"   : "Fetches invalidation metadata from partitions of map.",
    "object"    : "Map",
    "request"   : "FetchNearCacheInvalidationMetadata",
    "partition" : "-1",
    "requestId" : "0x0142",
    "requests" : [
      {
        "comment"  : "names of the maps<br>",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.lang.String>",
        "name"     : "names"
      },
      {
        "comment"  : "",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.Address",
        "name"     : "address"
      }
    ],

    "responseId" : "0x007a"

  , "response" : {
    "comment"  : "metadata",
    "params"   :
    [
      {
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<java.lang.String,java.util.List<java.util.Map.Entry<java.lang.Integer,java.lang.Long>>>>",
        "name"     : "namePartitionSequenceList"
      },
      {
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<java.lang.Integer,java.util.UUID>>",
        "name"     : "partitionUuidList"
      }
    ]
  }


  },
  {
    "fullName"  : "MapAssignAndGetUuidsCodec",
    "retryable" : "1",
    "since"     : "1.4",
    "comment"   : "Assigns a new UUID to each partitions or gets existing ones.",
    "object"    : "Map",
    "request"   : "AssignAndGetUuids",
    "partition" : "-1",
    "requestId" : "0x0143",

    "responseId" : "0x007b"

  , "response" : {
    "comment"  : "partitionId to assigned uuid entry list",
    "params"   :
    [
      {
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<java.lang.Integer,java.util.UUID>>",
        "name"     : "partitionUuidList"
      }
    ]
  }


  },
  {
    "fullName"  : "MapRemoveAllCodec",
    "retryable" : "0",
    "since"     : "1.4",
    "comment"   : "Removes all entries which match with the supplied predicate",
    "object"    : "Map",
    "request"   : "RemoveAll",
    "partition" : "-1",
    "requestId" : "0x0144",
    "requests" : [
      {
        "comment"  : "map name.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "used to select entries to be removed from map.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "predicate"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "MapAddNearCacheInvalidationListenerCodec",
    "retryable" : "0",
    "since"     : "1.4",
    "comment"   : "Adds listener to map. This listener will be used to listen near cache invalidation events.<br> Eventually consistent client near caches should use this method to add invalidation listeners<br> instead of {",
    "object"    : "Map",
    "request"   : "AddNearCacheInvalidationListener",
    "partition" : "-1",
    "requestId" : "0x0145",
    "requests" : [
      {
        "comment"  : "name of the map",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "flags of enabled listeners.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "listenerFlags"
      },
      {
        "comment"  : "if true fires events that originated from this node only, otherwise fires all events<br>",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "localOnly"
      }
    ],

    "responseId" : "0x0068"

  , "response" : {
    "comment"  : "A unique string which is used as a key to remove the listener.",
    "params"   :
    [
      {
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "response"
      }
    ]
  }

  , "event" : [
    {
      "eventId" : "0x00d7",
      "name" : "IMapInvalidation",
      "params"  :[
        {
          "since"    : "1.4",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "key"
        },
        {
          "since"    : "1.4",
          "nullable" : "false",
          "type"     : "java.lang.String",
          "name"     : "sourceUuid"
        },
        {
          "since"    : "1.4",
          "nullable" : "false",
          "type"     : "java.util.UUID",
          "name"     : "partitionUuid"
        },
        {
          "since"    : "1.4",
          "nullable" : "false",
          "type"     : "long",
          "name"     : "sequence"
        }
      ]
    },
    {
      "eventId" : "0x00d8",
      "name" : "IMapBatchInvalidation",
      "params"  :[
        {
          "since"    : "1.4",
          "nullable" : "false",
          "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
          "name"     : "keys"
        },
        {
          "since"    : "1.4",
          "nullable" : "false",
          "type"     : "java.util.List<java.lang.String>",
          "name"     : "sourceUuids"
        },
        {
          "since"    : "1.4",
          "nullable" : "false",
          "type"     : "java.util.List<java.util.UUID>",
          "name"     : "partitionUuids"
        },
        {
          "since"    : "1.4",
          "nullable" : "false",
          "type"     : "java.util.List<java.lang.Long>",
          "name"     : "sequences"
        }
      ]
    }
  ]

  },
  {
    "fullName"  : "MapFetchWithQueryCodec",
    "retryable" : "1",
    "since"     : "1.5",
    "comment"   : "Fetches the specified number of entries from the specified partition starting from specified table index<br> that match the predicate and applies the projection logic on them.",
    "object"    : "Map",
    "request"   : "FetchWithQuery",
    "partition" : "partitionId",
    "requestId" : "0x0146",
    "requests" : [
      {
        "comment"  : "Name of the map",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The slot number (or index) to start the iterator",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "tableIndex"
      },
      {
        "comment"  : "The number of items to be batched",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "batch"
      },
      {
        "comment"  : "projection to transform the entries with",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "projection"
      },
      {
        "comment"  : "predicate to filter the entries with<br>",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "predicate"
      }
    ],

    "responseId" : "0x007c"

  , "response" : {
    "comment"  : "last index processed and list of entries after applied to the projection",
    "params"   :
    [
      {
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "true",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "results"
      },
      {
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "nextTableIndexToReadFrom"
      }
    ]
  }


  },
  {
    "fullName"  : "MapEventJournalSubscribeCodec",
    "retryable" : "1",
    "since"     : "1.5",
    "comment"   : "Performs the initial subscription to the map event journal.<br> This includes retrieving the event journal sequences of the<br> oldest and newest event in the journal.",
    "object"    : "Map",
    "request"   : "EventJournalSubscribe",
    "partition" : "partitionId",
    "requestId" : "0x0147",
    "requests" : [
      {
        "comment"  : "name of the map<br>",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x007d"

  , "response" : {
    "comment"  : "the map event journal subcription information",
    "params"   :
    [
      {
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "oldestSequence"
      },
      {
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "newestSequence"
      }
    ]
  }


  },
  {
    "fullName"  : "MapEventJournalReadCodec",
    "retryable" : "1",
    "since"     : "1.5",
    "comment"   : "Reads from the map event journal in batches. You may specify the start sequence,<br> the minumum required number of items in the response, the maximum number of items<br> in the response, a predicate that the events should pass and a projection to<br> apply to the events in the journal.<br> If the event journal currently contains less events than {",
    "object"    : "Map",
    "request"   : "EventJournalRead",
    "partition" : "partitionId",
    "requestId" : "0x0148",
    "requests" : [
      {
        "comment"  : "name of the map",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "the startSequence of the first item to read",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "startSequence"
      },
      {
        "comment"  : "the minimum number of items to read.",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "minSize"
      },
      {
        "comment"  : "the maximum number of items to read.",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "maxSize"
      },
      {
        "comment"  : "the predicate to apply before processing events",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "predicate"
      },
      {
        "comment"  : "the projection to apply to journal events<br>",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "projection"
      }
    ],

    "responseId" : "0x0073"

  , "response" : {
    "comment"  : "read event journal items",
    "params"   :
    [
      {
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "readCount"
      },
      {
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "items"
      },
      {
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "long[]",
        "name"     : "itemSeqs"
      }
    ]
  }


  },
  {
    "fullName"  : "MultiMapPutCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Stores a key-value pair in the multimap.",
    "object"    : "MultiMap",
    "request"   : "Put",
    "partition" : "key",
    "requestId" : "0x0201",
    "requests" : [
      {
        "comment"  : "Name of the MultiMap",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The key to be stored",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The value to be stored",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if size of the multimap is increased, false if the multimap already contains the key-value pair.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MultiMapGetCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns the collection of values associated with the key. The collection is NOT backed by the map, so changes to<br> the map are NOT reflected in the collection, and vice-versa.",
    "object"    : "MultiMap",
    "request"   : "Get",
    "partition" : "key",
    "requestId" : "0x0202",
    "requests" : [
      {
        "comment"  : "Name of the MultiMap",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The key whose associated values are to be returned",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x006a"

  , "response" : {
    "comment"  : "The collection of the values associated with the key.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MultiMapRemoveCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Removes the given key value pair from the multimap.",
    "object"    : "MultiMap",
    "request"   : "Remove",
    "partition" : "key",
    "requestId" : "0x0203",
    "requests" : [
      {
        "comment"  : "Name of the MultiMap",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The key of the entry to remove",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x006a"

  , "response" : {
    "comment"  : "True if the size of the multimap changed after the remove operation, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MultiMapKeySetCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns the set of keys in the multimap.The collection is NOT backed by the map, so changes to the map are NOT<br> reflected in the collection, and vice-versa.",
    "object"    : "MultiMap",
    "request"   : "KeySet",
    "partition" : "-1",
    "requestId" : "0x0204",
    "requests" : [
      {
        "comment"  : "Name of the MultiMap<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x006a"

  , "response" : {
    "comment"  : "The set of keys in the multimap. The returned set might be modifiable but it has no effect on the multimap.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MultiMapValuesCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns the collection of values in the multimap.The collection is NOT backed by the map, so changes to the map<br> are NOT reflected in the collection, and vice-versa.",
    "object"    : "MultiMap",
    "request"   : "Values",
    "partition" : "-1",
    "requestId" : "0x0205",
    "requests" : [
      {
        "comment"  : "Name of the MultiMap<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x006a"

  , "response" : {
    "comment"  : "The collection of values in the multimap. the returned collection might be modifiable but it has no effect on the multimap.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MultiMapEntrySetCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns the set of key-value pairs in the multimap.The collection is NOT backed by the map, so changes to the map<br> are NOT reflected in the collection, and vice-versa",
    "object"    : "MultiMap",
    "request"   : "EntrySet",
    "partition" : "-1",
    "requestId" : "0x0206",
    "requests" : [
      {
        "comment"  : "Name of the MultiMap<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0075"

  , "response" : {
    "comment"  : "The set of key-value pairs in the multimap. The returned set might be modifiable but it has no effect on the multimap.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data>>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MultiMapContainsKeyCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns whether the multimap contains an entry with the key.",
    "object"    : "MultiMap",
    "request"   : "ContainsKey",
    "partition" : "key",
    "requestId" : "0x0207",
    "requests" : [
      {
        "comment"  : "Name of the MultiMap",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The key whose existence is checked.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if the multimap contains an entry with the key, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MultiMapContainsValueCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns whether the multimap contains an entry with the value.",
    "object"    : "MultiMap",
    "request"   : "ContainsValue",
    "partition" : "-1",
    "requestId" : "0x0208",
    "requests" : [
      {
        "comment"  : "Name of the MultiMap",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The value whose existence is checked.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if the multimap contains an entry with the value, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MultiMapContainsEntryCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns whether the multimap contains the given key-value pair.",
    "object"    : "MultiMap",
    "request"   : "ContainsEntry",
    "partition" : "key",
    "requestId" : "0x0209",
    "requests" : [
      {
        "comment"  : "Name of the MultiMap",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The key whose existence is checked.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The value whose existence is checked.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if the multimap contains the key-value pair, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MultiMapSizeCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns the number of key-value pairs in the multimap.",
    "object"    : "MultiMap",
    "request"   : "Size",
    "partition" : "-1",
    "requestId" : "0x020a",
    "requests" : [
      {
        "comment"  : "Name of the MultiMap<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0066"

  , "response" : {
    "comment"  : "The number of key-value pairs in the multimap.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MultiMapClearCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Clears the multimap. Removes all key-value pairs.",
    "object"    : "MultiMap",
    "request"   : "Clear",
    "partition" : "-1",
    "requestId" : "0x020b",
    "requests" : [
      {
        "comment"  : "Name of the MultiMap",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "MultiMapValueCountCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns the number of values that match the given key in the multimap.",
    "object"    : "MultiMap",
    "request"   : "ValueCount",
    "partition" : "-1",
    "requestId" : "0x020c",
    "requests" : [
      {
        "comment"  : "Name of the MultiMap",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The key whose values count is to be returned",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x0066"

  , "response" : {
    "comment"  : "The number of values that match the given key in the multimap",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MultiMapAddEntryListenerToKeyCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Adds the specified entry listener for the specified key.The listener will be notified for all<br> add/remove/update/evict events for the specified key only.",
    "object"    : "MultiMap",
    "request"   : "AddEntryListenerToKey",
    "partition" : "-1",
    "requestId" : "0x020d",
    "requests" : [
      {
        "comment"  : "Name of the MultiMap",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The key to listen to",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "True if EntryEvent should contain the value,false otherwise",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "includeValue"
      },
      {
        "comment"  : "if true fires events that originated from this node only, otherwise fires all events<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "localOnly"
      }
    ],

    "responseId" : "0x0068"

  , "response" : {
    "comment"  : "Returns registration id for the entry listener",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "response"
      }
    ]
  }

  , "event" : [
    {
      "eventId" : "0x00cb",
      "name" : "Entry",
      "params"  :[
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "key"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "value"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "oldValue"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "mergingValue"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "eventType"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.lang.String",
          "name"     : "uuid"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "numberOfAffectedEntries"
        }
      ]
    }
  ]

  },
  {
    "fullName"  : "MultiMapAddEntryListenerCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Adds an entry listener for this multimap. The listener will be notified for all multimap add/remove/update/evict events.",
    "object"    : "MultiMap",
    "request"   : "AddEntryListener",
    "partition" : "-1",
    "requestId" : "0x020e",
    "requests" : [
      {
        "comment"  : "Name of the MultiMap",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "True if EntryEvent should contain the value,false otherwise",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "includeValue"
      },
      {
        "comment"  : "if true fires events that originated from this node only, otherwise fires all events<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "localOnly"
      }
    ],

    "responseId" : "0x0068"

  , "response" : {
    "comment"  : "Returns registration id for the entry listener",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "response"
      }
    ]
  }

  , "event" : [
    {
      "eventId" : "0x00cb",
      "name" : "Entry",
      "params"  :[
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "key"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "value"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "oldValue"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "mergingValue"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "eventType"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.lang.String",
          "name"     : "uuid"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "numberOfAffectedEntries"
        }
      ]
    }
  ]

  },
  {
    "fullName"  : "MultiMapRemoveEntryListenerCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Removes the specified entry listener. Returns silently if no such listener was added before.",
    "object"    : "MultiMap",
    "request"   : "RemoveEntryListener",
    "partition" : "-1",
    "requestId" : "0x020f",
    "requests" : [
      {
        "comment"  : "Name of the MultiMap",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Registration id of listener<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "registrationId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if registration is removed, false otherwise",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MultiMapLockCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Acquires the lock for the specified key for the specified lease time. After the lease time, the lock will be<br> released. If the lock is not available, then the current thread becomes disabled for thread scheduling<br> purposes and lies dormant until the lock has been acquired. Scope of the lock is for this map only. The acquired<br> lock is only for the key in this map.Locks are re-entrant, so if the key is locked N times, then it should be<br> unlocked N times before another thread can acquire it.",
    "object"    : "MultiMap",
    "request"   : "Lock",
    "partition" : "key",
    "requestId" : "0x0210",
    "requests" : [
      {
        "comment"  : "Name of the MultiMap",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The key the Lock",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "The duration in milliseconds after which this entry shall be deleted. O means infinite.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "ttl"
      },
      {
        "comment"  : "The client-wide unique id for this request. It is used to make the request idempotent by sending the same reference id during retries.",
        "since"    : "1.2",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "referenceId"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "MultiMapTryLockCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Tries to acquire the lock for the specified key for the specified lease time. After lease time, the lock will be<br> released. If the lock is not available, then the current thread becomes disabled for thread scheduling purposes<br> and lies dormant until one of two things happens:the lock is acquired by the current thread, or the specified<br> waiting time elapses.",
    "object"    : "MultiMap",
    "request"   : "TryLock",
    "partition" : "key",
    "requestId" : "0x0211",
    "requests" : [
      {
        "comment"  : "Name of the MultiMap",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Key to lock in this map.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "Time in milliseconds to wait before releasing the lock.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "lease"
      },
      {
        "comment"  : "Maximum time to wait for the lock.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "timeout"
      },
      {
        "comment"  : "The client-wide unique id for this request. It is used to make the request idempotent by sending the same reference id during retries.<br>",
        "since"    : "1.2",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "referenceId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if the lock was acquired and false if the waiting time elapsed before the lock acquired",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MultiMapIsLockedCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Checks the lock for the specified key. If the lock is acquired, this method returns true, else it returns false.",
    "object"    : "MultiMap",
    "request"   : "IsLocked",
    "partition" : "key",
    "requestId" : "0x0212",
    "requests" : [
      {
        "comment"  : "Name of the MultiMap",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Key to lock to be checked.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if the lock acquired,false otherwise",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MultiMapUnlockCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Releases the lock for the specified key regardless of the lock owner. It always successfully unlocks the key,<br> never blocks and returns immediately.",
    "object"    : "MultiMap",
    "request"   : "Unlock",
    "partition" : "key",
    "requestId" : "0x0213",
    "requests" : [
      {
        "comment"  : "Name of the MultiMap",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The key to Lock",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "The client-wide unique id for this request. It is used to make the request idempotent by sending the same reference id during retries.",
        "since"    : "1.2",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "referenceId"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "MultiMapForceUnlockCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Releases the lock for the specified key regardless of the lock owner. It always successfully unlocks the key,<br> never blocks and returns immediately.",
    "object"    : "MultiMap",
    "request"   : "ForceUnlock",
    "partition" : "key",
    "requestId" : "0x0214",
    "requests" : [
      {
        "comment"  : "Name of the MultiMap",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The key to Lock",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The client-wide unique id for this request. It is used to make the request idempotent by sending the same reference id during retries.",
        "since"    : "1.2",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "referenceId"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "MultiMapRemoveEntryCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Removes all the entries with the given key. The collection is NOT backed by the map, so changes to the map are<br> NOT reflected in the collection, and vice-versa.",
    "object"    : "MultiMap",
    "request"   : "RemoveEntry",
    "partition" : "key",
    "requestId" : "0x0215",
    "requests" : [
      {
        "comment"  : "Name of the MultiMap",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The key of the entry to remove",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The value of the entry to remove",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if the size of the multimap changed after the remove operation, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "QueueOfferCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Inserts the specified element into this queue, waiting up to the specified wait time if necessary for space to<br> become available.",
    "object"    : "Queue",
    "request"   : "Offer",
    "partition" : "name",
    "requestId" : "0x0301",
    "requests" : [
      {
        "comment"  : "Name of the Queue",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The element to add",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      },
      {
        "comment"  : "Maximum time in milliseconds to wait for acquiring the lock for the key.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "timeoutMillis"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "<tt>True</tt> if the element was added to this queue, else <tt>false</tt>",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "QueuePutCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Inserts the specified element into this queue, waiting if necessary for space to become available.",
    "object"    : "Queue",
    "request"   : "Put",
    "partition" : "name",
    "requestId" : "0x0302",
    "requests" : [
      {
        "comment"  : "Name of the Queue",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The element to add",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "QueueSizeCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Returns the number of elements in this collection.  If this collection contains more than Integer.MAX_VALUE<br> elements, returns Integer.MAX_VALUE",
    "object"    : "Queue",
    "request"   : "Size",
    "partition" : "name",
    "requestId" : "0x0303",
    "requests" : [
      {
        "comment"  : "Name of the Queue<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0066"

  , "response" : {
    "comment"  : "The number of elements in this collection",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "QueueRemoveCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Retrieves and removes the head of this queue.  This method differs from poll only in that it throws an exception<br> if this queue is empty.",
    "object"    : "Queue",
    "request"   : "Remove",
    "partition" : "name",
    "requestId" : "0x0304",
    "requests" : [
      {
        "comment"  : "Name of the Queue",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Element to be removed from this queue, if present<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "<tt>true</tt> if this queue changed as a result of the call",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "QueuePollCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element<br> to become available.",
    "object"    : "Queue",
    "request"   : "Poll",
    "partition" : "name",
    "requestId" : "0x0305",
    "requests" : [
      {
        "comment"  : "Name of the Queue",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Maximum time in milliseconds to wait for acquiring the lock for the key.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "timeoutMillis"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The head of this queue, or <tt>null</tt> if this queue is empty",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "QueueTakeCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Retrieves and removes the head of this queue, waiting if necessary until an element becomes available.",
    "object"    : "Queue",
    "request"   : "Take",
    "partition" : "name",
    "requestId" : "0x0306",
    "requests" : [
      {
        "comment"  : "Name of the Queue<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The head of this queue",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "QueuePeekCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.",
    "object"    : "Queue",
    "request"   : "Peek",
    "partition" : "name",
    "requestId" : "0x0307",
    "requests" : [
      {
        "comment"  : "Name of the Queue<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The head of this queue, or <tt>null</tt> if this queue is empty",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "QueueIteratorCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Returns an iterator over the elements in this collection.  There are no guarantees concerning the order in which<br> the elements are returned (unless this collection is an instance of some class that provides a guarantee).",
    "object"    : "Queue",
    "request"   : "Iterator",
    "partition" : "name",
    "requestId" : "0x0308",
    "requests" : [
      {
        "comment"  : "Name of the Queue<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x006a"

  , "response" : {
    "comment"  : "list of all data in queue",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "QueueDrainToCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Removes all available elements from this queue and adds them to the given collection.  This operation may be more<br> efficient than repeatedly polling this queue.  A failure encountered while attempting to add elements to<br> collection c may result in elements being in neither, either or both collections when the associated exception is<br> thrown. Attempts to drain a queue to itself result in ILLEGAL_ARGUMENT. Further, the behavior of<br> this operation is undefined if the specified collection is modified while the operation is in progress.",
    "object"    : "Queue",
    "request"   : "DrainTo",
    "partition" : "name",
    "requestId" : "0x0309",
    "requests" : [
      {
        "comment"  : "Name of the Queue<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x006a"

  , "response" : {
    "comment"  : "list of all removed data in queue",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "QueueDrainToMaxSizeCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Removes at most the given number of available elements from this queue and adds them to the given collection.<br> A failure encountered while attempting to add elements to collection may result in elements being in neither,<br> either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in<br> ILLEGAL_ARGUMENT. Further, the behavior of this operation is undefined if the specified collection is<br> modified while the operation is in progress.",
    "object"    : "Queue",
    "request"   : "DrainToMaxSize",
    "partition" : "name",
    "requestId" : "0x030a",
    "requests" : [
      {
        "comment"  : "Name of the Queue",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The maximum number of elements to transfer<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "maxSize"
      }
    ],

    "responseId" : "0x006a"

  , "response" : {
    "comment"  : "list of all removed data in result of this method",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "QueueContainsCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Returns true if this queue contains the specified element. More formally, returns true if and only if this queue<br> contains at least one element e such that value.equals(e)",
    "object"    : "Queue",
    "request"   : "Contains",
    "partition" : "name",
    "requestId" : "0x030b",
    "requests" : [
      {
        "comment"  : "Name of the Queue",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Element whose presence in this collection is to be tested<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "<tt>true</tt> if this collection contains the specified element",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "QueueContainsAllCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Return true if this collection contains all of the elements in the specified collection.",
    "object"    : "Queue",
    "request"   : "ContainsAll",
    "partition" : "name",
    "requestId" : "0x030c",
    "requests" : [
      {
        "comment"  : "Name of the Queue",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Collection to be checked for containment in this collection<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "dataList"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "<tt>true</tt> if this collection contains all of the elements in the specified collection",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "QueueCompareAndRemoveAllCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Removes all of this collection's elements that are also contained in the specified collection (optional operation).<br> After this call returns, this collection will contain no elements in common with the specified collection.",
    "object"    : "Queue",
    "request"   : "CompareAndRemoveAll",
    "partition" : "name",
    "requestId" : "0x030d",
    "requests" : [
      {
        "comment"  : "Name of the Queue",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Collection containing elements to be removed from this collection<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "dataList"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "<tt>true</tt> if this collection changed as a result of the call",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "QueueCompareAndRetainAllCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Retains only the elements in this collection that are contained in the specified collection (optional operation).<br> In other words, removes from this collection all of its elements that are not contained in the specified collection.",
    "object"    : "Queue",
    "request"   : "CompareAndRetainAll",
    "partition" : "name",
    "requestId" : "0x030e",
    "requests" : [
      {
        "comment"  : "Name of the Queue",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "collection containing elements to be retained in this collection<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "dataList"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "<tt>true</tt> if this collection changed as a result of the call",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "QueueClearCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Removes all of the elements from this collection (optional operation). The collection will be empty after this<br> method returns.",
    "object"    : "Queue",
    "request"   : "Clear",
    "partition" : "name",
    "requestId" : "0x030f",
    "requests" : [
      {
        "comment"  : "Name of the Queue",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "QueueAddAllCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Adds all of the elements in the specified collection to this collection (optional operation).The behavior of this<br> operation is undefined if the specified collection is modified while the operation is in progress.<br> (This implies that the behavior of this call is undefined if the specified collection is this collection,<br> and this collection is nonempty.)",
    "object"    : "Queue",
    "request"   : "AddAll",
    "partition" : "name",
    "requestId" : "0x0310",
    "requests" : [
      {
        "comment"  : "Name of the Queue",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Collection containing elements to be added to this collection<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "dataList"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "<tt>true</tt> if this collection changed as a result of the call",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "QueueAddListenerCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Adds an listener for this collection. Listener will be notified or all collection add/remove events.",
    "object"    : "Queue",
    "request"   : "AddListener",
    "partition" : "-1",
    "requestId" : "0x0311",
    "requests" : [
      {
        "comment"  : "Name of the Queue",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "<tt>true</tt> if the updated item should be passed to the item listener, <tt>false</tt> otherwise.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "includeValue"
      },
      {
        "comment"  : "if true fires events that originated from this node only, otherwise fires all events<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "localOnly"
      }
    ],

    "responseId" : "0x0068"

  , "response" : {
    "comment"  : "The registration id",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "response"
      }
    ]
  }

  , "event" : [
    {
      "eventId" : "0x00cc",
      "name" : "Item",
      "params"  :[
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "item"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.lang.String",
          "name"     : "uuid"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "eventType"
        }
      ]
    }
  ]

  },
  {
    "fullName"  : "QueueRemoveListenerCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Removes the specified item listener.Returns silently if the specified listener was not added before.",
    "object"    : "Queue",
    "request"   : "RemoveListener",
    "partition" : "-1",
    "requestId" : "0x0312",
    "requests" : [
      {
        "comment"  : "Name of the Queue",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Id of the listener registration.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "registrationId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if the item listener is removed, false otherwise",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "QueueRemainingCapacityCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Returns the number of additional elements that this queue can ideally (in the absence of memory or resource<br> constraints) accept without blocking, or Integer.MAX_VALUE if there is no intrinsic limit. Note that you cannot<br> always tell if an attempt to insert an element will succeed by inspecting remainingCapacity because it may be<br> the case that another thread is about to insert or remove an element.",
    "object"    : "Queue",
    "request"   : "RemainingCapacity",
    "partition" : "name",
    "requestId" : "0x0313",
    "requests" : [
      {
        "comment"  : "Name of the Queue<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0066"

  , "response" : {
    "comment"  : "The remaining capacity",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "QueueIsEmptyCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Returns true if this collection contains no elements.",
    "object"    : "Queue",
    "request"   : "IsEmpty",
    "partition" : "name",
    "requestId" : "0x0314",
    "requests" : [
      {
        "comment"  : "Name of the Queue<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "<tt>True</tt> if this collection contains no elements",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TopicPublishCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Publishes the message to all subscribers of this topic",
    "object"    : "Topic",
    "request"   : "Publish",
    "partition" : "name",
    "requestId" : "0x0401",
    "requests" : [
      {
        "comment"  : "Name of the Topic",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The message to publish to all subscribers of this topic",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "message"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "TopicAddMessageListenerCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Subscribes to this topic. When someone publishes a message on this topic. onMessage() function of the given<br> MessageListener is called. More than one message listener can be added on one instance.",
    "object"    : "Topic",
    "request"   : "AddMessageListener",
    "partition" : "-1",
    "requestId" : "0x0402",
    "requests" : [
      {
        "comment"  : "Name of the Topic",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "if true listens only local events on registered member<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "localOnly"
      }
    ],

    "responseId" : "0x0068"

  , "response" : {
    "comment"  : "returns the registration id",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "response"
      }
    ]
  }

  , "event" : [
    {
      "eventId" : "0x00cd",
      "name" : "Topic",
      "params"  :[
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "item"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "long",
          "name"     : "publishTime"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.lang.String",
          "name"     : "uuid"
        }
      ]
    }
  ]

  },
  {
    "fullName"  : "TopicRemoveMessageListenerCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Stops receiving messages for the given message listener.If the given listener already removed, this method does nothing.",
    "object"    : "Topic",
    "request"   : "RemoveMessageListener",
    "partition" : "-1",
    "requestId" : "0x0403",
    "requests" : [
      {
        "comment"  : "Name of the Topic",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Id of listener registration.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "registrationId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if registration is removed, false otherwise",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ListSizeCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns the number of elements in this list.  If this list contains more than Integer.MAX_VALUE elements, returns<br> Integer.MAX_VALUE.",
    "object"    : "List",
    "request"   : "Size",
    "partition" : "name",
    "requestId" : "0x0501",
    "requests" : [
      {
        "comment"  : "Name of List<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0066"

  , "response" : {
    "comment"  : "The number of elements in this list",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ListContainsCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns true if this list contains the specified element.",
    "object"    : "List",
    "request"   : "Contains",
    "partition" : "name",
    "requestId" : "0x0502",
    "requests" : [
      {
        "comment"  : "Name of the List",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Element whose presence in this list is to be tested<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if this list contains the specified element, false otherwise",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ListContainsAllCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns true if this list contains all of the elements of the specified collection.",
    "object"    : "List",
    "request"   : "ContainsAll",
    "partition" : "name",
    "requestId" : "0x0503",
    "requests" : [
      {
        "comment"  : "Name of the List",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Collection to be checked for containment in this list<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "values"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if this list contains all of the elements of the<br> specified collection",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ListAddCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Appends the specified element to the end of this list (optional operation). Lists that support this operation may<br> place limitations on what elements may be added to this list.  In particular, some lists will refuse to add null<br> elements, and others will impose restrictions on the type of elements that may be added. List classes should<br> clearly specify in their documentation any restrictions on what elements may be added.",
    "object"    : "List",
    "request"   : "Add",
    "partition" : "name",
    "requestId" : "0x0504",
    "requests" : [
      {
        "comment"  : "Name of the List",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Element to be appended to this list<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "true if this list changed as a result of the call, false otherwise",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ListRemoveCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Removes the first occurrence of the specified element from this list, if it is present (optional operation).<br> If this list does not contain the element, it is unchanged.<br> Returns true if this list contained the specified element (or equivalently, if this list changed as a result of the call).",
    "object"    : "List",
    "request"   : "Remove",
    "partition" : "name",
    "requestId" : "0x0505",
    "requests" : [
      {
        "comment"  : "Name of the List",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Element to be removed from this list, if present<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if this list contained the specified element, false otherwise",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ListAddAllCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Appends all of the elements in the specified collection to the end of this list, in the order that they are<br> returned by the specified collection's iterator (optional operation).<br> The behavior of this operation is undefined if the specified collection is modified while the operation is in progress.<br> (Note that this will occur if the specified collection is this list, and it's nonempty.)",
    "object"    : "List",
    "request"   : "AddAll",
    "partition" : "name",
    "requestId" : "0x0506",
    "requests" : [
      {
        "comment"  : "Name of the List",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Collection containing elements to be added to this list<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "valueList"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if this list changed as a result of the call, false otherwise",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ListCompareAndRemoveAllCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Removes from this list all of its elements that are contained in the specified collection (optional operation).",
    "object"    : "List",
    "request"   : "CompareAndRemoveAll",
    "partition" : "name",
    "requestId" : "0x0507",
    "requests" : [
      {
        "comment"  : "Name of the List",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The list of values to compare for removal.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "values"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if removed at least one of the items, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ListCompareAndRetainAllCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Retains only the elements in this list that are contained in the specified collection (optional operation).<br> In other words, removes from this list all of its elements that are not contained in the specified collection.",
    "object"    : "List",
    "request"   : "CompareAndRetainAll",
    "partition" : "name",
    "requestId" : "0x0508",
    "requests" : [
      {
        "comment"  : "Name of the List",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The list of values to compare for retaining.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "values"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if this list changed as a result of the call, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ListClearCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Removes all of the elements from this list (optional operation). The list will be empty after this call returns.",
    "object"    : "List",
    "request"   : "Clear",
    "partition" : "name",
    "requestId" : "0x0509",
    "requests" : [
      {
        "comment"  : "Name of the List",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "ListGetAllCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Return the all elements of this collection",
    "object"    : "List",
    "request"   : "GetAll",
    "partition" : "name",
    "requestId" : "0x050a",
    "requests" : [
      {
        "comment"  : "Name of the List<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x006a"

  , "response" : {
    "comment"  : "An array of all item values in the list.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ListAddListenerCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Adds an item listener for this collection. Listener will be notified for all collection add/remove events.",
    "object"    : "List",
    "request"   : "AddListener",
    "partition" : "name",
    "requestId" : "0x050b",
    "requests" : [
      {
        "comment"  : "Name of the List",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Set to true if you want the event to contain the value.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "includeValue"
      },
      {
        "comment"  : "if true fires events that originated from this node only, otherwise fires all events<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "localOnly"
      }
    ],

    "responseId" : "0x0068"

  , "response" : {
    "comment"  : "Registration id for the listener.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "response"
      }
    ]
  }

  , "event" : [
    {
      "eventId" : "0x00cc",
      "name" : "Item",
      "params"  :[
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "item"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.lang.String",
          "name"     : "uuid"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "eventType"
        }
      ]
    }
  ]

  },
  {
    "fullName"  : "ListRemoveListenerCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Removes the specified item listener. Returns silently if the specified listener was not added before.",
    "object"    : "List",
    "request"   : "RemoveListener",
    "partition" : "name",
    "requestId" : "0x050c",
    "requests" : [
      {
        "comment"  : "Name of the List",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The id of the listener which was provided during registration.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "registrationId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if unregistered, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ListIsEmptyCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns true if this list contains no elements",
    "object"    : "List",
    "request"   : "IsEmpty",
    "partition" : "name",
    "requestId" : "0x050d",
    "requests" : [
      {
        "comment"  : "Name of the List<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if this list contains no elements",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ListAddAllWithIndexCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Inserts all of the elements in the specified collection into this list at the specified position (optional operation).<br> Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices).<br> The new elements will appear in this list in the order that they are returned by the specified collection's iterator.<br> The behavior of this operation is undefined if the specified collection is modified while the operation is in progress.<br> (Note that this will occur if the specified collection is this list, and it's nonempty.)",
    "object"    : "List",
    "request"   : "AddAllWithIndex",
    "partition" : "name",
    "requestId" : "0x050e",
    "requests" : [
      {
        "comment"  : "Name of the List",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "index at which to insert the first element from the specified collection.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "index"
      },
      {
        "comment"  : "The list of value to insert into the list.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "valueList"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if this list changed as a result of the call, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ListGetCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns the element at the specified position in this list",
    "object"    : "List",
    "request"   : "Get",
    "partition" : "name",
    "requestId" : "0x050f",
    "requests" : [
      {
        "comment"  : "Name of the List",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Index of the element to return<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "index"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The element at the specified position in this list",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ListSetCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "The element previously at the specified position",
    "object"    : "List",
    "request"   : "Set",
    "partition" : "name",
    "requestId" : "0x0510",
    "requests" : [
      {
        "comment"  : "Name of the List",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Index of the element to replace",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "index"
      },
      {
        "comment"  : "Element to be stored at the specified position<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The element previously at the specified position",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ListAddWithIndexCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Inserts the specified element at the specified position in this list (optional operation). Shifts the element<br> currently at that position (if any) and any subsequent elements to the right (adds one to their indices).",
    "object"    : "List",
    "request"   : "AddWithIndex",
    "partition" : "name",
    "requestId" : "0x0511",
    "requests" : [
      {
        "comment"  : "Name of the List",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "index at which the specified element is to be inserted",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "index"
      },
      {
        "comment"  : "Value to be inserted.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "ListRemoveWithIndexCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Removes the element at the specified position in this list (optional operation). Shifts any subsequent elements<br> to the left (subtracts one from their indices). Returns the element that was removed from the list.",
    "object"    : "List",
    "request"   : "RemoveWithIndex",
    "partition" : "name",
    "requestId" : "0x0512",
    "requests" : [
      {
        "comment"  : "Name of the List",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The index of the element to be removed<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "index"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The element previously at the specified position",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ListLastIndexOfCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not<br> contain the element.",
    "object"    : "List",
    "request"   : "LastIndexOf",
    "partition" : "name",
    "requestId" : "0x0513",
    "requests" : [
      {
        "comment"  : "Name of the List",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Element to search for<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      }
    ],

    "responseId" : "0x0066"

  , "response" : {
    "comment"  : "the index of the last occurrence of the specified element in<br> this list, or -1 if this list does not contain the element",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ListIndexOfCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not<br> contain the element.",
    "object"    : "List",
    "request"   : "IndexOf",
    "partition" : "name",
    "requestId" : "0x0514",
    "requests" : [
      {
        "comment"  : "Name of the List",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Element to search for<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      }
    ],

    "responseId" : "0x0066"

  , "response" : {
    "comment"  : "The index of the first occurrence of the specified element in<br> this list, or -1 if this list does not contain the element",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ListSubCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns a view of the portion of this list between the specified from, inclusive, and to, exclusive.(If from and<br> to are equal, the returned list is empty.) The returned list is backed by this list, so non-structural changes in<br> the returned list are reflected in this list, and vice-versa. The returned list supports all of the optional list<br> operations supported by this list.<br> This method eliminates the need for explicit range operations (of the sort that commonly exist for arrays).<br> Any operation that expects a list can be used as a range operation by passing a subList view instead of a whole list.<br> Similar idioms may be constructed for indexOf and lastIndexOf, and all of the algorithms in the Collections class<br> can be applied to a subList.<br> The semantics of the list returned by this method become undefined if the backing list (i.e., this list) is<br> structurally modified in any way other than via the returned list.(Structural modifications are those that change<br> the size of this list, or otherwise perturb it in such a fashion that iterations in progress may yield incorrect results.)",
    "object"    : "List",
    "request"   : "Sub",
    "partition" : "name",
    "requestId" : "0x0515",
    "requests" : [
      {
        "comment"  : "Name of the List",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Low endpoint (inclusive) of the subList",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "from"
      },
      {
        "comment"  : "High endpoint (exclusive) of the subList<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "to"
      }
    ],

    "responseId" : "0x006a"

  , "response" : {
    "comment"  : "A view of the specified range within this list",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ListIteratorCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns an iterator over the elements in this list in proper sequence.",
    "object"    : "List",
    "request"   : "Iterator",
    "partition" : "name",
    "requestId" : "0x0516",
    "requests" : [
      {
        "comment"  : "Name of the List<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x006a"

  , "response" : {
    "comment"  : "An iterator over the elements in this list in proper sequence",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ListListIteratorCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position<br> in the list. The specified index indicates the first element that would be returned by an initial call to<br> ListIterator#next next. An initial call to ListIterator#previous previous would return the element with the<br> specified index minus one.",
    "object"    : "List",
    "request"   : "ListIterator",
    "partition" : "name",
    "requestId" : "0x0517",
    "requests" : [
      {
        "comment"  : "Name of the List",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "index of the first element to be returned from the list iterator next<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "index"
      }
    ],

    "responseId" : "0x006a"

  , "response" : {
    "comment"  : "a list iterator over the elements in this list (in proper<br> sequence), starting at the specified position in the list",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "SetSizeCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Returns the number of elements in this set (its cardinality). If this set contains more than Integer.MAX_VALUE<br> elements, returns Integer.MAX_VALUE.",
    "object"    : "Set",
    "request"   : "Size",
    "partition" : "name",
    "requestId" : "0x0601",
    "requests" : [
      {
        "comment"  : "Name of the Set<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0066"

  , "response" : {
    "comment"  : "The number of elements in this set (its cardinality)",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "SetContainsCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Returns true if this set contains the specified element.",
    "object"    : "Set",
    "request"   : "Contains",
    "partition" : "name",
    "requestId" : "0x0602",
    "requests" : [
      {
        "comment"  : "Name of the Set",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Element whose presence in this set is to be tested<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if this set contains the specified element, false otherwise",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "SetContainsAllCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Returns true if this set contains all of the elements of the specified collection. If the specified collection is<br> also a set, this method returns true if it is a subset of this set.",
    "object"    : "Set",
    "request"   : "ContainsAll",
    "partition" : "name",
    "requestId" : "0x0603",
    "requests" : [
      {
        "comment"  : "Name of the Set",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Collection to be checked for containment in this list<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "items"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "true if this set contains all of the elements of the<br> specified collection",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "SetAddCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Adds the specified element to this set if it is not already present (optional operation).<br> If this set already contains the element, the call leaves the set unchanged and returns false.In combination with<br> the restriction on constructors, this ensures that sets never contain duplicate elements.<br> The stipulation above does not imply that sets must accept all elements; sets may refuse to add any particular<br> element, including null, and throw an exception, as described in the specification for Collection<br> Individual set implementations should clearly document any restrictions on the elements that they may contain.",
    "object"    : "Set",
    "request"   : "Add",
    "partition" : "name",
    "requestId" : "0x0604",
    "requests" : [
      {
        "comment"  : "Name of the Set",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Element to be added to this set<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if this set did not already contain the specified<br> element and the element is added, returns false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "SetRemoveCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Removes the specified element from this set if it is present (optional operation).<br> Returns true if this set contained the element (or equivalently, if this set changed as a result of the call).<br> (This set will not contain the element once the call returns.)",
    "object"    : "Set",
    "request"   : "Remove",
    "partition" : "name",
    "requestId" : "0x0605",
    "requests" : [
      {
        "comment"  : "Name of the Set",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Object to be removed from this set, if present<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if this set contained the specified element and it is removed successfully",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "SetAddAllCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Adds all of the elements in the specified collection to this set if they're not already present<br> (optional operation). If the specified collection is also a set, the addAll operation effectively modifies this<br> set so that its value is the union of the two sets. The behavior of this operation is undefined if the specified<br> collection is modified while the operation is in progress.",
    "object"    : "Set",
    "request"   : "AddAll",
    "partition" : "name",
    "requestId" : "0x0606",
    "requests" : [
      {
        "comment"  : "Name of the Set",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Collection containing elements to be added to this set<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "valueList"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if this set changed as a result of the call",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "SetCompareAndRemoveAllCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Removes from this set all of its elements that are contained in the specified collection (optional operation).<br> If the specified collection is also a set, this operation effectively modifies this set so that its value is the<br> asymmetric set difference of the two sets.",
    "object"    : "Set",
    "request"   : "CompareAndRemoveAll",
    "partition" : "name",
    "requestId" : "0x0607",
    "requests" : [
      {
        "comment"  : "Name of the Set",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The list of values to test for matching the item to remove.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "values"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "true if at least one item in values existed and removed, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "SetCompareAndRetainAllCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Retains only the elements in this set that are contained in the specified collection (optional operation).<br> In other words, removes from this set all of its elements that are not contained in the specified collection.<br> If the specified collection is also a set, this operation effectively modifies this set so that its value is the<br> intersection of the two sets.",
    "object"    : "Set",
    "request"   : "CompareAndRetainAll",
    "partition" : "name",
    "requestId" : "0x0608",
    "requests" : [
      {
        "comment"  : "Name of the Set",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The list of values to test for matching the item to retain.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "values"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "true if at least one item in values existed and it is retained, false otherwise. All items not in valueSet but<br> in the Set are removed.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "SetClearCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Removes all of the elements from this set (optional operation). The set will be empty after this call returns.",
    "object"    : "Set",
    "request"   : "Clear",
    "partition" : "name",
    "requestId" : "0x0609",
    "requests" : [
      {
        "comment"  : "Name of the Set",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "SetGetAllCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Return the all elements of this collection",
    "object"    : "Set",
    "request"   : "GetAll",
    "partition" : "name",
    "requestId" : "0x060a",
    "requests" : [
      {
        "comment"  : "Name of the Set<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x006a"

  , "response" : {
    "comment"  : "Array of all values in the Set",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "SetAddListenerCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Adds an item listener for this collection. Listener will be notified for all collection add/remove events.",
    "object"    : "Set",
    "request"   : "AddListener",
    "partition" : "-1",
    "requestId" : "0x060b",
    "requests" : [
      {
        "comment"  : "Name of the Set",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "if set to true, the event shall also include the value.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "includeValue"
      },
      {
        "comment"  : "if true fires events that originated from this node only, otherwise fires all events<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "localOnly"
      }
    ],

    "responseId" : "0x0068"

  , "response" : {
    "comment"  : "The registration id.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "response"
      }
    ]
  }

  , "event" : [
    {
      "eventId" : "0x00cc",
      "name" : "Item",
      "params"  :[
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "item"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.lang.String",
          "name"     : "uuid"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "eventType"
        }
      ]
    }
  ]

  },
  {
    "fullName"  : "SetRemoveListenerCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Removes the specified item listener. Returns silently if the specified listener was not added before.",
    "object"    : "Set",
    "request"   : "RemoveListener",
    "partition" : "-1",
    "requestId" : "0x060c",
    "requests" : [
      {
        "comment"  : "Name of the Set",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The id retrieved during registration.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "registrationId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "true if the listener with the provided id existed and removed, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "SetIsEmptyCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Returns true if this set contains no elements.",
    "object"    : "Set",
    "request"   : "IsEmpty",
    "partition" : "name",
    "requestId" : "0x060d",
    "requests" : [
      {
        "comment"  : "Name of the Set<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if this set contains no elements",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "LockIsLockedCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns whether this lock is locked or not.",
    "object"    : "Lock",
    "request"   : "IsLocked",
    "partition" : "name",
    "requestId" : "0x0701",
    "requests" : [
      {
        "comment"  : "Name of the Lock<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if this lock is locked, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "LockIsLockedByCurrentThreadCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns whether this lock is locked by current thread or not.",
    "object"    : "Lock",
    "request"   : "IsLockedByCurrentThread",
    "partition" : "name",
    "requestId" : "0x0702",
    "requests" : [
      {
        "comment"  : "Name of the Lock",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if this lock is locked by current thread, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "LockGetLockCountCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns re-entrant lock hold count, regardless of lock ownership.",
    "object"    : "Lock",
    "request"   : "GetLockCount",
    "partition" : "name",
    "requestId" : "0x0703",
    "requests" : [
      {
        "comment"  : "Name of the Lock<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0066"

  , "response" : {
    "comment"  : "The lock hold count.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "LockGetRemainingLeaseTimeCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns remaining lease time in milliseconds. If the lock is not locked then -1 will be returned",
    "object"    : "Lock",
    "request"   : "GetRemainingLeaseTime",
    "partition" : "name",
    "requestId" : "0x0704",
    "requests" : [
      {
        "comment"  : "Name of the Lock<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0067"

  , "response" : {
    "comment"  : "Remaining lease time in milliseconds.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "LockLockCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Acquires the lock for the specified lease time.After lease time, lock will be released.If the lock is not<br> available then the current thread becomes disabled for thread scheduling purposes and lies dormant until the lock<br> has been acquired.",
    "object"    : "Lock",
    "request"   : "Lock",
    "partition" : "name",
    "requestId" : "0x0705",
    "requests" : [
      {
        "comment"  : "Name of the Lock",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Time to wait before releasing to lock",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "leaseTime"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "The client-wide unique id for this request. It is used to make the request idempotent by sending the same reference id during retries.",
        "since"    : "1.2",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "referenceId"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "LockUnlockCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Releases the lock.",
    "object"    : "Lock",
    "request"   : "Unlock",
    "partition" : "name",
    "requestId" : "0x0706",
    "requests" : [
      {
        "comment"  : "Name of the Lock",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "The client-wide unique id for this request. It is used to make the request idempotent by sending the same reference id during retries.",
        "since"    : "1.2",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "referenceId"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "LockForceUnlockCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Releases the lock regardless of the lock owner. It always successfully unlocks, never blocks,<br> and returns immediately.",
    "object"    : "Lock",
    "request"   : "ForceUnlock",
    "partition" : "name",
    "requestId" : "0x0707",
    "requests" : [
      {
        "comment"  : "Name of the Lock",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The client-wide unique id for this request. It is used to make the request idempotent by sending the same reference id during retries.",
        "since"    : "1.2",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "referenceId"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "LockTryLockCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Tries to acquire the lock for the specified lease time.After lease time, the lock will be released.<br> If the lock is not available, then the current thread becomes disabled for thread scheduling purposes and lies<br> dormant until one of two things happens: the lock is acquired by the current thread, or the specified waiting<br> time elapses.",
    "object"    : "Lock",
    "request"   : "TryLock",
    "partition" : "name",
    "requestId" : "0x0708",
    "requests" : [
      {
        "comment"  : "Name of the Lock",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "time in milliseconds to wait before releasing the lock.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "lease"
      },
      {
        "comment"  : "Maximum time to wait for the lock.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "timeout"
      },
      {
        "comment"  : "The client-wide unique id for this request. It is used to make the request idempotent by sending the same reference id during retries.<br>",
        "since"    : "1.2",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "referenceId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "true if the lock was acquired and false if the waiting time elapsed before the lock was acquired.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ConditionAwaitCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Causes the current thread to wait until it is signalled or interrupted, or the specified waiting time elapses.",
    "object"    : "Condition",
    "request"   : "Await",
    "partition" : "lockName",
    "requestId" : "0x0801",
    "requests" : [
      {
        "comment"  : "Name of the Condition",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "The maximum time to wait",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "timeout"
      },
      {
        "comment"  : "Name of the lock to wait on.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "lockName"
      },
      {
        "comment"  : "The client-wide unique id for this request. It is used to make the request idempotent by sending the same reference id during retries.<br>",
        "since"    : "1.2",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "referenceId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "False if the waiting time detectably elapsed before return from the method, else true",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ConditionBeforeAwaitCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Causes the current thread to wait until it is signalled or Thread#interrupt interrupted. The lock associated with<br> this Condition is atomically released and the current thread becomes disabled for thread scheduling purposes and<br> lies dormant until one of four things happens:<br> Some other thread invokes the #signal method for this Condition and the current thread happens to be chosen as the<br> thread to be awakened; or Some other thread invokes the #signalAll method for this Condition; or Some other thread<br> Thread#interrupt interrupts the current thread, and interruption of thread suspension is supported; or A spurious wakeup occurs.<br> In all cases, before this method can return the current thread must re-acquire the lock associated with this condition.<br> When the thread returns it is guaranteed to hold this lock. If the current thread: has its interrupted status set<br> on entry to this method; or is Thread#interrupt interrupted while waiting and interruption of thread suspension<br> is supported, then INTERRUPTED is thrown and the current thread's interrupted status is cleared. It is<br> not specified, in the first case, whether or not the test for interruption occurs before the lock is released.<br> The current thread is assumed to hold the lock associated with this Condition when this method is called.<br> It is up to the implementation to determine if this is the case and if not, how to respond. Typically, an exception will be<br> thrown (such as ILLEGAL_MONITOR_STATE) and the implementation must document that fact.<br> An implementation can favor responding to an interrupt over normal method return in response to a signal. In that<br> case the implementation must ensure that the signal is redirected to another waiting thread, if there is one.",
    "object"    : "Condition",
    "request"   : "BeforeAwait",
    "partition" : "lockName",
    "requestId" : "0x0802",
    "requests" : [
      {
        "comment"  : "Name of the Condition",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "Name of the lock to wait on.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "lockName"
      },
      {
        "comment"  : "The client-wide unique id for this request. It is used to make the request idempotent by sending the same reference id during retries.",
        "since"    : "1.2",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "referenceId"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "ConditionSignalCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "If any threads are waiting on this condition then one is selected for waking up.That thread must then re-acquire<br> the lock before returning from await. An implementation may (and typically does) require that the<br> current thread hold the lock associated with this Condition when this method is called. Implementations must<br> document this precondition and any actions taken if the lock is not held. Typically, an exception such as<br> ILLEGAL_MONITOR_STATE will be thrown.",
    "object"    : "Condition",
    "request"   : "Signal",
    "partition" : "lockName",
    "requestId" : "0x0803",
    "requests" : [
      {
        "comment"  : "Name of the Condition",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "Name of the lock to wait on.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "lockName"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "ConditionSignalAllCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "If any threads are waiting on this condition then they are all woken up. Each thread must re-acquire the lock<br> before it can return from",
    "object"    : "Condition",
    "request"   : "SignalAll",
    "partition" : "lockName",
    "requestId" : "0x0804",
    "requests" : [
      {
        "comment"  : "Name of the Condition",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "Name of the lock to wait on.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "lockName"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "ExecutorServiceShutdownCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted.<br> Invocation has no additional effect if already shut down.",
    "object"    : "ExecutorService",
    "request"   : "Shutdown",
    "partition" : "-1",
    "requestId" : "0x0901",
    "requests" : [
      {
        "comment"  : "Name of the executor.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "ExecutorServiceIsShutdownCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Returns true if this executor has been shut down.",
    "object"    : "ExecutorService",
    "request"   : "IsShutdown",
    "partition" : "-1",
    "requestId" : "0x0902",
    "requests" : [
      {
        "comment"  : "Name of the executor.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "true if this executor has been shut down",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ExecutorServiceCancelOnPartitionCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "ExecutorService",
    "request"   : "CancelOnPartition",
    "partition" : "partitionId",
    "requestId" : "0x0903",
    "requests" : [
      {
        "comment"  : "Unique id for the execution.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "uuid"
      },
      {
        "comment"  : "The id of the partition to execute this cancellation request.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "partitionId"
      },
      {
        "comment"  : "If true, then the thread interrupt call can be used to cancel the thread, otherwise interrupt can not be used.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "interrupt"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if cancelled successfully, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ExecutorServiceCancelOnAddressCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "ExecutorService",
    "request"   : "CancelOnAddress",
    "partition" : "-1",
    "requestId" : "0x0904",
    "requests" : [
      {
        "comment"  : "Unique id for the execution.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "uuid"
      },
      {
        "comment"  : "Address of the host to execute the request on.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.Address",
        "name"     : "address"
      },
      {
        "comment"  : "If true, then the thread interrupt call can be used to cancel the thread, otherwise interrupt can not be used.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "interrupt"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if cancelled successfully, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ExecutorServiceSubmitToPartitionCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "ExecutorService",
    "request"   : "SubmitToPartition",
    "partition" : "partitionId",
    "requestId" : "0x0905",
    "requests" : [
      {
        "comment"  : "Name of the executor.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Unique id for the execution.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "uuid"
      },
      {
        "comment"  : "The callable object to be executed.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "callable"
      },
      {
        "comment"  : "The id of the partition which the callable shall be executed on.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "partitionId"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The result of the callable execution.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ExecutorServiceSubmitToAddressCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "ExecutorService",
    "request"   : "SubmitToAddress",
    "partition" : "-1",
    "requestId" : "0x0906",
    "requests" : [
      {
        "comment"  : "Name of the executor.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Unique id for the execution.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "uuid"
      },
      {
        "comment"  : "The callable object to be executed.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "callable"
      },
      {
        "comment"  : "The member host on which the callable shall be executed on.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.Address",
        "name"     : "address"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The result of the callable execution.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "AtomicLongApplyCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Applies a function on the value, the actual stored value will not change.",
    "object"    : "AtomicLong",
    "request"   : "Apply",
    "partition" : "name",
    "requestId" : "0x0a01",
    "requests" : [
      {
        "comment"  : "The name of this IAtomicLong instance.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The function applied to the value, the value is not changed.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "function"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The result of the function application.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "AtomicLongAlterCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Alters the currently stored value by applying a function on it.",
    "object"    : "AtomicLong",
    "request"   : "Alter",
    "partition" : "name",
    "requestId" : "0x0a02",
    "requests" : [
      {
        "comment"  : "The name of this IAtomicLong instance.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The function applied to the currently stored value.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "function"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "AtomicLongAlterAndGetCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Alters the currently stored value by applying a function on it and gets the result.",
    "object"    : "AtomicLong",
    "request"   : "AlterAndGet",
    "partition" : "name",
    "requestId" : "0x0a03",
    "requests" : [
      {
        "comment"  : "The name of this IAtomicLong instance.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The function applied to the currently stored value.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "function"
      }
    ],

    "responseId" : "0x0067"

  , "response" : {
    "comment"  : "The result of the function application.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "AtomicLongGetAndAlterCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Alters the currently stored value by applying a function on it on and gets the old value.",
    "object"    : "AtomicLong",
    "request"   : "GetAndAlter",
    "partition" : "name",
    "requestId" : "0x0a04",
    "requests" : [
      {
        "comment"  : "The name of this IAtomicLong instance.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The function applied to the currently stored value.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "function"
      }
    ],

    "responseId" : "0x0067"

  , "response" : {
    "comment"  : "The old value before the function application.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "AtomicLongAddAndGetCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Atomically adds the given value to the current value.",
    "object"    : "AtomicLong",
    "request"   : "AddAndGet",
    "partition" : "name",
    "requestId" : "0x0a05",
    "requests" : [
      {
        "comment"  : "The name of this IAtomicLong instance.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "the value to add to the current value<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "delta"
      }
    ],

    "responseId" : "0x0067"

  , "response" : {
    "comment"  : "the updated value, the given value added to the current value",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "AtomicLongCompareAndSetCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Atomically sets the value to the given updated value only if the current value the expected value.",
    "object"    : "AtomicLong",
    "request"   : "CompareAndSet",
    "partition" : "name",
    "requestId" : "0x0a06",
    "requests" : [
      {
        "comment"  : "The name of this IAtomicLong instance.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "the expected value",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "expected"
      },
      {
        "comment"  : "the new value<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "updated"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "true if successful; or false if the actual value<br> was not equal to the expected value.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "AtomicLongDecrementAndGetCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Atomically decrements the current value by one.",
    "object"    : "AtomicLong",
    "request"   : "DecrementAndGet",
    "partition" : "name",
    "requestId" : "0x0a07",
    "requests" : [
      {
        "comment"  : "The name of this IAtomicLong instance.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0067"

  , "response" : {
    "comment"  : "the updated value, the current value decremented by one",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "AtomicLongGetCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Gets the current value.",
    "object"    : "AtomicLong",
    "request"   : "Get",
    "partition" : "name",
    "requestId" : "0x0a08",
    "requests" : [
      {
        "comment"  : "The name of this IAtomicLong instance.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0067"

  , "response" : {
    "comment"  : "the current value",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "AtomicLongGetAndAddCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Atomically adds the given value to the current value.",
    "object"    : "AtomicLong",
    "request"   : "GetAndAdd",
    "partition" : "name",
    "requestId" : "0x0a09",
    "requests" : [
      {
        "comment"  : "The name of this IAtomicLong instance.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "the value to add to the current value<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "delta"
      }
    ],

    "responseId" : "0x0067"

  , "response" : {
    "comment"  : "the old value before the add",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "AtomicLongGetAndSetCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Atomically sets the given value and returns the old value.",
    "object"    : "AtomicLong",
    "request"   : "GetAndSet",
    "partition" : "name",
    "requestId" : "0x0a0a",
    "requests" : [
      {
        "comment"  : "The name of this IAtomicLong instance.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "the new value<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "newValue"
      }
    ],

    "responseId" : "0x0067"

  , "response" : {
    "comment"  : "the old value",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "AtomicLongIncrementAndGetCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Atomically increments the current value by one.",
    "object"    : "AtomicLong",
    "request"   : "IncrementAndGet",
    "partition" : "name",
    "requestId" : "0x0a0b",
    "requests" : [
      {
        "comment"  : "The name of this IAtomicLong instance.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0067"

  , "response" : {
    "comment"  : "The updated value, the current value incremented by one",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "AtomicLongGetAndIncrementCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Atomically increments the current value by one.",
    "object"    : "AtomicLong",
    "request"   : "GetAndIncrement",
    "partition" : "name",
    "requestId" : "0x0a0c",
    "requests" : [
      {
        "comment"  : "The name of this IAtomicLong instance.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0067"

  , "response" : {
    "comment"  : "the old value",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "AtomicLongSetCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Atomically sets the given value.",
    "object"    : "AtomicLong",
    "request"   : "Set",
    "partition" : "name",
    "requestId" : "0x0a0d",
    "requests" : [
      {
        "comment"  : "The name of this IAtomicLong instance.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The new value",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "newValue"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "AtomicReferenceApplyCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Applies a function on the value, the actual stored value will not change.",
    "object"    : "AtomicReference",
    "request"   : "Apply",
    "partition" : "name",
    "requestId" : "0x0b01",
    "requests" : [
      {
        "comment"  : "Name of the AtomicReference distributed object instance.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "the function applied on the value, the stored value does not change<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "function"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "the result of the function application",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "AtomicReferenceAlterCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Alters the currently stored reference by applying a function on it.",
    "object"    : "AtomicReference",
    "request"   : "Alter",
    "partition" : "name",
    "requestId" : "0x0b02",
    "requests" : [
      {
        "comment"  : "Name of the AtomicReference distributed object instance.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "the function that alters the currently stored reference",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "function"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "AtomicReferenceAlterAndGetCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Alters the currently stored reference by applying a function on it and gets the result.",
    "object"    : "AtomicReference",
    "request"   : "AlterAndGet",
    "partition" : "name",
    "requestId" : "0x0b03",
    "requests" : [
      {
        "comment"  : "Name of the AtomicReference distributed object instance.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "the function that alters the currently stored reference<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "function"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "the new value, the result of the applied function.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "AtomicReferenceGetAndAlterCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Alters the currently stored reference by applying a function on it on and gets the old value.",
    "object"    : "AtomicReference",
    "request"   : "GetAndAlter",
    "partition" : "name",
    "requestId" : "0x0b04",
    "requests" : [
      {
        "comment"  : "Name of the AtomicReference distributed object instance.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "the function that alters the currently stored reference<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "function"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "the old value, the value before the function is applied",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "AtomicReferenceContainsCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Checks if the reference contains the value.",
    "object"    : "AtomicReference",
    "request"   : "Contains",
    "partition" : "name",
    "requestId" : "0x0b05",
    "requests" : [
      {
        "comment"  : "Name of the AtomicReference distributed object instance.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "the value to check (is allowed to be null).<br>",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "expected"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "true if the value is found, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "AtomicReferenceCompareAndSetCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Atomically sets the value to the given updated value only if the current value the expected value.",
    "object"    : "AtomicReference",
    "request"   : "CompareAndSet",
    "partition" : "name",
    "requestId" : "0x0b06",
    "requests" : [
      {
        "comment"  : "Name of the AtomicReference distributed object instance.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "the expected value",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "expected"
      },
      {
        "comment"  : "the new value<br>",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "updated"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "true if successful; or false if the actual value<br> was not equal to the expected value.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "AtomicReferenceGetCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Gets the current value.",
    "object"    : "AtomicReference",
    "request"   : "Get",
    "partition" : "name",
    "requestId" : "0x0b08",
    "requests" : [
      {
        "comment"  : "Name of the AtomicReference distributed object instance.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "the current value",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "AtomicReferenceSetCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Atomically sets the given value.",
    "object"    : "AtomicReference",
    "request"   : "Set",
    "partition" : "name",
    "requestId" : "0x0b09",
    "requests" : [
      {
        "comment"  : "Name of the AtomicReference distributed object instance.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "the new value",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "newValue"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "AtomicReferenceClearCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Clears the current stored reference.",
    "object"    : "AtomicReference",
    "request"   : "Clear",
    "partition" : "name",
    "requestId" : "0x0b0a",
    "requests" : [
      {
        "comment"  : "Name of the AtomicReference distributed object instance.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "AtomicReferenceGetAndSetCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Gets the old value and sets the new value.",
    "object"    : "AtomicReference",
    "request"   : "GetAndSet",
    "partition" : "name",
    "requestId" : "0x0b0b",
    "requests" : [
      {
        "comment"  : "Name of the AtomicReference distributed object instance.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "the new value.<br>",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "newValue"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "the old value.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "AtomicReferenceSetAndGetCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Sets and gets the value.",
    "object"    : "AtomicReference",
    "request"   : "SetAndGet",
    "partition" : "name",
    "requestId" : "0x0b0c",
    "requests" : [
      {
        "comment"  : "Name of the AtomicReference distributed object instance.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "the new value<br>",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "newValue"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "the new value",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "AtomicReferenceIsNullCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Checks if the stored reference is null.",
    "object"    : "AtomicReference",
    "request"   : "IsNull",
    "partition" : "name",
    "requestId" : "0x0b0d",
    "requests" : [
      {
        "comment"  : "Name of the AtomicReference distributed object instance.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "true if null, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "CountDownLatchAwaitCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Causes the current thread to wait until the latch has counted down to zero, or an exception is thrown, or the<br> specified waiting time elapses. If the current count is zero then this method returns immediately with the value<br> true. If the current count is greater than zero, then the current thread becomes disabled for thread scheduling<br> purposes and lies dormant until one of five things happen: the count reaches zero due to invocations of the<br> #countDown method, this ICountDownLatch instance is destroyed, the countdown owner becomes disconnected, some<br> other thread Thread#interrupt interrupts the current thread, or the specified waiting time elapses. If the count<br> reaches zero, then the method returns with the value true. If the current thread: has its interrupted status set<br> on entry to this method, or is Thread#interrupt interrupted while waiting, then INTERRUPTED is thrown<br> and the current thread's interrupted status is cleared. If the specified waiting time elapses then the value false<br> is returned.  If the time is less than or equal to zero, the method will not wait at all.",
    "object"    : "CountdownLatch",
    "request"   : "Await",
    "partition" : "name",
    "requestId" : "0x0c01",
    "requests" : [
      {
        "comment"  : "Name of the CountDownLatch",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The maximum time in milliseconds to wait<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "timeout"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if the count reached zero, false if the waiting time elapsed before the count reached zero",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "CountDownLatchCountDownCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Decrements the count of the latch, releasing all waiting threads if the count reaches zero. If the current count<br> is greater than zero, then it is decremented. If the new count is zero: All waiting threads are re-enabled for<br> thread scheduling purposes, and Countdown owner is set to null. If the current count equals zero, then nothing happens.",
    "object"    : "CountdownLatch",
    "request"   : "CountDown",
    "partition" : "name",
    "requestId" : "0x0c02",
    "requests" : [
      {
        "comment"  : "Name of the CountDownLatch",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "CountDownLatchGetCountCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns the current count.",
    "object"    : "CountdownLatch",
    "request"   : "GetCount",
    "partition" : "name",
    "requestId" : "0x0c03",
    "requests" : [
      {
        "comment"  : "Name of the CountDownLatch<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0066"

  , "response" : {
    "comment"  : "The current count for the latch.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "CountDownLatchTrySetCountCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Sets the count to the given value if the current count is zero. If the count is not zero, then this method does<br> nothing and returns false",
    "object"    : "CountdownLatch",
    "request"   : "TrySetCount",
    "partition" : "name",
    "requestId" : "0x0c04",
    "requests" : [
      {
        "comment"  : "Name of the CountDownLatch",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The number of times countDown must be invoked before threads can pass through await<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "count"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if the new count was set, false if the current count is not zero.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "SemaphoreInitCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Try to initialize this ISemaphore instance with the given permit count",
    "object"    : "Semaphore",
    "request"   : "Init",
    "partition" : "name",
    "requestId" : "0x0d01",
    "requests" : [
      {
        "comment"  : "Name of the Semaphore",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The given permit count<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "permits"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if initialization succeeds, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "SemaphoreAcquireCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Acquires the given number of permits if they are available, and returns immediately, reducing the number of<br> available permits by the given amount. If insufficient permits are available then the current thread becomes<br> disabled for thread scheduling purposes and lies dormant until one of three things happens: some other thread<br> invokes one of the methods for this semaphore, the current thread is next to be assigned permits and the number<br> of available permits satisfies this request, this ISemaphore instance is destroyed, or some other thread<br> the current thread. If the current thread has its interrupted status set on entry to this method, or is  while<br> waiting for a permit, then  is thrown and the current thread's interrupted status is cleared.",
    "object"    : "Semaphore",
    "request"   : "Acquire",
    "partition" : "name",
    "requestId" : "0x0d02",
    "requests" : [
      {
        "comment"  : "Name of the Semaphore",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The given permit count",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "permits"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "SemaphoreAvailablePermitsCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns the current number of permits currently available in this semaphore. This method is typically used for<br> debugging and testing purposes.",
    "object"    : "Semaphore",
    "request"   : "AvailablePermits",
    "partition" : "name",
    "requestId" : "0x0d03",
    "requests" : [
      {
        "comment"  : "Name of the Semaphore<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0066"

  , "response" : {
    "comment"  : "The number of permits available in this semaphore.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "SemaphoreDrainPermitsCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Acquires and returns all permits that are immediately available.",
    "object"    : "Semaphore",
    "request"   : "DrainPermits",
    "partition" : "name",
    "requestId" : "0x0d04",
    "requests" : [
      {
        "comment"  : "Name of the Semaphore<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0066"

  , "response" : {
    "comment"  : "The number of permits drained",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "SemaphoreReducePermitsCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Shrinks the number of available permits by the indicated reduction. This method differs from  acquire in that it<br> does not block waiting for permits to become available.",
    "object"    : "Semaphore",
    "request"   : "ReducePermits",
    "partition" : "name",
    "requestId" : "0x0d05",
    "requests" : [
      {
        "comment"  : "Name of the Semaphore",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The number of permits to remove",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "reduction"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "SemaphoreReleaseCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Releases the given number of permits, increasing the number of available permits by that amount. There is no<br> requirement that a thread that releases a permit must have acquired that permit by calling one of the<br> acquire()acquire methods. Correct usage of a semaphore is established by programming convention in the application.",
    "object"    : "Semaphore",
    "request"   : "Release",
    "partition" : "name",
    "requestId" : "0x0d06",
    "requests" : [
      {
        "comment"  : "Name of the Semaphore",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The number of permits to remove",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "permits"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "SemaphoreTryAcquireCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Acquires the given number of permits, if they are available, and returns immediately, with the value true,<br> reducing the number of available permits by the given amount. If insufficient permits are available then this<br> method will return immediately with the value false and the number of available permits is unchanged.",
    "object"    : "Semaphore",
    "request"   : "TryAcquire",
    "partition" : "name",
    "requestId" : "0x0d07",
    "requests" : [
      {
        "comment"  : "Name of the Semaphore",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The number of permits to remove",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "permits"
      },
      {
        "comment"  : "The maximum time to wait for a permit<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "timeout"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "true if all permits were acquired,  false if the waiting time elapsed before all permits could be acquired",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ReplicatedMapPutCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Associates a given value to the specified key and replicates it to the cluster. If there is an old value, it will<br> be replaced by the specified one and returned from the call. In addition, you have to specify a ttl and its TimeUnit<br> to define when the value is outdated and thus should be removed from the replicated map.",
    "object"    : "ReplicatedMap",
    "request"   : "Put",
    "partition" : "key",
    "requestId" : "0x0e01",
    "requests" : [
      {
        "comment"  : "Name of the ReplicatedMap",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Key with which the specified value is to be associated.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "Value to be associated with the specified key",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      },
      {
        "comment"  : "ttl in milliseconds to be associated with the specified key-value pair<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "ttl"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The old value if existed for the key.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ReplicatedMapSizeCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns the number of key-value mappings in this map. If the map contains more than Integer.MAX_VALUE elements,<br> returns Integer.MAX_VALUE.",
    "object"    : "ReplicatedMap",
    "request"   : "Size",
    "partition" : "random",
    "requestId" : "0x0e02",
    "requests" : [
      {
        "comment"  : "Name of the ReplicatedMap<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0066"

  , "response" : {
    "comment"  : "the number of key-value mappings in this map.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ReplicatedMapIsEmptyCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Return true if this map contains no key-value mappings",
    "object"    : "ReplicatedMap",
    "request"   : "IsEmpty",
    "partition" : "random",
    "requestId" : "0x0e03",
    "requests" : [
      {
        "comment"  : "Name of the ReplicatedMap<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "<tt>True</tt> if this map contains no key-value mappings",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ReplicatedMapContainsKeyCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns true if this map contains a mapping for the specified key.",
    "object"    : "ReplicatedMap",
    "request"   : "ContainsKey",
    "partition" : "key",
    "requestId" : "0x0e04",
    "requests" : [
      {
        "comment"  : "Name of the ReplicatedMap",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The key whose associated value is to be returned.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "<tt>True</tt> if this map contains a mapping for the specified key",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ReplicatedMapContainsValueCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns true if this map maps one or more keys to the specified value.<br> This operation will probably require time linear in the map size for most implementations of the Map interface.",
    "object"    : "ReplicatedMap",
    "request"   : "ContainsValue",
    "partition" : "random",
    "requestId" : "0x0e05",
    "requests" : [
      {
        "comment"  : "Name of the ReplicatedMap",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "value whose presence in this map is to be tested<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "<tt>true</tt> if this map maps one or more keys to the specified value",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ReplicatedMapGetCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.<br> If this map permits null values, then a return value of null does not<br> necessarily indicate that the map contains no mapping for the key; it's also possible that the map<br> explicitly maps the key to null.  The #containsKey operation may be used to distinguish these two cases.",
    "object"    : "ReplicatedMap",
    "request"   : "Get",
    "partition" : "key",
    "requestId" : "0x0e06",
    "requests" : [
      {
        "comment"  : "Name of the ReplicatedMap",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The key whose associated value is to be returned<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The value to which the specified key is mapped, or null if this map contains no mapping for the key",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ReplicatedMapRemoveCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Removes the mapping for a key from this map if it is present (optional operation). Returns the value to which this map previously associated the key,<br> or null if the map contained no mapping for the key. If this map permits null values, then a return value of<br> null does not necessarily indicate that the map contained no mapping for the key; it's also possible that the map<br> explicitly mapped the key to null. The map will not contain a mapping for the specified key once the call returns.",
    "object"    : "ReplicatedMap",
    "request"   : "Remove",
    "partition" : "key",
    "requestId" : "0x0e07",
    "requests" : [
      {
        "comment"  : "Name of the ReplicatedMap",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Key with which the specified value is to be associated.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "the previous value associated with <tt>key</tt>, or <tt>null</tt> if there was no mapping for <tt>key</tt>.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ReplicatedMapPutAllCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Copies all of the mappings from the specified map to this map (optional operation). The effect of this call is<br> equivalent to that of calling put(Object,Object) put(k, v) on this map once for each mapping from key k to value<br> v in the specified map. The behavior of this operation is undefined if the specified map is modified while the<br> operation is in progress.",
    "object"    : "ReplicatedMap",
    "request"   : "PutAll",
    "partition" : "-1",
    "requestId" : "0x0e08",
    "requests" : [
      {
        "comment"  : "Name of the ReplicatedMap",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "entries to be stored in this map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data>>",
        "name"     : "entries"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "ReplicatedMapClearCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "The clear operation wipes data out of the replicated maps.It is the only synchronous remote operation in this<br> implementation, so be aware that this might be a slow operation. If some node fails on executing the operation,<br> it is retried for at most 3 times (on the failing nodes only). If it does not work after the third time, this<br> method throws a OPERATION_TIMEOUT back to the caller.",
    "object"    : "ReplicatedMap",
    "request"   : "Clear",
    "partition" : "-1",
    "requestId" : "0x0e09",
    "requests" : [
      {
        "comment"  : "Name of the Replicated Map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "ReplicatedMapAddEntryListenerToKeyWithPredicateCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Adds an continuous entry listener for this map. The listener will be notified for map add/remove/update/evict<br> events filtered by the given predicate.",
    "object"    : "ReplicatedMap",
    "request"   : "AddEntryListenerToKeyWithPredicate",
    "partition" : "-1",
    "requestId" : "0x0e0a",
    "requests" : [
      {
        "comment"  : "Name of the Replicated Map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Key with which the specified value is to be associated.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The predicate for filtering entries",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "predicate"
      },
      {
        "comment"  : "if true fires events that originated from this node only, otherwise fires all events<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "localOnly"
      }
    ],

    "responseId" : "0x0068"

  , "response" : {
    "comment"  : "A unique string  which is used as a key to remove the listener.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "response"
      }
    ]
  }

  , "event" : [
    {
      "eventId" : "0x00cb",
      "name" : "Entry",
      "params"  :[
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "key"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "value"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "oldValue"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "mergingValue"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "eventType"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.lang.String",
          "name"     : "uuid"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "numberOfAffectedEntries"
        }
      ]
    }
  ]

  },
  {
    "fullName"  : "ReplicatedMapAddEntryListenerWithPredicateCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Adds an continuous entry listener for this map. The listener will be notified for map add/remove/update/evict<br> events filtered by the given predicate.",
    "object"    : "ReplicatedMap",
    "request"   : "AddEntryListenerWithPredicate",
    "partition" : "-1",
    "requestId" : "0x0e0b",
    "requests" : [
      {
        "comment"  : "Name of the Replicated Map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The predicate for filtering entries",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "predicate"
      },
      {
        "comment"  : "if true fires events that originated from this node only, otherwise fires all events<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "localOnly"
      }
    ],

    "responseId" : "0x0068"

  , "response" : {
    "comment"  : "A unique string  which is used as a key to remove the listener.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "response"
      }
    ]
  }

  , "event" : [
    {
      "eventId" : "0x00cb",
      "name" : "Entry",
      "params"  :[
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "key"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "value"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "oldValue"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "mergingValue"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "eventType"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.lang.String",
          "name"     : "uuid"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "numberOfAffectedEntries"
        }
      ]
    }
  ]

  },
  {
    "fullName"  : "ReplicatedMapAddEntryListenerToKeyCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Adds the specified entry listener for the specified key. The listener will be notified for all<br> add/remove/update/evict events of the specified key only.",
    "object"    : "ReplicatedMap",
    "request"   : "AddEntryListenerToKey",
    "partition" : "-1",
    "requestId" : "0x0e0c",
    "requests" : [
      {
        "comment"  : "Name of the Replicated Map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Key with which the specified value is to be associated.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "if true fires events that originated from this node only, otherwise fires all events<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "localOnly"
      }
    ],

    "responseId" : "0x0068"

  , "response" : {
    "comment"  : "A unique string  which is used as a key to remove the listener.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "response"
      }
    ]
  }

  , "event" : [
    {
      "eventId" : "0x00cb",
      "name" : "Entry",
      "params"  :[
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "key"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "value"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "oldValue"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "mergingValue"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "eventType"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.lang.String",
          "name"     : "uuid"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "numberOfAffectedEntries"
        }
      ]
    }
  ]

  },
  {
    "fullName"  : "ReplicatedMapAddEntryListenerCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Adds an entry listener for this map. The listener will be notified for all map add/remove/update/evict events.",
    "object"    : "ReplicatedMap",
    "request"   : "AddEntryListener",
    "partition" : "-1",
    "requestId" : "0x0e0d",
    "requests" : [
      {
        "comment"  : "Name of the ReplicatedMap",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "if true fires events that originated from this node only, otherwise fires all events<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "localOnly"
      }
    ],

    "responseId" : "0x0068"

  , "response" : {
    "comment"  : "A unique string  which is used as a key to remove the listener.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "response"
      }
    ]
  }

  , "event" : [
    {
      "eventId" : "0x00cb",
      "name" : "Entry",
      "params"  :[
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "key"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "value"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "oldValue"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "mergingValue"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "eventType"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.lang.String",
          "name"     : "uuid"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "numberOfAffectedEntries"
        }
      ]
    }
  ]

  },
  {
    "fullName"  : "ReplicatedMapRemoveEntryListenerCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Removes the specified entry listener. Returns silently if there was no such listener added before.",
    "object"    : "ReplicatedMap",
    "request"   : "RemoveEntryListener",
    "partition" : "-1",
    "requestId" : "0x0e0e",
    "requests" : [
      {
        "comment"  : "Name of the ReplicatedMap",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the registered entry listener.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "registrationId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if registration is removed, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ReplicatedMapKeySetCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns a lazy Set view of the key contained in this map. A LazySet is optimized for querying speed<br> (preventing eager deserialization and hashing on HashSet insertion) and does NOT provide all operations.<br> Any kind of mutating function will throw an UNSUPPORTED_OPERATION. Same is true for operations<br> like java.util.Set#contains(Object) and java.util.Set#containsAll(java.util.Collection) which would result in<br> very poor performance if called repeatedly (for example, in a loop). If the use case is different from querying<br> the data, please copy the resulting set into a new java.util.HashSet.",
    "object"    : "ReplicatedMap",
    "request"   : "KeySet",
    "partition" : "random",
    "requestId" : "0x0e0f",
    "requests" : [
      {
        "comment"  : "Name of the ReplicatedMap<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x006a"

  , "response" : {
    "comment"  : "A lazy set view of the keys contained in this map.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ReplicatedMapValuesCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "ReplicatedMap",
    "request"   : "Values",
    "partition" : "random",
    "requestId" : "0x0e10",
    "requests" : [
      {
        "comment"  : "Name of the ReplicatedMap<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x006a"

  , "response" : {
    "comment"  : "A collection view of the values contained in this map.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ReplicatedMapEntrySetCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "ReplicatedMap",
    "request"   : "EntrySet",
    "partition" : "random",
    "requestId" : "0x0e11",
    "requests" : [
      {
        "comment"  : "Name of the ReplicatedMap<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0075"

  , "response" : {
    "comment"  : "A lazy set view of the mappings contained in this map.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data>>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ReplicatedMapAddNearCacheEntryListenerCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "ReplicatedMap",
    "request"   : "AddNearCacheEntryListener",
    "partition" : "-1",
    "requestId" : "0x0e12",
    "requests" : [
      {
        "comment"  : "Name of the ReplicatedMap",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "True if EntryEvent should contain the value,false otherwise",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "includeValue"
      },
      {
        "comment"  : "if true fires events that originated from this node only, otherwise fires all events<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "localOnly"
      }
    ],

    "responseId" : "0x0068"

  , "response" : {
    "comment"  : "A unique string  which is used as a key to remove the listener.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "response"
      }
    ]
  }

  , "event" : [
    {
      "eventId" : "0x00cb",
      "name" : "Entry",
      "params"  :[
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "key"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "value"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "oldValue"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "mergingValue"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "eventType"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.lang.String",
          "name"     : "uuid"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "numberOfAffectedEntries"
        }
      ]
    }
  ]

  },
  {
    "fullName"  : "MapReduceCancelCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "MapReduce",
    "request"   : "Cancel",
    "partition" : "-1",
    "requestId" : "0x0f01",
    "requests" : [
      {
        "comment"  : "Name of the distributed object",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Id of the job to cancel<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "jobId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "Returns true if successful, false otherwise",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapReduceJobProcessInformationCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "MapReduce",
    "request"   : "JobProcessInformation",
    "partition" : "-1",
    "requestId" : "0x0f02",
    "requests" : [
      {
        "comment"  : "Name of the distributed object",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Id of the job<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "jobId"
      }
    ],

    "responseId" : "0x0070"

  , "response" : {
    "comment"  : "The information about the job if exists",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.mapreduce.JobPartitionState>",
        "name"     : "jobPartitionStates"
      },
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "processRecords"
      }
    ]
  }


  },
  {
    "fullName"  : "MapReduceForMapCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "MapReduce",
    "request"   : "ForMap",
    "partition" : "-1",
    "requestId" : "0x0f03",
    "requests" : [
      {
        "comment"  : "Name of the distributed object",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Id of the job",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "jobId"
      },
      {
        "comment"  : "The filter to use during operation",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "predicate"
      },
      {
        "comment"  : "The mapper for the operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "mapper"
      },
      {
        "comment"  : "The combiner factory to use",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "combinerFactory"
      },
      {
        "comment"  : "The reducer factory to be used",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "reducerFactory"
      },
      {
        "comment"  : "Name of the Map object to work on.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "mapName"
      },
      {
        "comment"  : "The number of items for which the reduce shall be performed",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "chunkSize"
      },
      {
        "comment"  : "The keys for the objects to be processed",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "keys"
      },
      {
        "comment"  : "The strategy to use if a topology change is detected.<br>",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "topologyChangedStrategy"
      }
    ],

    "responseId" : "0x0075"

  , "response" : {
    "comment"  : "The resulting key-value pairs.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data>>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapReduceForListCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "MapReduce",
    "request"   : "ForList",
    "partition" : "-1",
    "requestId" : "0x0f04",
    "requests" : [
      {
        "comment"  : "Name of the distributed object",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Id of the job",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "jobId"
      },
      {
        "comment"  : "The filter to use during operation",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "predicate"
      },
      {
        "comment"  : "The mapper for the operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "mapper"
      },
      {
        "comment"  : "The combiner factory to use",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "combinerFactory"
      },
      {
        "comment"  : "The reducer factory to be used",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "reducerFactory"
      },
      {
        "comment"  : "Name of the List object to work on.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "listName"
      },
      {
        "comment"  : "The number of items for which the reduce shall be performed",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "chunkSize"
      },
      {
        "comment"  : "The keys for the objects to be processed",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "keys"
      },
      {
        "comment"  : "The strategy to use if a topology change is detected.<br>",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "topologyChangedStrategy"
      }
    ],

    "responseId" : "0x0075"

  , "response" : {
    "comment"  : "The resulting key-value pairs.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data>>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapReduceForSetCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "MapReduce",
    "request"   : "ForSet",
    "partition" : "-1",
    "requestId" : "0x0f05",
    "requests" : [
      {
        "comment"  : "Name of the distributed object",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Id of the job",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "jobId"
      },
      {
        "comment"  : "The filter to use during operation",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "predicate"
      },
      {
        "comment"  : "The mapper for the operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "mapper"
      },
      {
        "comment"  : "The combiner factory to use",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "combinerFactory"
      },
      {
        "comment"  : "The reducer factory to be used",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "reducerFactory"
      },
      {
        "comment"  : "Name of the Set object to work on.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "setName"
      },
      {
        "comment"  : "The number of items for which the reduce shall be performed",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "chunkSize"
      },
      {
        "comment"  : "The keys for the objects to be processed",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "keys"
      },
      {
        "comment"  : "The strategy to use if a topology change is detected.<br>",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "topologyChangedStrategy"
      }
    ],

    "responseId" : "0x0075"

  , "response" : {
    "comment"  : "The resulting key-value pairs.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data>>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapReduceForMultiMapCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "MapReduce",
    "request"   : "ForMultiMap",
    "partition" : "-1",
    "requestId" : "0x0f06",
    "requests" : [
      {
        "comment"  : "Name of the distributed object",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Id of the job",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "jobId"
      },
      {
        "comment"  : "The filter to use during operation",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "predicate"
      },
      {
        "comment"  : "The mapper for the operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "mapper"
      },
      {
        "comment"  : "The combiner factory to use",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "combinerFactory"
      },
      {
        "comment"  : "The reducer factory to be used",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "reducerFactory"
      },
      {
        "comment"  : "Name of the MultiMap object to work on.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "multiMapName"
      },
      {
        "comment"  : "The number of items for which the reduce shall be performed",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "chunkSize"
      },
      {
        "comment"  : "The keys for the objects to be processed",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "keys"
      },
      {
        "comment"  : "The strategy to use if a topology change is detected.<br>",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "topologyChangedStrategy"
      }
    ],

    "responseId" : "0x0075"

  , "response" : {
    "comment"  : "The resulting key-value pairs.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data>>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "MapReduceForCustomCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "MapReduce",
    "request"   : "ForCustom",
    "partition" : "-1",
    "requestId" : "0x0f07",
    "requests" : [
      {
        "comment"  : "Name of the distributed object",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Id of the job",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "jobId"
      },
      {
        "comment"  : "The filter to use during operation",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "predicate"
      },
      {
        "comment"  : "The mapper for the operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "mapper"
      },
      {
        "comment"  : "The combiner factory to use",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "combinerFactory"
      },
      {
        "comment"  : "The reducer factory to be used",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "reducerFactory"
      },
      {
        "comment"  : "custom data sources for mapreduce algorithm. The object implements the<br>                                com.hazelcast.mapreduce.KeyValueSource interface",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "keyValueSource"
      },
      {
        "comment"  : "The number of items for which the reduce shall be performed",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "chunkSize"
      },
      {
        "comment"  : "The keys for the objects to be processed",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "keys"
      },
      {
        "comment"  : "The strategy to use if a topology change is detected.<br>",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "topologyChangedStrategy"
      }
    ],

    "responseId" : "0x0075"

  , "response" : {
    "comment"  : "The resulting key-value pairs.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data>>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalMapContainsKeyCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Returns true if this map contains an entry for the specified key.",
    "object"    : "TransactionalMap",
    "request"   : "ContainsKey",
    "partition" : "-1",
    "requestId" : "0x1001",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the this transaction operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "The specified key.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if this map contains an entry for the specified key.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalMapGetCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Returns the value for the specified key, or null if this map does not contain this key.",
    "object"    : "TransactionalMap",
    "request"   : "Get",
    "partition" : "-1",
    "requestId" : "0x1002",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the this transaction operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "The specified key<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The value for the specified key",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalMapGetForUpdateCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Locks the key and then gets and returns the value to which the specified key is mapped. Lock will be released at<br> the end of the transaction (either commit or rollback).",
    "object"    : "TransactionalMap",
    "request"   : "GetForUpdate",
    "partition" : "-1",
    "requestId" : "0x1003",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the this transaction operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "The value to which the specified key is mapped<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The value for the specified key",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalMapSizeCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Returns the number of entries in this map.",
    "object"    : "TransactionalMap",
    "request"   : "Size",
    "partition" : "-1",
    "requestId" : "0x1004",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the this transaction operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x0066"

  , "response" : {
    "comment"  : "The number of entries in this map.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalMapIsEmptyCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Returns true if this map contains no entries.",
    "object"    : "TransactionalMap",
    "request"   : "IsEmpty",
    "partition" : "-1",
    "requestId" : "0x1005",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the this transaction operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "<tt>true</tt> if this map contains no entries.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalMapPutCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Associates the specified value with the specified key in this map. If the map previously contained a mapping for<br> the key, the old value is replaced by the specified value. The object to be put will be accessible only in the<br> current transaction context till transaction is committed.",
    "object"    : "TransactionalMap",
    "request"   : "Put",
    "partition" : "-1",
    "requestId" : "0x1006",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the this transaction operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "The specified key",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The value to associate with the key.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      },
      {
        "comment"  : "The duration in milliseconds after which this entry shall be deleted. O means infinite.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "ttl"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "Previous value associated with key or  null if there was no mapping for key",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalMapSetCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Associates the specified value with the specified key in this map. If the map previously contained a mapping for<br> the key, the old value is replaced by the specified value. This method is preferred to #put(Object, Object)<br> if the old value is not needed.<br> The object to be set will be accessible only in the current transaction context until the transaction is committed.",
    "object"    : "TransactionalMap",
    "request"   : "Set",
    "partition" : "-1",
    "requestId" : "0x1007",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the this transaction operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "The specified key",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The value to associate with key",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "TransactionalMapPutIfAbsentCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "If the specified key is not already associated with a value, associate it with the given value.<br> The object to be put will be accessible only in the current transaction context until the transaction is committed.",
    "object"    : "TransactionalMap",
    "request"   : "PutIfAbsent",
    "partition" : "-1",
    "requestId" : "0x1008",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the this transaction operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "The specified key",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The value to associate with the key when there is no previous value.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The previous value associated with key, or null if there was no mapping for key.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalMapReplaceCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Replaces the entry for a key only if it is currently mapped to some value. The object to be replaced will be<br> accessible only in the current transaction context until the transaction is committed.",
    "object"    : "TransactionalMap",
    "request"   : "Replace",
    "partition" : "-1",
    "requestId" : "0x1009",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the this transaction operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "The specified key",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The value replaced the previous value<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The previous value associated with key, or null if there was no mapping for key.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalMapReplaceIfSameCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Replaces the entry for a key only if currently mapped to a given value. The object to be replaced will be<br> accessible only in the current transaction context until the transaction is committed.",
    "object"    : "TransactionalMap",
    "request"   : "ReplaceIfSame",
    "partition" : "-1",
    "requestId" : "0x100a",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the this transaction operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "The specified key.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "Replace the key value if it is the old value.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "oldValue"
      },
      {
        "comment"  : "The new value to replace the old value.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "newValue"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "true if the value was replaced.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalMapRemoveCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Removes the mapping for a key from this map if it is present. The map will not contain a mapping for the<br> specified key once the call returns. The object to be removed will be accessible only in the current transaction<br> context until the transaction is committed.",
    "object"    : "TransactionalMap",
    "request"   : "Remove",
    "partition" : "-1",
    "requestId" : "0x100b",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the this transaction operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "Remove the mapping for this key.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The previous value associated with key, or null if there was no mapping for key",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalMapDeleteCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Removes the mapping for a key from this map if it is present. The map will not contain a mapping for the specified<br> key once the call returns. This method is preferred to #remove(Object) if the old value is not needed. The object<br> to be deleted will be removed from only the current transaction context until the transaction is committed.",
    "object"    : "TransactionalMap",
    "request"   : "Delete",
    "partition" : "-1",
    "requestId" : "0x100c",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the this transaction operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "Remove the mapping for this key.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "TransactionalMapRemoveIfSameCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Removes the entry for a key only if currently mapped to a given value. The object to be removed will be removed<br> from only the current transaction context until the transaction is committed.",
    "object"    : "TransactionalMap",
    "request"   : "RemoveIfSame",
    "partition" : "-1",
    "requestId" : "0x100d",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the this transaction operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "The specified key",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "Remove the key if it has this value.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if the value was removed",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalMapKeySetCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Returns a set clone of the keys contained in this map. The set is NOT backed by the map, so changes to the map<br> are NOT reflected in the set, and vice-versa. This method is always executed by a distributed query, so it may throw<br> a QueryResultSizeExceededException if query result size limit is configured.",
    "object"    : "TransactionalMap",
    "request"   : "KeySet",
    "partition" : "-1",
    "requestId" : "0x100e",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the this transaction operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x006a"

  , "response" : {
    "comment"  : "A set clone of the keys contained in this map.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalMapKeySetWithPredicateCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Queries the map based on the specified predicate and returns the keys of matching entries. Specified predicate<br> runs on all members in parallel.The set is NOT backed by the map, so changes to the map are NOT reflected in the<br> set, and vice-versa. This method is always executed by a distributed query, so it may throw a<br> QueryResultSizeExceededException if query result size limit is configured.",
    "object"    : "TransactionalMap",
    "request"   : "KeySetWithPredicate",
    "partition" : "-1",
    "requestId" : "0x100f",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the this transaction operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "Specified query criteria.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "predicate"
      }
    ],

    "responseId" : "0x006a"

  , "response" : {
    "comment"  : "Result key set for the query.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalMapValuesCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Returns a collection clone of the values contained in this map. The collection is NOT backed by the map,<br> so changes to the map are NOT reflected in the collection, and vice-versa. This method is always executed by a<br> distributed query, so it may throw a QueryResultSizeExceededException if query result size limit is configured.",
    "object"    : "TransactionalMap",
    "request"   : "Values",
    "partition" : "-1",
    "requestId" : "0x1010",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the this transaction operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x006a"

  , "response" : {
    "comment"  : "All values in the map",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalMapValuesWithPredicateCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Queries the map based on the specified predicate and returns the values of matching entries.Specified predicate<br> runs on all members in parallel. The collection is NOT backed by the map, so changes to the map are NOT reflected<br> in the collection, and vice-versa. This method is always executed by a distributed query, so it may throw<br> a QueryResultSizeExceededException if query result size limit is configured.",
    "object"    : "TransactionalMap",
    "request"   : "ValuesWithPredicate",
    "partition" : "-1",
    "requestId" : "0x1011",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the this transaction operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "Specified query criteria.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "predicate"
      }
    ],

    "responseId" : "0x006a"

  , "response" : {
    "comment"  : "Result value collection of the query.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalMultiMapPutCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Stores a key-value pair in the multimap.",
    "object"    : "TransactionalMultiMap",
    "request"   : "Put",
    "partition" : "-1",
    "requestId" : "0x1101",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Multi Map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the transaction",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "The key to be stored",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The value to be stored<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if the size of the multimap is increased, false if the multimap already contains the key-value pair.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalMultiMapGetCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Returns the collection of values associated with the key.",
    "object"    : "TransactionalMultiMap",
    "request"   : "Get",
    "partition" : "-1",
    "requestId" : "0x1102",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Multi Map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the transaction",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "The key whose associated values are returned<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      }
    ],

    "responseId" : "0x006a"

  , "response" : {
    "comment"  : "The collection of the values associated with the key",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalMultiMapRemoveCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Removes the given key value pair from the multimap.",
    "object"    : "TransactionalMultiMap",
    "request"   : "Remove",
    "partition" : "-1",
    "requestId" : "0x1103",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Multi Map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the transaction",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "The key whose associated values are returned<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      }
    ],

    "responseId" : "0x006a"

  , "response" : {
    "comment"  : "True if the size of the multimap changed after the remove operation, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalMultiMapRemoveEntryCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Removes all the entries associated with the given key.",
    "object"    : "TransactionalMultiMap",
    "request"   : "RemoveEntry",
    "partition" : "-1",
    "requestId" : "0x1104",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Multi Map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the this transaction operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "The key whose associated values are returned",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The value to be stored<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if the size of the multimap changed after the remove operation, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalMultiMapValueCountCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Returns the number of values matching the given key in the multimap.",
    "object"    : "TransactionalMultiMap",
    "request"   : "ValueCount",
    "partition" : "-1",
    "requestId" : "0x1105",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Multi Map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the this transaction operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "The key whose number of values are returned<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      }
    ],

    "responseId" : "0x0066"

  , "response" : {
    "comment"  : "The number of values matching the given key in the multimap",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalMultiMapSizeCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Returns the number of key-value pairs in the multimap.",
    "object"    : "TransactionalMultiMap",
    "request"   : "Size",
    "partition" : "-1",
    "requestId" : "0x1106",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Multi Map",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the this transaction operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x0066"

  , "response" : {
    "comment"  : "The number of key-value pairs in the multimap",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalSetAddCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Add new item to transactional set.",
    "object"    : "TransactionalSet",
    "request"   : "Add",
    "partition" : "-1",
    "requestId" : "0x1201",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Set",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the this transaction operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "Item added to transactional set<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "item"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if item is added successfully",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalSetRemoveCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Remove item from transactional set.",
    "object"    : "TransactionalSet",
    "request"   : "Remove",
    "partition" : "-1",
    "requestId" : "0x1202",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Set",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the this transaction operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "Item removed from Transactional Set<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "item"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if item is remove successfully",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalSetSizeCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Returns the size of the set.",
    "object"    : "TransactionalSet",
    "request"   : "Size",
    "partition" : "-1",
    "requestId" : "0x1203",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Set",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the this transaction operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x0066"

  , "response" : {
    "comment"  : "The size of the set",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalListAddCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Adds a new item to the transactional list.",
    "object"    : "TransactionalList",
    "request"   : "Add",
    "partition" : "-1",
    "requestId" : "0x1301",
    "requests" : [
      {
        "comment"  : "Name of the Transactional List",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the this transaction operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "The new item added to the transactionalList<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "item"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if the item is added successfully, false otherwise",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalListRemoveCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Remove item from the transactional list",
    "object"    : "TransactionalList",
    "request"   : "Remove",
    "partition" : "-1",
    "requestId" : "0x1302",
    "requests" : [
      {
        "comment"  : "Name of the Transactional List",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the this transaction operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "Item to remove to transactional List<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "item"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if the removed successfully,false otherwise",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalListSizeCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Returns the size of the list",
    "object"    : "TransactionalList",
    "request"   : "Size",
    "partition" : "-1",
    "requestId" : "0x1303",
    "requests" : [
      {
        "comment"  : "Name of the Transactional List",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the this transaction operation",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x0066"

  , "response" : {
    "comment"  : "The size of the list",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalQueueOfferCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Inserts the specified element into this queue, waiting up to the specified wait time if necessary for space to<br> become available.",
    "object"    : "TransactionalQueue",
    "request"   : "Offer",
    "partition" : "-1",
    "requestId" : "0x1401",
    "requests" : [
      {
        "comment"  : "Name of the Transcational Queue",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the transaction",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "The element to add",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "item"
      },
      {
        "comment"  : "How long to wait before giving up, in milliseconds<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "timeout"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "<tt>true</tt> if successful, or <tt>false</tt> if the specified waiting time elapses before space is available",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalQueueTakeCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Retrieves and removes the head of this queue, waiting if necessary until an element becomes available.",
    "object"    : "TransactionalQueue",
    "request"   : "Take",
    "partition" : "-1",
    "requestId" : "0x1402",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Queue",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the transaction",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The head of this queue",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalQueuePollCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element<br> to become available.",
    "object"    : "TransactionalQueue",
    "request"   : "Poll",
    "partition" : "-1",
    "requestId" : "0x1403",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Queue",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the transaction",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "How long to wait before giving up, in milliseconds<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "timeout"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The head of this queue, or <tt>null</tt> if the specified waiting time elapses before an element is available",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalQueuePeekCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.",
    "object"    : "TransactionalQueue",
    "request"   : "Peek",
    "partition" : "-1",
    "requestId" : "0x1404",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Queue",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the transaction",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      },
      {
        "comment"  : "How long to wait before giving up, in milliseconds<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "timeout"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The value at the head of the queue.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionalQueueSizeCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Returns the number of elements in this collection.If this collection contains more than Integer.MAX_VALUE<br> elements, returns Integer.MAX_VALUE.",
    "object"    : "TransactionalQueue",
    "request"   : "Size",
    "partition" : "-1",
    "requestId" : "0x1405",
    "requests" : [
      {
        "comment"  : "Name of the Transactional Queue",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of the transaction",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "txnId"
      },
      {
        "comment"  : "The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x0066"

  , "response" : {
    "comment"  : "The number of elements in this collection",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "CacheAddEntryListenerCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Cache",
    "request"   : "AddEntryListener",
    "partition" : "-1",
    "requestId" : "0x1501",
    "requests" : [
      {
        "comment"  : "Name of the cache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "if true fires events that originated from this node only, otherwise fires all events<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "localOnly"
      }
    ],

    "responseId" : "0x0068"

  , "response" : {
    "comment"  : "Registration id for the registered listener.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "response"
      }
    ]
  }

  , "event" : [
    {
      "eventId" : "0x00d2",
      "name" : "Cache",
      "params"  :[
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "type"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.util.List<com.hazelcast.cache.impl.CacheEventData>",
          "name"     : "keys"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "completionId"
        }
      ]
    }
  ]

  },
  {
    "fullName"  : "CacheAddInvalidationListenerCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Cache",
    "request"   : "AddInvalidationListener",
    "partition" : "-1",
    "requestId" : "0x1502",
    "requests" : [
      {
        "comment"  : "Name of the cache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "if true fires events that originated from this node only, otherwise fires all events<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "localOnly"
      }
    ],

    "responseId" : "0x0068"

  , "response" : {
    "comment"  : "Registration id for the registered listener.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "response"
      }
    ]
  }

  , "event" : [
    {
      "eventId" : "0x00d0",
      "name" : "CacheInvalidation",
      "params"  :[
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.lang.String",
          "name"     : "name"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "key"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "java.lang.String",
          "name"     : "sourceUuid"
        },
        {
          "since"    : "1.4",
          "nullable" : "false",
          "type"     : "java.util.UUID",
          "name"     : "partitionUuid"
        },
        {
          "since"    : "1.4",
          "nullable" : "false",
          "type"     : "long",
          "name"     : "sequence"
        }
      ]
    },
    {
      "eventId" : "0x00d3",
      "name" : "CacheBatchInvalidation",
      "params"  :[
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.lang.String",
          "name"     : "name"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
          "name"     : "keys"
        },
        {
          "since"    : "1.0",
          "nullable" : "true",
          "type"     : "java.util.List<java.lang.String>",
          "name"     : "sourceUuids"
        },
        {
          "since"    : "1.4",
          "nullable" : "false",
          "type"     : "java.util.List<java.util.UUID>",
          "name"     : "partitionUuids"
        },
        {
          "since"    : "1.4",
          "nullable" : "false",
          "type"     : "java.util.List<java.lang.Long>",
          "name"     : "sequences"
        }
      ]
    }
  ]

  },
  {
    "fullName"  : "CacheClearCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Clears the contents of the cache, without notifying listeners or CacheWriters.",
    "object"    : "Cache",
    "request"   : "Clear",
    "partition" : "-1",
    "requestId" : "0x1503",
    "requests" : [
      {
        "comment"  : "Name of the cache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "CacheRemoveAllKeysCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Removes entries for the specified keys. The order in which the individual entries are removed is undefined.<br> For every entry in the key set, the following are called: any registered CacheEntryRemovedListeners if the cache<br> is a write-through cache, the CacheWriter. If the key set is empty, the CacheWriter is not called.",
    "object"    : "Cache",
    "request"   : "RemoveAllKeys",
    "partition" : "-1",
    "requestId" : "0x1504",
    "requests" : [
      {
        "comment"  : "Name of the cache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The keys to remove.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "keys"
      },
      {
        "comment"  : "User generated id which shall be received as a field of the cache event upon completion of<br>                     the request in the cluster.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "completionId"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "CacheRemoveAllCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Removes all of the mappings from this cache. The order that the individual entries are removed is undefined.<br> For every mapping that exists the following are called: any registered CacheEntryRemovedListener if the cache is<br> a write-through cache, the CacheWriter.If the cache is empty, the CacheWriter is not called.<br> This is potentially an expensive operation as listeners are invoked. Use  #clear() to avoid this.",
    "object"    : "Cache",
    "request"   : "RemoveAll",
    "partition" : "-1",
    "requestId" : "0x1505",
    "requests" : [
      {
        "comment"  : "Name of the cache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "User generated id which shall be received as a field of the cache event upon completion of<br>                     the request in the cluster.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "completionId"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "CacheContainsKeyCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Determines if the Cache contains an entry for the specified key. More formally, returns true if and only if this<br> cache contains a mapping for a key k such that key.equals(k). (There can be at most one such mapping.)",
    "object"    : "Cache",
    "request"   : "ContainsKey",
    "partition" : "key",
    "requestId" : "0x1506",
    "requests" : [
      {
        "comment"  : "Name of the cache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The key whose presence in this cache is to be tested.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "Returns true if cache value for the key exists, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "CacheCreateConfigCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Cache",
    "request"   : "CreateConfig",
    "partition" : "name",
    "requestId" : "0x1507",
    "requests" : [
      {
        "comment"  : "The cache configuration. Byte-array which is serialized from an object implementing<br>                           javax.cache.configuration.Configuration interface.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "cacheConfig"
      },
      {
        "comment"  : "True if the configuration shall be created on all members, false otherwise.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "createAlsoOnOthers"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The created configuration object. Byte-array which is serialized from an object implementing<br> javax.cache.configuration.Configuration interface.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "CacheDestroyCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Closes the cache. Clears the internal content and releases any resource.",
    "object"    : "Cache",
    "request"   : "Destroy",
    "partition" : "name",
    "requestId" : "0x1508",
    "requests" : [
      {
        "comment"  : "Name of the cache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "CacheEntryProcessorCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Cache",
    "request"   : "EntryProcessor",
    "partition" : "key",
    "requestId" : "0x1509",
    "requests" : [
      {
        "comment"  : "Name of the cache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "the key to the entry",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "Entry processor to invoke. Byte-array which is serialized from an object implementing<br>                       javax.cache.processor.EntryProcessor.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "entryProcessor"
      },
      {
        "comment"  : "additional arguments to pass to the EntryProcessor",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "arguments"
      },
      {
        "comment"  : "User generated id which shall be received as a field of the cache event upon completion of<br>                       the request in the cluster.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "completionId"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "the result of the processing, if any, defined by the EntryProcessor implementation",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "CacheGetAllCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Gets a collection of entries from the cache with custom expiry policy, returning them as Map of the values<br> associated with the set of keys requested. If the cache is configured for read-through operation mode, the underlying<br> configured javax.cache.integration.CacheLoader might be called to retrieve the values of the keys from any kind<br> of external resource.",
    "object"    : "Cache",
    "request"   : "GetAll",
    "partition" : "-1",
    "requestId" : "0x150a",
    "requests" : [
      {
        "comment"  : "Name of the cache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The keys whose associated values are to be returned.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "keys"
      },
      {
        "comment"  : "Expiry policy for the entry. Byte-array which is serialized from an object implementing<br>                     javax.cache.expiry.ExpiryPolicy interface.<br>",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "expiryPolicy"
      }
    ],

    "responseId" : "0x0075"

  , "response" : {
    "comment"  : "A map of entries that were found for the given keys. Keys not found<br> in the cache are not in the returned map.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data>>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "CacheGetAndRemoveCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Atomically removes the entry for a key only if currently mapped to some value.",
    "object"    : "Cache",
    "request"   : "GetAndRemove",
    "partition" : "key",
    "requestId" : "0x150b",
    "requests" : [
      {
        "comment"  : "Name of the cache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "key with which the specified value is associated",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "User generated id which shall be received as a field of the cache event upon completion of<br>                     the request in the cluster.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "completionId"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "the value if one existed or null if no mapping existed for this key",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "CacheGetAndReplaceCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Atomically replaces the assigned value of the given key by the specified value using a custom<br> javax.cache.expiry.ExpiryPolicy and returns the previously assigned value. If the cache is configured for<br> write-through operation mode, the underlying configured javax.cache.integration.CacheWriter might be called to<br> store the value of the key to any kind of external resource.",
    "object"    : "Cache",
    "request"   : "GetAndReplace",
    "partition" : "key",
    "requestId" : "0x150c",
    "requests" : [
      {
        "comment"  : "Name of the cache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The key whose value is replaced.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The new value to be associated with the specified key.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      },
      {
        "comment"  : "Expiry policy for the entry. Byte-array which is serialized from an object implementing<br>                     javax.cache.expiry.ExpiryPolicy interface.",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "expiryPolicy"
      },
      {
        "comment"  : "User generated id which shall be received as a field of the cache event upon completion of<br>                     the request in the cluster.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "completionId"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The old value previously assigned to the given key.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "CacheGetConfigCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Cache",
    "request"   : "GetConfig",
    "partition" : "name",
    "requestId" : "0x150d",
    "requests" : [
      {
        "comment"  : "Name of the cache with prefix.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Name of the cache without prefix.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "simpleName"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The cache configuration. Byte-array which is serialized from an object implementing<br> javax.cache.configuration.Configuration interface.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "CacheGetCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Retrieves the mapped value of the given key using a custom javax.cache.expiry.ExpiryPolicy. If no mapping exists<br> null is returned. If the cache is configured for read-through operation mode, the underlying configured<br> javax.cache.integration.CacheLoader might be called to retrieve the value of the key from any kind of external resource.",
    "object"    : "Cache",
    "request"   : "Get",
    "partition" : "key",
    "requestId" : "0x150e",
    "requests" : [
      {
        "comment"  : "Name of the cache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The key whose mapped value is to be returned.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "Expiry policy for the entry. Byte-array which is serialized from an object implementing<br>                     javax.cache.expiry.ExpiryPolicy interface.<br>",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "expiryPolicy"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The value assigned to the given key, or null if not assigned.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "CacheIterateCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "The ordering of iteration over entries is undefined. During iteration, any entries that are a). read will have<br> their appropriate CacheEntryReadListeners notified and b). removed will have their appropriate<br> CacheEntryRemoveListeners notified. java.util.Iterator#next() may return null if the entry is no longer present,<br> has expired or has been evicted.",
    "object"    : "Cache",
    "request"   : "Iterate",
    "partition" : "partitionId",
    "requestId" : "0x150f",
    "requests" : [
      {
        "comment"  : "Name of the cache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The partition id which owns this cache store.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "partitionId"
      },
      {
        "comment"  : "The slot number (or index) to start the iterator",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "tableIndex"
      },
      {
        "comment"  : "The number of items to be batched<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "batch"
      }
    ],

    "responseId" : "0x0074"

  , "response" : {
    "comment"  : "last index processed and list of data",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "tableIndex"
      },
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "keys"
      }
    ]
  }


  },
  {
    "fullName"  : "CacheListenerRegistrationCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Cache",
    "request"   : "ListenerRegistration",
    "partition" : "-1",
    "requestId" : "0x1510",
    "requests" : [
      {
        "comment"  : "Name of the cache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The listener configuration. Byte-array which is serialized from an object implementing<br>                       javax.cache.configuration.CacheEntryListenerConfiguration",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "listenerConfig"
      },
      {
        "comment"  : "true if the listener is being registered, false if the listener is being unregistered.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "shouldRegister"
      },
      {
        "comment"  : "The address of the member server for which the listener is being registered for.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.Address",
        "name"     : "address"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "CacheLoadAllCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Cache",
    "request"   : "LoadAll",
    "partition" : "-1",
    "requestId" : "0x1511",
    "requests" : [
      {
        "comment"  : "Name of the cache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "the keys to load",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "keys"
      },
      {
        "comment"  : "when true existing values in the Cache will<br>                              be replaced by those loaded from a CacheLoader",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "replaceExistingValues"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "CacheManagementConfigCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Cache",
    "request"   : "ManagementConfig",
    "partition" : "-1",
    "requestId" : "0x1512",
    "requests" : [
      {
        "comment"  : "Name of the cache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "true if enabling statistics, false if enabling management.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "isStat"
      },
      {
        "comment"  : "true if enabled, false to disable.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "enabled"
      },
      {
        "comment"  : "the address of the host to enable.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.Address",
        "name"     : "address"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "CachePutIfAbsentCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Associates the specified key with the given value if and only if there is not yet a mapping defined for the<br> specified key. If the cache is configured for write-through operation mode, the underlying configured<br> javax.cache.integration.CacheWriter might be called to store the value of the key to any kind of external resource.",
    "object"    : "Cache",
    "request"   : "PutIfAbsent",
    "partition" : "key",
    "requestId" : "0x1513",
    "requests" : [
      {
        "comment"  : "Name of the cache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The key that is associated with the specified value.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The value that has the specified key associated with it.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      },
      {
        "comment"  : "The custom expiry policy for this operation.<br>                     A null value is equivalent to put(Object, Object).",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "expiryPolicy"
      },
      {
        "comment"  : "User generated id which shall be received as a field of the cache event upon completion of<br>                     the request in the cluster.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "completionId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "true if a value was set, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "CachePutCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Cache",
    "request"   : "Put",
    "partition" : "key",
    "requestId" : "0x1514",
    "requests" : [
      {
        "comment"  : "Name of the cache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The key that has the specified value associated with it.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "The value to be associated with the key.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      },
      {
        "comment"  : "Expiry policy for the entry. Byte-array which is serialized from an object implementing<br>                     javax.cache.expiry.ExpiryPolicy interface.",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "expiryPolicy"
      },
      {
        "comment"  : "boolean flag indicating if the previous value should be retrieved.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "get"
      },
      {
        "comment"  : "User generated id which shall be received as a field of the cache event upon completion of<br>                     the request in the cluster.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "completionId"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The value previously assigned to the given key, or null if not assigned.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "CacheRemoveEntryListenerCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Cache",
    "request"   : "RemoveEntryListener",
    "partition" : "-1",
    "requestId" : "0x1515",
    "requests" : [
      {
        "comment"  : "Name of the cache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The id assigned during the registration for the listener which shall be removed.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "registrationId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "true if the listener is de-registered, false otherwise",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "CacheRemoveInvalidationListenerCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Cache",
    "request"   : "RemoveInvalidationListener",
    "partition" : "-1",
    "requestId" : "0x1516",
    "requests" : [
      {
        "comment"  : "Name of the cache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The id assigned during the registration for the listener which shall be removed.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "registrationId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "true if the listener is de-registered, false otherwise",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "CacheRemoveCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Atomically removes the mapping for a key only if currently mapped to the given value.",
    "object"    : "Cache",
    "request"   : "Remove",
    "partition" : "key",
    "requestId" : "0x1517",
    "requests" : [
      {
        "comment"  : "Name of the cache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "key whose mapping is to be removed from the cache",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "value expected to be associated with the specified key.",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "currentValue"
      },
      {
        "comment"  : "User generated id which shall be received as a field of the cache event upon completion of<br>                     the request in the cluster.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "completionId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "returns false if there was no matching key",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "CacheReplaceCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Atomically replaces the currently assigned value for the given key with the specified newValue if and only if the<br> currently assigned value equals the value of oldValue using a custom javax.cache.expiry.ExpiryPolicy<br> If the cache is configured for write-through operation mode, the underlying configured<br> javax.cache.integration.CacheWriter might be called to store the value of the key to any kind of external resource.",
    "object"    : "Cache",
    "request"   : "Replace",
    "partition" : "key",
    "requestId" : "0x1518",
    "requests" : [
      {
        "comment"  : "Name of the cache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The key whose value is replaced.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "key"
      },
      {
        "comment"  : "Old value to match if exists before removing. Null means \"don't try to remove\"",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "oldValue"
      },
      {
        "comment"  : "The new value to be associated with the specified key.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "newValue"
      },
      {
        "comment"  : "Expiry policy for the entry. Byte-array which is serialized from an object implementing<br>                     javax.cache.expiry.ExpiryPolicy interface.",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "expiryPolicy"
      },
      {
        "comment"  : "User generated id which shall be received as a field of the cache event upon completion of<br>                     the request in the cluster.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "completionId"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The replaced value.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "CacheSizeCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Total entry count",
    "object"    : "Cache",
    "request"   : "Size",
    "partition" : "-1",
    "requestId" : "0x1519",
    "requests" : [
      {
        "comment"  : "Name of the cache.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0066"

  , "response" : {
    "comment"  : "total entry count",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "CacheAddPartitionLostListenerCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Adds a CachePartitionLostListener. The addPartitionLostListener returns a registration ID. This ID is needed to remove the<br> CachePartitionLostListener using the #removePartitionLostListener(String) method. There is no check for duplicate<br> registrations, so if you register the listener twice, it will get events twice.Listeners registered from<br> HazelcastClient may miss some of the cache partition lost events due to design limitations.",
    "object"    : "Cache",
    "request"   : "AddPartitionLostListener",
    "partition" : "-1",
    "requestId" : "0x151a",
    "requests" : [
      {
        "comment"  : "Name of the cache",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "if true only node that has the partition sends the request, if false<br>                  sends all partition lost events.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "localOnly"
      }
    ],

    "responseId" : "0x0068"

  , "response" : {
    "comment"  : "returns the registration id for the CachePartitionLostListener.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "response"
      }
    ]
  }

  , "event" : [
    {
      "eventId" : "0x00d6",
      "name" : "CachePartitionLost",
      "params"  :[
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "partitionId"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.lang.String",
          "name"     : "uuid"
        }
      ]
    }
  ]

  },
  {
    "fullName"  : "CacheRemovePartitionLostListenerCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Removes the specified cache partition lost listener. Returns silently if there is no such listener added before",
    "object"    : "Cache",
    "request"   : "RemovePartitionLostListener",
    "partition" : "-1",
    "requestId" : "0x151b",
    "requests" : [
      {
        "comment"  : "Name of the Cache",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "ID of registered listener.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "registrationId"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "true if registration is removed, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "CachePutAllCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Cache",
    "request"   : "PutAll",
    "partition" : "-1",
    "requestId" : "0x151c",
    "requests" : [
      {
        "comment"  : "name of the cache",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "entries to be put as batch",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data>>",
        "name"     : "entries"
      },
      {
        "comment"  : "expiry policy for the entry. Byte-array which is serialized from an object implementing<br>                     {@link javax.cache.expiry.ExpiryPolicy} interface.",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "expiryPolicy"
      },
      {
        "comment"  : "user generated id which shall be received as a field of the cache event upon completion of<br>                     the request in the cluster.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "completionId"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "CacheIterateEntriesCodec",
    "retryable" : "1",
    "since"     : "1.1",
    "comment"   : "Fetches specified number of entries from the specified partition starting from specified table index.",
    "object"    : "Cache",
    "request"   : "IterateEntries",
    "partition" : "partitionId",
    "requestId" : "0x151d",
    "requests" : [
      {
        "comment"  : "Name of the cache.",
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The partition id which owns this cache store.",
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "partitionId"
      },
      {
        "comment"  : "The slot number (or index) to start the iterator",
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "tableIndex"
      },
      {
        "comment"  : "The number of items to be batched<br>",
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "batch"
      }
    ],

    "responseId" : "0x0076"

  , "response" : {
    "comment"  : "last index processed and list of entries",
    "params"   :
    [
      {
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "tableIndex"
      },
      {
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data>>",
        "name"     : "entries"
      }
    ]
  }


  },
  {
    "fullName"  : "CacheAddNearCacheInvalidationListenerCodec",
    "retryable" : "0",
    "since"     : "1.4",
    "comment"   : "Adds listener to cache. This listener will be used to listen near cache invalidation events.<br> Eventually consistent client near caches should use this method to add invalidation listeners<br> instead of {",
    "object"    : "Cache",
    "request"   : "AddNearCacheInvalidationListener",
    "partition" : "-1",
    "requestId" : "0x151e",
    "requests" : [
      {
        "comment"  : "Name of the cache.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "if true fires events that originated from this node only, otherwise fires all events<br>",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "localOnly"
      }
    ],

    "responseId" : "0x0068"

  , "response" : {
    "comment"  : "Registration id for the registered listener.",
    "params"   :
    [
      {
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "response"
      }
    ]
  }

  , "event" : [
    {
      "eventId" : "0x00d0",
      "name" : "CacheInvalidation",
      "params"  :[
        {
          "since"    : "1.4",
          "nullable" : "false",
          "type"     : "java.lang.String",
          "name"     : "name"
        },
        {
          "since"    : "1.4",
          "nullable" : "true",
          "type"     : "com.hazelcast.nio.serialization.Data",
          "name"     : "key"
        },
        {
          "since"    : "1.4",
          "nullable" : "true",
          "type"     : "java.lang.String",
          "name"     : "sourceUuid"
        },
        {
          "since"    : "1.4",
          "nullable" : "false",
          "type"     : "java.util.UUID",
          "name"     : "partitionUuid"
        },
        {
          "since"    : "1.4",
          "nullable" : "false",
          "type"     : "long",
          "name"     : "sequence"
        }
      ]
    },
    {
      "eventId" : "0x00d3",
      "name" : "CacheBatchInvalidation",
      "params"  :[
        {
          "since"    : "1.4",
          "nullable" : "false",
          "type"     : "java.lang.String",
          "name"     : "name"
        },
        {
          "since"    : "1.4",
          "nullable" : "false",
          "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
          "name"     : "keys"
        },
        {
          "since"    : "1.4",
          "nullable" : "true",
          "type"     : "java.util.List<java.lang.String>",
          "name"     : "sourceUuids"
        },
        {
          "since"    : "1.4",
          "nullable" : "false",
          "type"     : "java.util.List<java.util.UUID>",
          "name"     : "partitionUuids"
        },
        {
          "since"    : "1.4",
          "nullable" : "false",
          "type"     : "java.util.List<java.lang.Long>",
          "name"     : "sequences"
        }
      ]
    }
  ]

  },
  {
    "fullName"  : "CacheFetchNearCacheInvalidationMetadataCodec",
    "retryable" : "0",
    "since"     : "1.4",
    "comment"   : "Fetches invalidation metadata from partitions of map.",
    "object"    : "Cache",
    "request"   : "FetchNearCacheInvalidationMetadata",
    "partition" : "-1",
    "requestId" : "0x151f",
    "requests" : [
      {
        "comment"  : "names of the caches<br>",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.lang.String>",
        "name"     : "names"
      },
      {
        "comment"  : "",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.Address",
        "name"     : "address"
      }
    ],

    "responseId" : "0x007a"

  , "response" : {
    "comment"  : "metadata",
    "params"   :
    [
      {
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<java.lang.String,java.util.List<java.util.Map.Entry<java.lang.Integer,java.lang.Long>>>>",
        "name"     : "namePartitionSequenceList"
      },
      {
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<java.lang.Integer,java.util.UUID>>",
        "name"     : "partitionUuidList"
      }
    ]
  }


  },
  {
    "fullName"  : "CacheAssignAndGetUuidsCodec",
    "retryable" : "1",
    "since"     : "1.4",
    "comment"   : "Assigns a new UUID to each partitions or gets existing ones.",
    "object"    : "Cache",
    "request"   : "AssignAndGetUuids",
    "partition" : "-1",
    "requestId" : "0x1520",

    "responseId" : "0x007b"

  , "response" : {
    "comment"  : "partitionId to assigned uuid entry list",
    "params"   :
    [
      {
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<java.lang.Integer,java.util.UUID>>",
        "name"     : "partitionUuidList"
      }
    ]
  }


  },
  {
    "fullName"  : "CacheEventJournalSubscribeCodec",
    "retryable" : "1",
    "since"     : "1.5",
    "comment"   : "Performs the initial subscription to the cache event journal.<br> This includes retrieving the event journal sequences of the<br> oldest and newest event in the journal.",
    "object"    : "Cache",
    "request"   : "EventJournalSubscribe",
    "partition" : "partitionId",
    "requestId" : "0x1521",
    "requests" : [
      {
        "comment"  : "name of the cache<br>",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x007d"

  , "response" : {
    "comment"  : "the cache event journal subcription information",
    "params"   :
    [
      {
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "oldestSequence"
      },
      {
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "newestSequence"
      }
    ]
  }


  },
  {
    "fullName"  : "CacheEventJournalReadCodec",
    "retryable" : "1",
    "since"     : "1.5",
    "comment"   : "Reads from the cache event journal in batches. You may specify the start sequence,<br> the minimum required number of items in the response, the maximum number of items<br> in the response, a predicate that the events should pass and a projection to<br> apply to the events in the journal.<br> If the event journal currently contains less events than {",
    "object"    : "Cache",
    "request"   : "EventJournalRead",
    "partition" : "partitionId",
    "requestId" : "0x1522",
    "requests" : [
      {
        "comment"  : "name of the cache",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "the startSequence of the first item to read",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "startSequence"
      },
      {
        "comment"  : "the minimum number of items to read.",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "minSize"
      },
      {
        "comment"  : "the maximum number of items to read.",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "maxSize"
      },
      {
        "comment"  : "the predicate to apply before processing events",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "predicate"
      },
      {
        "comment"  : "the projection to apply to journal events<br>",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "projection"
      }
    ],

    "responseId" : "0x0073"

  , "response" : {
    "comment"  : "read event journal items",
    "params"   :
    [
      {
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "readCount"
      },
      {
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "items"
      },
      {
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "long[]",
        "name"     : "itemSeqs"
      }
    ]
  }


  },
  {
    "fullName"  : "XATransactionClearRemoteCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "XATransactional",
    "request"   : "ClearRemote",
    "partition" : "xid",
    "requestId" : "0x1601",
    "requests" : [
      {
        "comment"  : "Java XA transaction id as defined in interface javax.transaction.xa.Xid.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "javax.transaction.xa.Xid",
        "name"     : "xid"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "XATransactionCollectTransactionsCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "XATransactional",
    "request"   : "CollectTransactions",
    "partition" : "-1",
    "requestId" : "0x1602",

    "responseId" : "0x006a"

  , "response" : {
    "comment"  : "Array of Xids.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "XATransactionFinalizeCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "XATransactional",
    "request"   : "Finalize",
    "partition" : "xid",
    "requestId" : "0x1603",
    "requests" : [
      {
        "comment"  : "Java XA transaction id as defined in interface javax.transaction.xa.Xid.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "javax.transaction.xa.Xid",
        "name"     : "xid"
      },
      {
        "comment"  : "If true, the transaction is committed else transaction is rolled back.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "isCommit"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "XATransactionCommitCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "XATransactional",
    "request"   : "Commit",
    "partition" : "-1",
    "requestId" : "0x1604",
    "requests" : [
      {
        "comment"  : "The internal Hazelcast transaction id.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "transactionId"
      },
      {
        "comment"  : "If true, the prepare is also done.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "onePhase"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "XATransactionCreateCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "XATransactional",
    "request"   : "Create",
    "partition" : "-1",
    "requestId" : "0x1605",
    "requests" : [
      {
        "comment"  : "Java XA transaction id as defined in interface javax.transaction.xa.Xid.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "javax.transaction.xa.Xid",
        "name"     : "xid"
      },
      {
        "comment"  : "The timeout in seconds for XA operations such as prepare, commit, rollback.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "timeout"
      }
    ],

    "responseId" : "0x0068"

  , "response" : {
    "comment"  : "The transaction unique identifier.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "XATransactionPrepareCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "XATransactional",
    "request"   : "Prepare",
    "partition" : "-1",
    "requestId" : "0x1606",
    "requests" : [
      {
        "comment"  : "The id of the transaction to prepare.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "transactionId"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "XATransactionRollbackCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "XATransactional",
    "request"   : "Rollback",
    "partition" : "-1",
    "requestId" : "0x1607",
    "requests" : [
      {
        "comment"  : "The id of the transaction to rollback.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "transactionId"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "TransactionCommitCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Transactional",
    "request"   : "Commit",
    "partition" : "-1",
    "requestId" : "0x1701",
    "requests" : [
      {
        "comment"  : "The internal Hazelcast transaction id.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "transactionId"
      },
      {
        "comment"  : "The thread id for the transaction.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "TransactionCreateCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Transactional",
    "request"   : "Create",
    "partition" : "-1",
    "requestId" : "0x1702",
    "requests" : [
      {
        "comment"  : "The maximum allowed duration for the transaction operations.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "timeout"
      },
      {
        "comment"  : "The durability of the transaction",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "durability"
      },
      {
        "comment"  : "Identifies the type of the transaction. Possible values are:<br>                        1 (Two phase):  The two phase commit is more than the classic two phase commit (if you want a regular<br>                        two phase commit, use local). Before it commits, it copies the commit-log to other members, so in<br>                        case of member failure, another member can complete the commit.<br>                        2 (Local): Unlike the name suggests, local is a two phase commit. So first all cohorts are asked<br>                        to prepare if everyone agrees then all cohorts are asked to commit. The problem happens when during<br>                        the commit phase one or more members crash, that the system could be left in an inconsistent state.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "transactionType"
      },
      {
        "comment"  : "The thread id for the transaction.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x0068"

  , "response" : {
    "comment"  : "The transaction id for the created transaction.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "TransactionRollbackCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "Transactional",
    "request"   : "Rollback",
    "partition" : "-1",
    "requestId" : "0x1703",
    "requests" : [
      {
        "comment"  : "The internal Hazelcast transaction id.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "transactionId"
      },
      {
        "comment"  : "The thread id for the transaction.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "threadId"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "ContinuousQueryPublisherCreateWithValueCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "ContinuousQuery",
    "request"   : "PublisherCreateWithValue",
    "partition" : "-1",
    "requestId" : "0x1801",
    "requests" : [
      {
        "comment"  : "Name of the map.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "mapName"
      },
      {
        "comment"  : "Name of the cache for query cache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "cacheName"
      },
      {
        "comment"  : "The predicate to filter events which will be applied to the QueryCache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "predicate"
      },
      {
        "comment"  : "The size of batch. After reaching this minimum size, node immediately sends buffered events to QueryCache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "batchSize"
      },
      {
        "comment"  : "Maximum number of events which can be stored in a buffer of partition.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "bufferSize"
      },
      {
        "comment"  : "The minimum number of delay seconds which an event waits in the buffer of node.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "delaySeconds"
      },
      {
        "comment"  : "Flag to enable/disable initial population of the QueryCache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "populate"
      },
      {
        "comment"  : "Flag to enable/disable coalescing. If true, then only the last updated value for a key is placed in the<br>                     batch, otherwise all changed values are included in the update.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "coalesce"
      }
    ],

    "responseId" : "0x0075"

  , "response" : {
    "comment"  : "Array of key-value pairs.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data>>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ContinuousQueryPublisherCreateCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "ContinuousQuery",
    "request"   : "PublisherCreate",
    "partition" : "-1",
    "requestId" : "0x1802",
    "requests" : [
      {
        "comment"  : "Name of the map.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "mapName"
      },
      {
        "comment"  : "Name of query cache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "cacheName"
      },
      {
        "comment"  : "The predicate to filter events which will be applied to the QueryCache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "predicate"
      },
      {
        "comment"  : "The size of batch. After reaching this minimum size, node immediately sends buffered events to QueryCache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "batchSize"
      },
      {
        "comment"  : "Maximum number of events which can be stored in a buffer of partition.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "bufferSize"
      },
      {
        "comment"  : "The minimum number of delay seconds which an event waits in the buffer of node.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "delaySeconds"
      },
      {
        "comment"  : "Flag to enable/disable initial population of the QueryCache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "populate"
      },
      {
        "comment"  : "Flag to enable/disable coalescing. If true, then only the last updated value for a key is placed in the<br>                     batch, otherwise all changed values are included in the update.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "coalesce"
      }
    ],

    "responseId" : "0x006a"

  , "response" : {
    "comment"  : "Array of keys.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ContinuousQueryMadePublishableCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "ContinuousQuery",
    "request"   : "MadePublishable",
    "partition" : "-1",
    "requestId" : "0x1803",
    "requests" : [
      {
        "comment"  : "Name of the map.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "mapName"
      },
      {
        "comment"  : "Name of query cache.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "cacheName"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if successfully set as publishable, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ContinuousQueryAddListenerCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "ContinuousQuery",
    "request"   : "AddListener",
    "partition" : "-1",
    "requestId" : "0x1804",
    "requests" : [
      {
        "comment"  : "Name of the MapListener which will be used to listen this QueryCache",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "listenerName"
      },
      {
        "comment"  : "if true fires events that originated from this node only, otherwise fires all events<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "localOnly"
      }
    ],

    "responseId" : "0x0068"

  , "response" : {
    "comment"  : "Registration id for the listener.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "response"
      }
    ]
  }

  , "event" : [
    {
      "eventId" : "0x00d4",
      "name" : "QueryCacheSingle",
      "params"  :[
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "com.hazelcast.map.impl.querycache.event.QueryCacheEventData",
          "name"     : "data"
        }
      ]
    },
    {
      "eventId" : "0x00d5",
      "name" : "QueryCacheBatch",
      "params"  :[
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.util.List<com.hazelcast.map.impl.querycache.event.QueryCacheEventData>",
          "name"     : "events"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "java.lang.String",
          "name"     : "source"
        },
        {
          "since"    : "1.0",
          "nullable" : "false",
          "type"     : "int",
          "name"     : "partitionId"
        }
      ]
    }
  ]

  },
  {
    "fullName"  : "ContinuousQuerySetReadCursorCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "This method can be used to recover from a possible event loss situation.<br> This method tries to make consistent the data in this `QueryCache` with the data in the underlying `IMap`<br> by replaying the events after last consistently received ones. As a result of this replaying logic, same event may<br> appear more than once to the `QueryCache` listeners.<br> This method returns `false` if the event is not in the buffer of event publisher side. That means recovery is not<br> possible.",
    "object"    : "ContinuousQuery",
    "request"   : "SetReadCursor",
    "partition" : "associated key",
    "requestId" : "0x1805",
    "requests" : [
      {
        "comment"  : "Name of the map.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "mapName"
      },
      {
        "comment"  : "Name of query cache.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "cacheName"
      },
      {
        "comment"  : "The cursor position of the accumulator to be set.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "sequence"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if the cursor position could be set, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ContinuousQueryDestroyCacheCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "",
    "object"    : "ContinuousQuery",
    "request"   : "DestroyCache",
    "partition" : "-1",
    "requestId" : "0x1806",
    "requests" : [
      {
        "comment"  : "Name of the map.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "mapName"
      },
      {
        "comment"  : "Name of query cache.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "cacheName"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if all cache is destroyed, false otherwise.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "RingbufferSizeCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns number of items in the ringbuffer. If no ttl is set, the size will always be equal to capacity after the<br> head completed the first looparound the ring. This is because no items are getting retired.",
    "object"    : "Ringbuffer",
    "request"   : "Size",
    "partition" : "name",
    "requestId" : "0x1901",
    "requests" : [
      {
        "comment"  : "Name of the Ringbuffer<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0067"

  , "response" : {
    "comment"  : "the size",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "RingbufferTailSequenceCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns the sequence of the tail. The tail is the side of the ringbuffer where the items are added to.<br> The initial value of the tail is -1.",
    "object"    : "Ringbuffer",
    "request"   : "TailSequence",
    "partition" : "name",
    "requestId" : "0x1902",
    "requests" : [
      {
        "comment"  : "Name of the Ringbuffer<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0067"

  , "response" : {
    "comment"  : "the sequence of the tail",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "RingbufferHeadSequenceCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns the sequence of the head. The head is the side of the ringbuffer where the oldest items in the ringbuffer<br> are found. If the RingBuffer is empty, the head will be one more than the tail.<br> The initial value of the head is 0 (1 more than tail).",
    "object"    : "Ringbuffer",
    "request"   : "HeadSequence",
    "partition" : "name",
    "requestId" : "0x1903",
    "requests" : [
      {
        "comment"  : "Name of the Ringbuffer<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0067"

  , "response" : {
    "comment"  : "the sequence of the head",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "RingbufferCapacityCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns the capacity of this Ringbuffer.",
    "object"    : "Ringbuffer",
    "request"   : "Capacity",
    "partition" : "name",
    "requestId" : "0x1904",
    "requests" : [
      {
        "comment"  : "Name of the Ringbuffer<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0067"

  , "response" : {
    "comment"  : "the capacity",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "RingbufferRemainingCapacityCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Returns the remaining capacity of the ringbuffer. The returned value could be stale as soon as it is returned.<br> If ttl is not set, the remaining capacity will always be the capacity.",
    "object"    : "Ringbuffer",
    "request"   : "RemainingCapacity",
    "partition" : "name",
    "requestId" : "0x1905",
    "requests" : [
      {
        "comment"  : "Name of the Ringbuffer<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0067"

  , "response" : {
    "comment"  : "the remaining capacity",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "RingbufferAddCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Adds an item to the tail of the Ringbuffer. If there is space in the ringbuffer, the call<br> will return the sequence of the written item. If there is no space, it depends on the overflow policy what happens:<br> OverflowPolicy OVERWRITE we just overwrite the oldest item in the ringbuffer and we violate the ttl<br> OverflowPolicy FAIL we return -1. The reason that FAIL exist is to give the opportunity to obey the ttl.<br> <p/><br> This sequence will always be unique for this Ringbuffer instance so it can be used as a unique id generator if you are<br> publishing items on this Ringbuffer. However you need to take care of correctly determining an initial id when any node<br> uses the ringbuffer for the first time. The most reliable way to do that is to write a dummy item into the ringbuffer and<br> use the returned sequence as initial  id. On the reading side, this dummy item should be discard. Please keep in mind that<br> this id is not the sequence of the item you are about to publish but from a previously published item. So it can't be used<br> to find that item.",
    "object"    : "Ringbuffer",
    "request"   : "Add",
    "partition" : "name",
    "requestId" : "0x1906",
    "requests" : [
      {
        "comment"  : "Name of the Ringbuffer",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "the OverflowPolicy to use.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "overflowPolicy"
      },
      {
        "comment"  : "to item to add<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "value"
      }
    ],

    "responseId" : "0x0067"

  , "response" : {
    "comment"  : "the sequence of the added item, or -1 if the add failed.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "RingbufferReadOneCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Reads one item from the Ringbuffer. If the sequence is one beyond the current tail, this call blocks until an<br> item is added. This method is not destructive unlike e.g. a queue.take. So the same item can be read by multiple<br> readers or it can be read multiple times by the same reader. Currently it isn't possible to control how long this<br> call is going to block. In the future we could add e.g. tryReadOne(long sequence, long timeout, TimeUnit unit).",
    "object"    : "Ringbuffer",
    "request"   : "ReadOne",
    "partition" : "name",
    "requestId" : "0x1908",
    "requests" : [
      {
        "comment"  : "Name of the Ringbuffer",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "the sequence of the item to read.<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "sequence"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "the read item",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "RingbufferAddAllCodec",
    "retryable" : "0",
    "since"     : "1.0",
    "comment"   : "Adds all the items of a collection to the tail of the Ringbuffer. A addAll is likely to outperform multiple calls<br> to add(Object) due to better io utilization and a reduced number of executed operations. If the batch is empty,<br> the call is ignored. When the collection is not empty, the content is copied into a different data-structure.<br> This means that: after this call completes, the collection can be re-used. the collection doesn't need to be serializable.<br> If the collection is larger than the capacity of the ringbuffer, then the items that were written first will be<br> overwritten. Therefor this call will not block. The items are inserted in the order of the Iterator of the collection.<br> If an addAll is executed concurrently with an add or addAll, no guarantee is given that items are contiguous.<br> The result of the future contains the sequenceId of the last written item",
    "object"    : "Ringbuffer",
    "request"   : "AddAll",
    "partition" : "name",
    "requestId" : "0x1909",
    "requests" : [
      {
        "comment"  : "Name of the Ringbuffer",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "the batch of items to add",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "valueList"
      },
      {
        "comment"  : "the overflowPolicy to use<br>",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "overflowPolicy"
      }
    ],

    "responseId" : "0x0067"

  , "response" : {
    "comment"  : "the ICompletableFuture to synchronize on completion.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "RingbufferReadManyCodec",
    "retryable" : "1",
    "since"     : "1.0",
    "comment"   : "Reads a batch of items from the Ringbuffer. If the number of available items after the first read item is smaller<br> than the maxCount, these items are returned. So it could be the number of items read is smaller than the maxCount.<br> If there are less items available than minCount, then this call blacks. Reading a batch of items is likely to<br> perform better because less overhead is involved. A filter can be provided to only select items that need to be read.<br> If the filter is null, all items are read. If the filter is not null, only items where the filter function returns<br> true are returned. Using filters is a good way to prevent getting items that are of no value to the receiver.<br> This reduces the amount of IO and the number of operations being executed, and can result in a significant performance improvement.",
    "object"    : "Ringbuffer",
    "request"   : "ReadMany",
    "partition" : "name",
    "requestId" : "0x190a",
    "requests" : [
      {
        "comment"  : "Name of the Ringbuffer",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "the startSequence of the first item to read",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "startSequence"
      },
      {
        "comment"  : "the minimum number of items to read.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "minCount"
      },
      {
        "comment"  : "the maximum number of items to read.",
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "maxCount"
      },
      {
        "comment"  : "Filter is allowed to be null, indicating there is no filter.<br>",
        "since"    : "1.0",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "filter"
      }
    ],

    "responseId" : "0x0073"

  , "response" : {
    "comment"  : "a future containing the items read.",
    "params"   :
    [
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "readCount"
      },
      {
        "since"    : "1.0",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.nio.serialization.Data>",
        "name"     : "items"
      },
      {
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "long[]",
        "name"     : "itemSeqs"
      }
    ]
  }


  },
  {
    "fullName"  : "DurableExecutorShutdownCodec",
    "retryable" : "0",
    "since"     : "1.1",
    "comment"   : "Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted.<br> Invocation has no additional effect if already shut down.",
    "object"    : "DurableExecutor",
    "request"   : "Shutdown",
    "partition" : "-1",
    "requestId" : "0x1b01",
    "requests" : [
      {
        "comment"  : "Name of the executor.",
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "DurableExecutorIsShutdownCodec",
    "retryable" : "0",
    "since"     : "1.1",
    "comment"   : "Returns true if this executor has been shut down.",
    "object"    : "DurableExecutor",
    "request"   : "IsShutdown",
    "partition" : "-1",
    "requestId" : "0x1b02",
    "requests" : [
      {
        "comment"  : "Name of the executor.<br>",
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "true if this executor has been shut down",
    "params"   :
    [
      {
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "DurableExecutorSubmitToPartitionCodec",
    "retryable" : "1",
    "since"     : "1.1",
    "comment"   : "Submits the task to partition for execution",
    "object"    : "DurableExecutor",
    "request"   : "SubmitToPartition",
    "partition" : "partitionId",
    "requestId" : "0x1b03",
    "requests" : [
      {
        "comment"  : "Name of the executor.",
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "The callable object to be executed.<br>",
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "callable"
      }
    ],

    "responseId" : "0x0066"

  , "response" : {
    "comment"  : "the sequence for the submitted execution.",
    "params"   :
    [
      {
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "DurableExecutorRetrieveResultCodec",
    "retryable" : "1",
    "since"     : "1.1",
    "comment"   : "Retrieves the result of the execution with the given sequence",
    "object"    : "DurableExecutor",
    "request"   : "RetrieveResult",
    "partition" : "partitionId",
    "requestId" : "0x1b04",
    "requests" : [
      {
        "comment"  : "Name of the executor.",
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Sequence of the execution.<br>",
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "sequence"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The result of the callable execution with the given sequence.",
    "params"   :
    [
      {
        "since"    : "1.1",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "DurableExecutorDisposeResultCodec",
    "retryable" : "1",
    "since"     : "1.1",
    "comment"   : "Disposes the result of the execution with the given sequence",
    "object"    : "DurableExecutor",
    "request"   : "DisposeResult",
    "partition" : "partitionId",
    "requestId" : "0x1b05",
    "requests" : [
      {
        "comment"  : "Name of the executor.",
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Sequence of the execution.",
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "sequence"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "DurableExecutorRetrieveAndDisposeResultCodec",
    "retryable" : "1",
    "since"     : "1.1",
    "comment"   : "Retrieves and disposes the result of the execution with the given sequence",
    "object"    : "DurableExecutor",
    "request"   : "RetrieveAndDisposeResult",
    "partition" : "partitionId",
    "requestId" : "0x1b06",
    "requests" : [
      {
        "comment"  : "Name of the executor.",
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "Sequence of the execution.<br>",
        "since"    : "1.1",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "sequence"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The result of the callable execution with the given sequence.",
    "params"   :
    [
      {
        "since"    : "1.1",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "CardinalityEstimatorAddCodec",
    "retryable" : "0",
    "since"     : "1.3",
    "comment"   : "Add a new hash in the estimation set. This is the method you want to<br> use to feed hash values into the estimator.",
    "object"    : "CardinalityEstimator",
    "request"   : "Add",
    "partition" : "name",
    "requestId" : "0x1c01",
    "requests" : [
      {
        "comment"  : "The name of CardinalityEstimator",
        "since"    : "1.3",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "64bit hash code value to add<br><br> @since 1.3",
        "since"    : "1.3",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "hash"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "CardinalityEstimatorEstimateCodec",
    "retryable" : "0",
    "since"     : "1.3",
    "comment"   : "Estimates the cardinality of the aggregation so far.<br> If it was previously estimated and never invalidated, then the cached version is used.",
    "object"    : "CardinalityEstimator",
    "request"   : "Estimate",
    "partition" : "name",
    "requestId" : "0x1c02",
    "requests" : [
      {
        "comment"  : "The name of CardinalityEstimator<br><br>",
        "since"    : "1.3",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      }
    ],

    "responseId" : "0x0067"

  , "response" : {
    "comment"  : "the previous cached estimation or the newly computed one.",
    "params"   :
    [
      {
        "since"    : "1.3",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ScheduledExecutorShutdownCodec",
    "retryable" : "0",
    "since"     : "1.4",
    "comment"   : "Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted.<br> Invocation has no additional effect if already shut down.",
    "object"    : "ScheduledExecutor",
    "request"   : "Shutdown",
    "partition" : "-1",
    "requestId" : "0x1d01",
    "requests" : [
      {
        "comment"  : "Name of the scheduler.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "schedulerName"
      },
      {
        "comment"  : "The cluster member where the shutdown for this scheduler will be sent.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.Address",
        "name"     : "address"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "ScheduledExecutorSubmitToPartitionCodec",
    "retryable" : "1",
    "since"     : "1.4",
    "comment"   : "Submits the task to partition for execution, partition is chosen based on multiple criteria of the given task.",
    "object"    : "ScheduledExecutor",
    "request"   : "SubmitToPartition",
    "partition" : "taskName",
    "requestId" : "0x1d02",
    "requests" : [
      {
        "comment"  : "The name of the scheduler.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "schedulerName"
      },
      {
        "comment"  : "type of schedule logic, values 0 for SINGLE_RUN, 1 for AT_FIXED_RATE",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "byte",
        "name"     : "type"
      },
      {
        "comment"  : "The name of the task",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "taskName"
      },
      {
        "comment"  : "Name The name of the task",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "task"
      },
      {
        "comment"  : "initial delay in milliseconds",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "initialDelayInMillis"
      },
      {
        "comment"  : "period between each run in milliseconds",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "periodInMillis"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "ScheduledExecutorSubmitToAddressCodec",
    "retryable" : "1",
    "since"     : "1.4",
    "comment"   : "Submits the task to a member for execution, member is provided in the form of an address.",
    "object"    : "ScheduledExecutor",
    "request"   : "SubmitToAddress",
    "partition" : "-1",
    "requestId" : "0x1d03",
    "requests" : [
      {
        "comment"  : "The name of the scheduler.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "schedulerName"
      },
      {
        "comment"  : "The address of the member where the task will get scheduled.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.Address",
        "name"     : "address"
      },
      {
        "comment"  : "type of schedule logic, values 0 for SINGLE_RUN, 1 for AT_FIXED_RATE",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "byte",
        "name"     : "type"
      },
      {
        "comment"  : "The name of the task",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "taskName"
      },
      {
        "comment"  : "Name The name of the task",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "task"
      },
      {
        "comment"  : "initial delay in milliseconds",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "initialDelayInMillis"
      },
      {
        "comment"  : "period between each run in milliseconds",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "periodInMillis"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "ScheduledExecutorGetAllScheduledFuturesCodec",
    "retryable" : "1",
    "since"     : "1.4",
    "comment"   : "Returns all scheduled tasks in for a given scheduler in the given member.",
    "object"    : "ScheduledExecutor",
    "request"   : "GetAllScheduledFutures",
    "partition" : "-1",
    "requestId" : "0x1d04",
    "requests" : [
      {
        "comment"  : "The name of the scheduler.<br>",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "schedulerName"
      }
    ],

    "responseId" : "0x0079"

  , "response" : {
    "comment"  : "A list of scheduled task handlers used to construct the future proxies.",
    "params"   :
    [
      {
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.util.List<java.util.Map.Entry<com.hazelcast.core.Member,java.util.List<com.hazelcast.scheduledexecutor.ScheduledTaskHandler>>>",
        "name"     : "handlers"
      }
    ]
  }


  },
  {
    "fullName"  : "ScheduledExecutorGetStatsFromPartitionCodec",
    "retryable" : "1",
    "since"     : "1.4",
    "comment"   : "Returns statistics of the task",
    "object"    : "ScheduledExecutor",
    "request"   : "GetStatsFromPartition",
    "partition" : "taskName",
    "requestId" : "0x1d05",
    "requests" : [
      {
        "comment"  : "The name of the scheduler.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "schedulerName"
      },
      {
        "comment"  : "The name of the task<br>",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "taskName"
      }
    ],

    "responseId" : "0x0078"

  , "response" : {
    "comment"  : "A snapshot of the task statistics",
    "params"   :
    [
      {
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "lastIdleTimeNanos"
      },
      {
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "totalIdleTimeNanos"
      },
      {
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "totalRuns"
      },
      {
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "totalRunTimeNanos"
      }
    ]
  }


  },
  {
    "fullName"  : "ScheduledExecutorGetStatsFromAddressCodec",
    "retryable" : "1",
    "since"     : "1.4",
    "comment"   : "Returns statistics of the task",
    "object"    : "ScheduledExecutor",
    "request"   : "GetStatsFromAddress",
    "partition" : "-1",
    "requestId" : "0x1d06",
    "requests" : [
      {
        "comment"  : "The name of the scheduler.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "schedulerName"
      },
      {
        "comment"  : "The name of the task",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "taskName"
      },
      {
        "comment"  : "The address of the member where the task will get scheduled.<br>",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.Address",
        "name"     : "address"
      }
    ],

    "responseId" : "0x0078"

  , "response" : {
    "comment"  : "A snapshot of the task statistics",
    "params"   :
    [
      {
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "lastIdleTimeNanos"
      },
      {
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "totalIdleTimeNanos"
      },
      {
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "totalRuns"
      },
      {
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "totalRunTimeNanos"
      }
    ]
  }


  },
  {
    "fullName"  : "ScheduledExecutorGetDelayFromPartitionCodec",
    "retryable" : "1",
    "since"     : "1.4",
    "comment"   : "Returns the ScheduledFuture's delay in nanoseconds for the task in the scheduler.",
    "object"    : "ScheduledExecutor",
    "request"   : "GetDelayFromPartition",
    "partition" : "taskName",
    "requestId" : "0x1d07",
    "requests" : [
      {
        "comment"  : "The name of the scheduler.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "schedulerName"
      },
      {
        "comment"  : "The name of the task<br>",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "taskName"
      }
    ],

    "responseId" : "0x0067"

  , "response" : {
    "comment"  : "The remaining delay of the task formatted in nanoseconds.",
    "params"   :
    [
      {
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ScheduledExecutorGetDelayFromAddressCodec",
    "retryable" : "1",
    "since"     : "1.4",
    "comment"   : "Returns the ScheduledFuture's delay in nanoseconds for the task in the scheduler.",
    "object"    : "ScheduledExecutor",
    "request"   : "GetDelayFromAddress",
    "partition" : "-1",
    "requestId" : "0x1d08",
    "requests" : [
      {
        "comment"  : "The name of the scheduler.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "schedulerName"
      },
      {
        "comment"  : "The name of the task",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "taskName"
      },
      {
        "comment"  : "The address of the member where the task will get scheduled.<br>",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.Address",
        "name"     : "address"
      }
    ],

    "responseId" : "0x0067"

  , "response" : {
    "comment"  : "The remaining delay of the task formatted in nanoseconds.",
    "params"   :
    [
      {
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "long",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ScheduledExecutorCancelFromPartitionCodec",
    "retryable" : "1",
    "since"     : "1.4",
    "comment"   : "Cancels further execution and scheduling of the task",
    "object"    : "ScheduledExecutor",
    "request"   : "CancelFromPartition",
    "partition" : "taskName",
    "requestId" : "0x1d09",
    "requests" : [
      {
        "comment"  : "The name of the scheduler.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "schedulerName"
      },
      {
        "comment"  : "The name of the task",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "taskName"
      },
      {
        "comment"  : "A boolean flag to indicate whether the task should be interrupted.<br>",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "mayInterruptIfRunning"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if the task was cancelled",
    "params"   :
    [
      {
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ScheduledExecutorCancelFromAddressCodec",
    "retryable" : "1",
    "since"     : "1.4",
    "comment"   : "Cancels further execution and scheduling of the task",
    "object"    : "ScheduledExecutor",
    "request"   : "CancelFromAddress",
    "partition" : "-1",
    "requestId" : "0x1d0a",
    "requests" : [
      {
        "comment"  : "The name of the scheduler.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "schedulerName"
      },
      {
        "comment"  : "The name of the task",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "taskName"
      },
      {
        "comment"  : "The address of the member where the task will get scheduled.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.Address",
        "name"     : "address"
      },
      {
        "comment"  : "A boolean flag to indicate whether the task should be interrupted.<br>",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "mayInterruptIfRunning"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if the task was cancelled",
    "params"   :
    [
      {
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ScheduledExecutorIsCancelledFromPartitionCodec",
    "retryable" : "1",
    "since"     : "1.4",
    "comment"   : "Checks whether a task as identified from the given handler is already cancelled.",
    "object"    : "ScheduledExecutor",
    "request"   : "IsCancelledFromPartition",
    "partition" : "taskName",
    "requestId" : "0x1d0b",
    "requests" : [
      {
        "comment"  : "The name of the scheduler.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "schedulerName"
      },
      {
        "comment"  : "The name of the task<br>",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "taskName"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if the task is cancelled",
    "params"   :
    [
      {
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ScheduledExecutorIsCancelledFromAddressCodec",
    "retryable" : "1",
    "since"     : "1.4",
    "comment"   : "Checks whether a task as identified from the given handler is already cancelled.",
    "object"    : "ScheduledExecutor",
    "request"   : "IsCancelledFromAddress",
    "partition" : "-1",
    "requestId" : "0x1d0c",
    "requests" : [
      {
        "comment"  : "The name of the scheduler.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "schedulerName"
      },
      {
        "comment"  : "The name of the task",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "taskName"
      },
      {
        "comment"  : "The address of the member where the task will get scheduled.<br>",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.Address",
        "name"     : "address"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if the task is cancelled",
    "params"   :
    [
      {
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ScheduledExecutorIsDoneFromPartitionCodec",
    "retryable" : "1",
    "since"     : "1.4",
    "comment"   : "Checks whether a task is done.",
    "object"    : "ScheduledExecutor",
    "request"   : "IsDoneFromPartition",
    "partition" : "taskName",
    "requestId" : "0x1d0d",
    "requests" : [
      {
        "comment"  : "The name of the scheduler.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "schedulerName"
      },
      {
        "comment"  : "The name of the task<br>",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "taskName"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if the task is done",
    "params"   :
    [
      {
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ScheduledExecutorIsDoneFromAddressCodec",
    "retryable" : "1",
    "since"     : "1.4",
    "comment"   : "Checks whether a task is done.",
    "object"    : "ScheduledExecutor",
    "request"   : "IsDoneFromAddress",
    "partition" : "-1",
    "requestId" : "0x1d0e",
    "requests" : [
      {
        "comment"  : "The name of the scheduler.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "schedulerName"
      },
      {
        "comment"  : "The name of the task",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "taskName"
      },
      {
        "comment"  : "The address of the member where the task will get scheduled.<br>",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.Address",
        "name"     : "address"
      }
    ],

    "responseId" : "0x0065"

  , "response" : {
    "comment"  : "True if the task is done",
    "params"   :
    [
      {
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ScheduledExecutorGetResultFromPartitionCodec",
    "retryable" : "1",
    "since"     : "1.4",
    "comment"   : "Fetches the result of the task ({",
    "object"    : "ScheduledExecutor",
    "request"   : "GetResultFromPartition",
    "partition" : "taskName",
    "requestId" : "0x1d0f",
    "requests" : [
      {
        "comment"  : "The name of the scheduler.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "schedulerName"
      },
      {
        "comment"  : "The name of the task<br>",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "taskName"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The result of the completed task, in serialized form ({",
    "params"   :
    [
      {
        "since"    : "1.4",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ScheduledExecutorGetResultFromAddressCodec",
    "retryable" : "1",
    "since"     : "1.4",
    "comment"   : "Fetches the result of the task ({",
    "object"    : "ScheduledExecutor",
    "request"   : "GetResultFromAddress",
    "partition" : "-1",
    "requestId" : "0x1d10",
    "requests" : [
      {
        "comment"  : "The name of the scheduler.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "schedulerName"
      },
      {
        "comment"  : "The name of the task",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "taskName"
      },
      {
        "comment"  : "The address of the member where the task will get scheduled.<br>",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.Address",
        "name"     : "address"
      }
    ],

    "responseId" : "0x0069"

  , "response" : {
    "comment"  : "The result of the completed task, in serialized form ({",
    "params"   :
    [
      {
        "since"    : "1.4",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "response"
      }
    ]
  }


  },
  {
    "fullName"  : "ScheduledExecutorDisposeFromPartitionCodec",
    "retryable" : "1",
    "since"     : "1.4",
    "comment"   : "Dispose the task from the scheduler",
    "object"    : "ScheduledExecutor",
    "request"   : "DisposeFromPartition",
    "partition" : "taskName",
    "requestId" : "0x1d11",
    "requests" : [
      {
        "comment"  : "The name of the scheduler.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "schedulerName"
      },
      {
        "comment"  : "The name of the task",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "taskName"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "ScheduledExecutorDisposeFromAddressCodec",
    "retryable" : "1",
    "since"     : "1.4",
    "comment"   : "Dispose the task from the scheduler",
    "object"    : "ScheduledExecutor",
    "request"   : "DisposeFromAddress",
    "partition" : "-1",
    "requestId" : "0x1d12",
    "requests" : [
      {
        "comment"  : "The name of the scheduler.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "schedulerName"
      },
      {
        "comment"  : "The name of the task",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "taskName"
      },
      {
        "comment"  : "The address of the member where the task will get scheduled.",
        "since"    : "1.4",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.Address",
        "name"     : "address"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "DynamicConfigAddMultiMapConfigCodec",
    "retryable" : "0",
    "since"     : "1.5",
    "comment"   : "Adds a new multimap config to a running cluster.<br> If a multimap configuration with the given {",
    "object"    : "com.hazelcast.client.impl.protocol.template.DynamicConfigTemplate",
    "request"   : "AddMultiMapConfig",
    "partition" : "-1",
    "requestId" : "0x1e01",
    "requests" : [
      {
        "comment"  : "multimap configuration name",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "value collection type. Valid values are SET and LIST.",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "collectionType"
      },
      {
        "comment"  : "entry listener configurations",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>",
        "name"     : "listenerConfigs"
      },
      {
        "comment"  : "{@code true} to store values in {@code BINARY} format or {@code false} to store<br>                          values in {@code OBJECT} format.",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "binary"
      },
      {
        "comment"  : "number of synchronous backups",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "backupCount"
      },
      {
        "comment"  : "number of asynchronous backups",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "asyncBackupCount"
      },
      {
        "comment"  : "set to {@code true} to enable statistics on this multimap configuration",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "statisticsEnabled"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "DynamicConfigAddRingbufferConfigCodec",
    "retryable" : "0",
    "since"     : "1.5",
    "comment"   : "Adds a new ringbuffer configuration to a running cluster.<br> If a ringbuffer configuration with the given {",
    "object"    : "com.hazelcast.client.impl.protocol.template.DynamicConfigTemplate",
    "request"   : "AddRingbufferConfig",
    "partition" : "-1",
    "requestId" : "0x1e02",
    "requests" : [
      {
        "comment"  : "ringbuffer configuration name",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "capacity of the ringbuffer",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "capacity"
      },
      {
        "comment"  : "number of synchronous backups",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "backupCount"
      },
      {
        "comment"  : "number of asynchronous backups",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "asyncBackupCount"
      },
      {
        "comment"  : "maximum number of seconds for each entry to stay in the ringbuffer",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "timeToLiveSeconds"
      },
      {
        "comment"  : "in memory format of items in the ringbuffer. Valid options are {@code BINARY}<br>                              and {@code OBJECT}",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "inMemoryFormat"
      },
      {
        "comment"  : "backing ringbuffer store configuration",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.client.impl.protocol.task.dynamicconfig.RingbufferStoreConfigHolder",
        "name"     : "ringbufferStoreConfig"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "DynamicConfigAddCardinalityEstimatorConfigCodec",
    "retryable" : "0",
    "since"     : "1.5",
    "comment"   : "Adds a new cardinality estimator configuration to a running cluster.<br> If a cardinality estimator configuration with the given {",
    "object"    : "com.hazelcast.client.impl.protocol.template.DynamicConfigTemplate",
    "request"   : "AddCardinalityEstimatorConfig",
    "partition" : "-1",
    "requestId" : "0x1e03",
    "requests" : [
      {
        "comment"  : "name of the cardinality estimator configuration",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "number of synchronous backups",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "backupCount"
      },
      {
        "comment"  : "number of asynchronous backups",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "asyncBackupCount"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "DynamicConfigAddLockConfigCodec",
    "retryable" : "0",
    "since"     : "1.5",
    "comment"   : "Adds a new lock configuration to a running cluster.<br> If a lock configuration with the given {",
    "object"    : "com.hazelcast.client.impl.protocol.template.DynamicConfigTemplate",
    "request"   : "AddLockConfig",
    "partition" : "-1",
    "requestId" : "0x1e04",
    "requests" : [
      {
        "comment"  : "lock's name",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "name of an existing configured quorum to be used to determine the minimum number of members<br>                   required in the cluster for the lock to remain functional. When {@code null}, quorum does not<br>                   apply to this lock configuration's operations.",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "quorumName"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "DynamicConfigAddListConfigCodec",
    "retryable" : "0",
    "since"     : "1.5",
    "comment"   : "Adds a new list configuration to a running cluster.<br> If a list configuration with the given {",
    "object"    : "com.hazelcast.client.impl.protocol.template.DynamicConfigTemplate",
    "request"   : "AddListConfig",
    "partition" : "-1",
    "requestId" : "0x1e05",
    "requests" : [
      {
        "comment"  : "list's name",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "item listener configurations",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>",
        "name"     : "listenerConfigs"
      },
      {
        "comment"  : "number of synchronous backups",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "backupCount"
      },
      {
        "comment"  : "number of asynchronous backups",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "asyncBackupCount"
      },
      {
        "comment"  : "maximum size of the list",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "maxSize"
      },
      {
        "comment"  : "{@code true} to enable gathering of statistics on the list, otherwise {@code false}",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "statisticsEnabled"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "DynamicConfigAddSetConfigCodec",
    "retryable" : "0",
    "since"     : "1.5",
    "comment"   : "Adds a new set configuration to a running cluster.<br> If a set configuration with the given {",
    "object"    : "com.hazelcast.client.impl.protocol.template.DynamicConfigTemplate",
    "request"   : "AddSetConfig",
    "partition" : "-1",
    "requestId" : "0x1e06",
    "requests" : [
      {
        "comment"  : "set's name",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "item listener configurations",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>",
        "name"     : "listenerConfigs"
      },
      {
        "comment"  : "number of synchronous backups",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "backupCount"
      },
      {
        "comment"  : "number of asynchronous backups",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "asyncBackupCount"
      },
      {
        "comment"  : "maximum size of the set",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "maxSize"
      },
      {
        "comment"  : "{@code true} to enable gathering of statistics on the list, otherwise {@code false}",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "statisticsEnabled"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "DynamicConfigAddReplicatedMapConfigCodec",
    "retryable" : "0",
    "since"     : "1.5",
    "comment"   : "Adds a new replicated map configuration to a running cluster.<br> If a replicated map configuration with the given {",
    "object"    : "com.hazelcast.client.impl.protocol.template.DynamicConfigTemplate",
    "request"   : "AddReplicatedMapConfig",
    "partition" : "-1",
    "requestId" : "0x1e07",
    "requests" : [
      {
        "comment"  : "name of the replicated map configuration",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "data type used to store entries. Valid values are {@code \"BINARY\"}, {@code \"OBJECT\"}<br>                          and {@code \"NATIVE\"}.",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "inMemoryFormat"
      },
      {
        "comment"  : "{@code true} to make the replicated map available for reads before initial replication<br>                          is completed, {@code false} otherwise.",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "asyncFillup"
      },
      {
        "comment"  : "{@code true} to enable gathering of statistics, otherwise {@code false}",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "statisticsEnabled"
      },
      {
        "comment"  : "class name of a class implementing<br>                          {@code com.hazelcast.replicatedmap.merge.ReplicatedMapMergePolicy} to merge entries<br>                          while recovering from a split brain",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "mergePolicy"
      },
      {
        "comment"  : "entry listener configurations",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>",
        "name"     : "listenerConfigs"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "DynamicConfigAddTopicConfigCodec",
    "retryable" : "0",
    "since"     : "1.5",
    "comment"   : "Adds a new topic configuration to a running cluster.<br> If a topic configuration with the given {",
    "object"    : "com.hazelcast.client.impl.protocol.template.DynamicConfigTemplate",
    "request"   : "AddTopicConfig",
    "partition" : "-1",
    "requestId" : "0x1e08",
    "requests" : [
      {
        "comment"  : "topic's name",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "when {@code true} all nodes listening to the same topic get their messages in<br>                              the same order",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "globalOrderingEnabled"
      },
      {
        "comment"  : "{@code true} to enable gathering of statistics, otherwise {@code false}",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "statisticsEnabled"
      },
      {
        "comment"  : "{@code true} to enable multi-threaded processing of incoming messages, otherwise<br>                              a single thread will handle all topic messages",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "multiThreadingEnabled"
      },
      {
        "comment"  : "message listener configurations",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>",
        "name"     : "listenerConfigs"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "DynamicConfigAddExecutorConfigCodec",
    "retryable" : "0",
    "since"     : "1.5",
    "comment"   : "Adds a new executor configuration to a running cluster.<br> If an executor configuration with the given {",
    "object"    : "com.hazelcast.client.impl.protocol.template.DynamicConfigTemplate",
    "request"   : "AddExecutorConfig",
    "partition" : "-1",
    "requestId" : "0x1e09",
    "requests" : [
      {
        "comment"  : "executor's name",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "executor thread pool size",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "poolSize"
      },
      {
        "comment"  : "capacity of executor queue. A value of {@code 0} implies {@link Integer#MAX_VALUE}",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "queueCapacity"
      },
      {
        "comment"  : "{@code true} to enable gathering of statistics, otherwise {@code false}",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "statisticsEnabled"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "DynamicConfigAddDurableExecutorConfigCodec",
    "retryable" : "0",
    "since"     : "1.5",
    "comment"   : "Adds a new durable executor configuration to a running cluster.<br> If a durable executor configuration with the given {",
    "object"    : "com.hazelcast.client.impl.protocol.template.DynamicConfigTemplate",
    "request"   : "AddDurableExecutorConfig",
    "partition" : "-1",
    "requestId" : "0x1e0a",
    "requests" : [
      {
        "comment"  : "durable executor name",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "executor thread pool size",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "poolSize"
      },
      {
        "comment"  : "executor's durability",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "durability"
      },
      {
        "comment"  : "capacity of executor tasks per partition",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "capacity"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "DynamicConfigAddScheduledExecutorConfigCodec",
    "retryable" : "0",
    "since"     : "1.5",
    "comment"   : "Adds a new scheduled executor configuration to a running cluster.<br> If a scheduled executor configuration with the given {",
    "object"    : "com.hazelcast.client.impl.protocol.template.DynamicConfigTemplate",
    "request"   : "AddScheduledExecutorConfig",
    "partition" : "-1",
    "requestId" : "0x1e0b",
    "requests" : [
      {
        "comment"  : "name of scheduled executor",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "number of executor threads per member for the executor",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "poolSize"
      },
      {
        "comment"  : "durability of the scheduled executor",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "durability"
      },
      {
        "comment"  : "maximum number of tasks that a scheduler can have at any given point in time per partition",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "capacity"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "DynamicConfigAddSemaphoreConfigCodec",
    "retryable" : "0",
    "since"     : "1.5",
    "comment"   : "Adds a new semaphore configuration to a running cluster.<br> If a semaphore configuration with the given {",
    "object"    : "com.hazelcast.client.impl.protocol.template.DynamicConfigTemplate",
    "request"   : "AddSemaphoreConfig",
    "partition" : "-1",
    "requestId" : "0x1e0c",
    "requests" : [
      {
        "comment"  : "semaphore configuration name",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "thread count to which the concurrent access is limited",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "initialPermits"
      },
      {
        "comment"  : "number of synchronous backups",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "backupCount"
      },
      {
        "comment"  : "number of asynchronous backups",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "asyncBackupCount"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "DynamicConfigAddQueueConfigCodec",
    "retryable" : "0",
    "since"     : "1.5",
    "comment"   : "Adds a new queue configuration to a running cluster.<br> If a queue configuration with the given {",
    "object"    : "com.hazelcast.client.impl.protocol.template.DynamicConfigTemplate",
    "request"   : "AddQueueConfig",
    "partition" : "-1",
    "requestId" : "0x1e0d",
    "requests" : [
      {
        "comment"  : "queue name",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "item listeners configuration",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>",
        "name"     : "listenerConfigs"
      },
      {
        "comment"  : "number of synchronous backups",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "backupCount"
      },
      {
        "comment"  : "number of asynchronous backups",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "asyncBackupCount"
      },
      {
        "comment"  : "maximum number of items in the queue",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "maxSize"
      },
      {
        "comment"  : "queue time-to-live in seconds: queue will be destroyed if it stays empty or unused for that time",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "emptyQueueTtl"
      },
      {
        "comment"  : "{@code true} to enable gathering of statistics, otherwise {@code false}",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "statisticsEnabled"
      },
      {
        "comment"  : "name of an existing configured quorum to be used to determine the minimum number of members<br>                          required in the cluster for the queue to remain functional. When {@code null}, quorum does not<br>                          apply to this queue configuration's operations.",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "quorumName"
      },
      {
        "comment"  : "backing queue store configuration",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.client.impl.protocol.task.dynamicconfig.QueueStoreConfigHolder",
        "name"     : "queueStoreConfig"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "DynamicConfigAddMapConfigCodec",
    "retryable" : "0",
    "since"     : "1.5",
    "comment"   : "Adds a new map configuration to a running cluster.<br> If a map configuration with the given {",
    "object"    : "com.hazelcast.client.impl.protocol.template.DynamicConfigTemplate",
    "request"   : "AddMapConfig",
    "partition" : "-1",
    "requestId" : "0x1e0e",
    "requests" : [
      {
        "comment"  : "",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "number of synchronous backups",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "backupCount"
      },
      {
        "comment"  : "number of asynchronous backups",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "asyncBackupCount"
      },
      {
        "comment"  : "maximum number of seconds for each entry to stay in the map.",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "timeToLiveSeconds"
      },
      {
        "comment"  : "maximum number of seconds for each entry to stay idle in the map",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "maxIdleSeconds"
      },
      {
        "comment"  : "eviction policy. Valid values: {@code NONE} (no eviction), {@code LRU}<br>                                              (Least Recently Used), {@code LFU} (Least Frequently Used),<br>                                              {@code RANDOM} (evict random entry).",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "evictionPolicy"
      },
      {
        "comment"  : "{@code true} to enable reading local backup entries, {@code false} otherwise",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "readBackupData"
      },
      {
        "comment"  : "control caching of de-serialized values. Valid values are {@code NEVER}<br>                                              (Never cache de-serialized object), {@code INDEX_ONLY} (Cache values only<br>                                              when they are inserted into an index) and {@code ALWAYS} (Always cache<br>                                              de-serialized values",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "cacheDeserializedValues"
      },
      {
        "comment"  : "class name of a class implementing<br>                                              {@code com.hazelcast.map.merge.MapMergePolicy} to merge entries<br>                                              while recovering from a split brain",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "mergePolicy"
      },
      {
        "comment"  : "data type used to store entries. Valid values are {@code BINARY},<br>                                              {@code OBJECT} and {@code NATIVE}.",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "inMemoryFormat"
      },
      {
        "comment"  : "entry listener configurations",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>",
        "name"     : "listenerConfigs"
      },
      {
        "comment"  : "partition lost listener configurations",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>",
        "name"     : "partitionLostListenerConfigs"
      },
      {
        "comment"  : "{@code true} to enable gathering of statistics, otherwise {@code false}",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "statisticsEnabled"
      },
      {
        "comment"  : "name of an existing configured quorum to be used to determine the minimum<br>                                              number of members required in the cluster for the map to remain functional.<br>                                              When {@code null}, quorum does not apply to this map's operations.",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "quorumName"
      },
      {
        "comment"  : "custom {@code com.hazelcast.map.eviction.MapEvictionPolicy} implementation<br>                                              or {@code null}",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "mapEvictionPolicy"
      },
      {
        "comment"  : "maximum size policy. Valid values are {@code PER_NODE},<br>                                              {@code PER_PARTITION}, {@code USED_HEAP_PERCENTAGE}, {@code USED_HEAP_SIZE},<br>                                              {@code FREE_HEAP_PERCENTAGE}, {@code FREE_HEAP_SIZE},<br>                                              {@code USED_NATIVE_MEMORY_SIZE}, {@code USED_NATIVE_MEMORY_PERCENTAGE},<br>                                              {@code FREE_NATIVE_MEMORY_SIZE}, {@code FREE_NATIVE_MEMORY_PERCENTAGE}.",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "maxSizeConfigMaxSizePolicy"
      },
      {
        "comment"  : "maximum size of map",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "maxSizeConfigSize"
      },
      {
        "comment"  : "configuration of backing map store or {@code null} for none",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder",
        "name"     : "mapStoreConfig"
      },
      {
        "comment"  : "configuration of near cache or {@code null} for none",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.client.impl.protocol.task.dynamicconfig.NearCacheConfigHolder",
        "name"     : "nearCacheConfig"
      },
      {
        "comment"  : "reference to an existing WAN replication configuration",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.config.WanReplicationRef",
        "name"     : "wanReplicationRef"
      },
      {
        "comment"  : "map index configurations",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.config.MapIndexConfig>",
        "name"     : "mapIndexConfigs"
      },
      {
        "comment"  : "map attributes",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.config.MapAttributeConfig>",
        "name"     : "mapAttributeConfigs"
      },
      {
        "comment"  : "configurations for query caches on this map",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder>",
        "name"     : "queryCacheConfigs"
      },
      {
        "comment"  : "name of class implementing {@code com.hazelcast.core.PartitioningStrategy}<br>                                              or {@code null}",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "partitioningStrategyClassName"
      },
      {
        "comment"  : "a serialized instance of a partitioning strategy",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "partitioningStrategyImplementation"
      },
      {
        "comment"  : "hot restart configuration",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.config.HotRestartConfig",
        "name"     : "hotRestartConfig"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "DynamicConfigAddReliableTopicConfigCodec",
    "retryable" : "0",
    "since"     : "1.5",
    "comment"   : "Adds a new reliable topic configuration to a running cluster.<br> If a reliable topic configuration with the given {",
    "object"    : "com.hazelcast.client.impl.protocol.template.DynamicConfigTemplate",
    "request"   : "AddReliableTopicConfig",
    "partition" : "-1",
    "requestId" : "0x1e0f",
    "requests" : [
      {
        "comment"  : "name of reliable topic",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "message listener configurations",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>",
        "name"     : "listenerConfigs"
      },
      {
        "comment"  : "maximum number of items to read in a batch.",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "readBatchSize"
      },
      {
        "comment"  : "{@code true} to enable gathering of statistics, otherwise {@code false}",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "statisticsEnabled"
      },
      {
        "comment"  : "policy to handle an overloaded topic. Available values are {@code DISCARD_OLDEST},<br>                              {@code DISCARD_NEWEST}, {@code BLOCK} and {@code ERROR}.",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "topicOverloadPolicy"
      },
      {
        "comment"  : "a serialized {@link java.util.concurrent.Executor} instance to use for executing<br>                              message listeners or {@code null}",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.nio.serialization.Data",
        "name"     : "executor"
      }
    ],

    "responseId" : "0x0064"



  },
  {
    "fullName"  : "DynamicConfigAddCacheConfigCodec",
    "retryable" : "0",
    "since"     : "1.5",
    "comment"   : "Adds a new cache configuration to a running cluster.<br> If a cache configuration with the given {",
    "object"    : "com.hazelcast.client.impl.protocol.template.DynamicConfigTemplate",
    "request"   : "AddCacheConfig",
    "partition" : "-1",
    "requestId" : "0x1e10",
    "requests" : [
      {
        "comment"  : "cache name",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "name"
      },
      {
        "comment"  : "class name of key type",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "keyType"
      },
      {
        "comment"  : "class name of value type",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "valueType"
      },
      {
        "comment"  : "{@code true} to enable gathering of statistics, otherwise {@code false}",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "statisticsEnabled"
      },
      {
        "comment"  : "{@code true} to enable management interface on this cache or {@code false}",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "managementEnabled"
      },
      {
        "comment"  : "{@code true} to enable read through from a {@code CacheLoader}",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "readThrough"
      },
      {
        "comment"  : "{@code true} to enable write through to a {@code CacheWriter}",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "writeThrough"
      },
      {
        "comment"  : "name of cache loader factory class, if one is configured",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "cacheLoaderFactory"
      },
      {
        "comment"  : "name of cache writer factory class, if one is configured",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "cacheWriterFactory"
      },
      {
        "comment"  : "Factory                    name of cache loader factory class, if one is configured",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "cacheLoader"
      },
      {
        "comment"  : "Factory                    name of cache writer factory class, if one is configured",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "cacheWriter"
      },
      {
        "comment"  : "number of synchronous backups",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "backupCount"
      },
      {
        "comment"  : "number of asynchronous backups",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "int",
        "name"     : "asyncBackupCount"
      },
      {
        "comment"  : "data type used to store entries. Valid values are {@code BINARY},<br>                                              {@code OBJECT} and {@code NATIVE}.",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "inMemoryFormat"
      },
      {
        "comment"  : "name of an existing configured quorum to be used to determine the minimum<br>                                              number of members required in the cluster for the cache to remain functional.<br>                                              When {@code null}, quorum does not apply to this cache's operations.",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "quorumName"
      },
      {
        "comment"  : "name of a class implementing {@link com.hazelcast.cache.CacheMergePolicy}<br>                                              that handles merging of values for this cache while recovering from<br>                                              network partitioning",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "mergePolicy"
      },
      {
        "comment"  : "when {@code true} disables invalidation events for per entry but<br>                                              full-flush invalidation events are still enabled.",
        "since"    : "1.5",
        "nullable" : "false",
        "containsNullable" : "false",
        "type"     : "boolean",
        "name"     : "disablePerEntryInvalidationEvents"
      },
      {
        "comment"  : "partition lost listener configurations",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder>",
        "name"     : "partitionLostListenerConfigs"
      },
      {
        "comment"  : "expiry policy factory class name. When configuring an expiry policy,<br>                                              either this or {@ode timedExpiryPolicyFactoryConfig} should be configured.",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.lang.String",
        "name"     : "expiryPolicyFactoryClassName"
      },
      {
        "comment"  : "expiry policy factory with duration configuration",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.config.CacheSimpleConfig.ExpiryPolicyFactoryConfig.TimedExpiryPolicyFactoryConfig",
        "name"     : "timedExpiryPolicyFactoryConfig"
      },
      {
        "comment"  : "cache entry listeners configuration",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "java.util.List<com.hazelcast.config.CacheSimpleEntryListenerConfig>",
        "name"     : "cacheEntryListeners"
      },
      {
        "comment"  : "cache eviction configuration",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.client.impl.protocol.task.dynamicconfig.EvictionConfigHolder",
        "name"     : "evictionConfig"
      },
      {
        "comment"  : "reference to an existing WAN replication configuration",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.config.WanReplicationRef",
        "name"     : "wanReplicationRef"
      },
      {
        "comment"  : "hot restart configuration",
        "since"    : "1.5",
        "nullable" : "true",
        "containsNullable" : "false",
        "type"     : "com.hazelcast.config.HotRestartConfig",
        "name"     : "hotRestartConfig"
      }
    ],

    "responseId" : "0x0064"



  }
]