<?xml version='1.0' encoding='UTF-8'?>
<!--
  ~ Copyright (c) 2008-2013, Hazelcast, Inc. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<sect1 xml:id="MemcacheClient" version='5.0' xmlns='http://docbook.org/ns/docbook'
       xmlns:xi="http://www.w3.org/2001/XInclude"
       xmlns:xlink="http://www.w3.org/1999/xlink"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
       http://www.w3.org/1999/xlink http://www.w3.org/1999/xlink.xsd">
    <title>Memcache Client</title>
    <para>A Memcache client written in any language can talk directly to Hazelcast cluster. No
        additional configuration is required. Here is an example: Let's say your cluster's members
        are:<programlisting language="java"><![CDATA[Members [5] {
    Member [10.20.17.1:5701]
    Member [10.20.17.2:5701]
    Member [10.20.17.4:5701]
    Member [10.20.17.3:5701]
    Member [10.20.17.5:5701]
 }
]]></programlisting>And you have a PHP application that uses PHP Memcache client to cache things in
        Hazelcast. All you need to do is have your PHP memcache client connect to one of these
        members. It doesn't matter which member the client connects to because Hazelcast cluster
        looks as one giant machine (Single System Image). PHP client code sample:
<programlisting language="java"><![CDATA[<?php
    $memcache = new Memcache;
    $memcache->connect('10.20.17.1', 5701) or die ("Could not connect");
    $memcache->set('key1','value1',0,3600);
    $get_result = $memcache->get('key1'); //retrieve your data
    var_dump($get_result); //show it
?>
]]></programlisting>Notice that memcache client is connecting to
        <literal>10.20.17.1</literal>
        and
        using port<literal>5701</literal>. Java client code sample with SpyMemcached client:
    <programlisting language="java">
<![CDATA[MemcachedClient client = new MemcachedClient(AddrUtil.getAddresses("10.20.17.1:5701 10.20.17.2:5701"));
client.set("key1", 3600, "value1");
System.out.println(client.get("key1"));
]]></programlisting>An entry written with a memcache client can be read by another memcache client
        written in another language.
    </para>
</sect1>
