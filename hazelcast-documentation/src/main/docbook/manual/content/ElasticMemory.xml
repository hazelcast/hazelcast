<?xml version='1.0' encoding='UTF-8'?>
<!--
  ~ Copyright (c) 2008-2012, Hazel Bilisim Ltd. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<para version="5.0" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">

    <para>
        By default, Hazelcast stores your distributed data (map entries, queue items) into Java heap
        which is subject to garbage collection. As your heap gets bigger, garbage collection might
        cause your application to pause tens of seconds, badly effecting your application performance
        and response times. Elastic Memory is Hazelcast with off-heap (direct) memory storage to avoid GC pauses.
        Even if you have terabytes of cache in-memory with lots of updates, GC will have almost no effect;
        resulting in more predictable latency and throughput.
    </para>
    <para>
        Here are the steps to enable Elastic Memory:
        <itemizedlist>
            <listitem>
                <para>
                    Set the maximum direct memory JVM can allocate.
                    Example
                    <literal>java -XX:MaxDirectMemorySize=60G ...</literal>
                </para>
            </listitem>
            <listitem>
                <para>
                    Enable Elastic Memory by setting
                    <literal>hazelcast.elastic.memory.enabled</literal>
                    <link xlink:href="#ConfigurationProperties">Hazelcast Config Property</link>
                    to
                    <literal>true</literal>.
                </para>
            </listitem>
            <listitem>
                <para>
                    Set the total direct memory size for HazelcastInstance by setting
                    <literal>hazelcast.elastic.memory.total.size</literal>
                    <link xlink:href="#ConfigurationProperties">Hazelcast Config Property</link>. Size can be
                    in MB or GB and abbreviation can be used, such as
                    <literal>60G</literal>
                    and
                    <literal>500M</literal>.
                </para>
            </listitem>
            <listitem>
                <para>
                    Set the chunk size in KB by setting
                    <literal>hazelcast.elastic.memory.chunk.size</literal>
                    <link xlink:href="#ConfigurationProperties">Hazelcast Config Property</link>.
                    Hazelcast will partition the entire offheap memory into chunks.
                    Default chunk size is 1. Chunk size has to be power of 2 such as 1, 2, 4 and 8.
                </para>
            </listitem>
            <listitem>
                <para>
                    Configure maps you want them to use Elastic Memory by setting
                    <literal>StorageType</literal>
                    to<code>OFFHEAP</code>.
                    Default value is<code>HEAP</code>.
                </para>
                <para>
                    Using XML configuration:
                    <programlisting language="xml"><![CDATA[<hazelcast>
    ...
    <map name="default">
        ...
        <storage-type>OFFHEAP</storage-type>
    </map>
</hazelcast>]]></programlisting>
                </para>
                <para>
                    Using Config API:
                    <programlisting language="java"><![CDATA[MapConfig mapConfig = new MapConfig();
mapConfig.setStorageType(StorageType.OFFHEAP);]]></programlisting>
                </para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        If
        <literal>NearCache</literal>
        is defined for a map, all near cached items are also going to be
        stored on the same off-heap. So off-heap storage is used for both near cache and distributed object
        storage.
    </para>

    <para>
        <emphasis role="italic">Also see how to <link xlink:href="#EnterpriseConfig">configure license key</link>.</emphasis>
    </para>

</para>
