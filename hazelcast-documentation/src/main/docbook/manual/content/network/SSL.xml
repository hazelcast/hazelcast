<?xml version='1.0' encoding='UTF-8'?>

<!--
  ~ Copyright (c) 2008-2013, Hazelcast, Inc. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<sect2 xml:id="SSL" version='5.0' xmlns='http://docbook.org/ns/docbook'
       xmlns:xi="http://www.w3.org/2001/XInclude"
       xmlns:xlink="http://www.w3.org/1999/xlink"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
       http://www.w3.org/1999/xlink http://www.w3.org/1999/xlink.xsd">
    <title>SSL</title>
    <para>
    Hazelcast allows you to use SSL socket communication among all Hazelcast
    members. You need to implement <code>com.hazelcast.nio.ssl.SSLContextFactory</code>
    and configure SSL section in network configuration.

    <programlisting language="java"><![CDATA[
public class MySSLContextFactory implements SSLContextFactory {
    public void init(Properties properties) throws Exception {
    }

    public SSLContext getSSLContext() {
        ...
        SSLContext sslCtx = SSLContext.getInstance(protocol);
        return sslCtx;
    }
}
]]></programlisting>

    <programlisting language="xml"><![CDATA[<hazelcast>
    ...
    <network>
        ...
        <ssl enabled="true">
            <factory-class-name>com.hazelcast.examples.MySSLContextFactory</factory-class-name>
            <properties>
                <property name="foo">bar</property>
            </properties>
        </ssl>
    </network>
    ...
</hazelcast>
]]></programlisting>
    Hazelcast provides a default SSLContextFactory; <code>com.hazelcast.nio.ssl.BasicSSLContextFactory</code> which
    uses configured keystore to initialize <code>SSLContext</code>. All required is to define <literal>keyStore</literal> and
    <literal>keyStorePassword</literal>. Also you can set <literal>keyManagerAlgorithm</literal> (default <code>SunX509</code>),
    <literal>trustManagerAlgorithm</literal> (default <code>SunX509</code>) and <literal>protocol</literal> (default <code>TLS</code>).

    <programlisting language="xml"><![CDATA[<hazelcast>
    ...
    <network>
        ...
        <ssl enabled="true">
            <factory-class-name>com.hazelcast.nio.ssl.BasicSSLContextFactory</factory-class-name>
            <properties>
                <property name="keyStore">keyStore</property>
                <property name="keyStorePassword">keyStorePassword</property>
                <property name="keyManagerAlgorithm">SunX509</property>
                <property name="trustManagerAlgorithm">SunX509</property>
                <property name="protocol">TLS</property>
            </properties>
        </ssl>
    </network>
    ...
</hazelcast>
]]></programlisting>

    You can also set <literal>keyStore</literal> and <literal>keyStorePassword</literal> through
    <literal>javax.net.ssl.keyStore</literal> and <literal>javax.net.ssl.keyStorePassword</literal> system properties.

    <emphasis role="italic">Note that, you can not use SSL when <link xlink:href="#Encryption">Hazelcast Encryption</link> is enabled.</emphasis>
    </para>
</sect2>