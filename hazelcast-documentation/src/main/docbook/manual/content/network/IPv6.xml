<?xml version='1.0' encoding='UTF-8'?>

<!--
  ~ Copyright (c) 2008-2013, Hazelcast, Inc. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<sect2 xml:id="IPv6" version='5.0' xmlns='http://docbook.org/ns/docbook'
       xmlns:xi="http://www.w3.org/2001/XInclude"
       xmlns:xlink="http://www.w3.org/1999/xlink"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
       http://www.w3.org/1999/xlink http://www.w3.org/1999/xlink.xsd">
    <title>IPv6 Support</title>
    <para>
    Hazelcast supports IPv6 addresses seamlessly. [<emphasis>IPv6 support has been switched off by default.
        <link xlink:href="#IPv6-Note">See note below</link></emphasis>]
        All you need is to define IPv6 addresses or interfaces in
    <link xlink:href="#NetworkConfig">network configuration</link>. Only limitation at the moment is you can not define
    wildcard IPv6 addresses in <link xlink:href="#ConfigTcpIp">TCP-IP</link> join configuration.
    <link xlink:href="#ConfigSpecifyInterfaces">Interfaces</link> section does not have this limitation, you can
    configure wildcard IPv6 interfaces same as IPv4 interfaces.

    <programlisting language="xml"><![CDATA[<hazelcast>
    ...
    <network>
        <port auto-increment="true">5701</port>
        <join>
            <multicast enabled="false">
                <multicast-group>FF02:0:0:0:0:0:0:1</multicast-group>
                <multicast-port>54327</multicast-port>
            </multicast>
            <tcp-ip enabled="true">
                <member>[fe80::223:6cff:fe93:7c7e]:5701</member>
                <interface>192.168.1.0-7</interface>
                <interface>192.168.1.*</interface>
                <interface>fe80:0:0:0:45c5:47ee:fe15:493a</interface>
            </tcp-ip>
        </join>
        <interfaces enabled="true">
            <interface>10.3.16.*</interface>
            <interface>10.3.10.4-18</interface>
            <interface>fe80:0:0:0:45c5:47ee:fe15:*</interface>
            <interface>fe80::223:6cff:fe93:0-5555</interface>
        </interfaces>
        ...
    </network>
]]></programlisting>
</para>

    <para>
        JVM has two system properties for setting the preferred protocol stack —IPv4 or IPv6— as well as the preferred
        address family types —inet4 or inet6. On a dual stack machine IPv6 stack is preferred by default, this can be
        changed through <code>java.net.preferIPv4Stack=&lt;true|false&gt;</code> system property. And when querying name
        services JVM prefers IPv4 addressed over IPv6 addresses and will return an IPv4 address if possible. This can be
        changed through <code>java.net.preferIPv6Addresses=&lt;true|false&gt;</code> system property.
    </para>
    <para>
    Also see additional <link xlink:href="http://docs.oracle.com/javase/1.5.0/docs/guide/net/ipv6_guide/index.html#details">
        details on IPv6 support in Java
    </link>.
    </para>

    <para xml:id="IPv6-Note">
    <emphasis role="bold">Note:</emphasis>
    </para>
    <para>
        IPv6 support has been switched off by default, since some platforms have issues in use of IPv6 stack. And some other
        platforms such as Amazon AWS have no support at all. To enable IPv6 support, just set configuration property
        <code>hazelcast.prefer.ipv4.stack</code> to false.
        See <link xlink:href="#ConfigurationProperties">Configuration Properties.</link>
    </para>
</sect2>