<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2008-2013, Hazelcast, Inc. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<sect1 xml:id="ConfigurationProperties" version="5.0"
       xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
       xmlns:xlink="http://www.w3.org/1999/xlink"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
       http://www.w3.org/1999/xlink http://www.w3.org/1999/xlink.xsd">
    <title>Advanced Configuration Properties</title>
    <para>
        There are some advanced configuration properties to tune some aspects
        of Hazelcast. These can be set as property name and value pairs
        through configuration xml, configuration API or JVM system property.
        <itemizedlist>
            <listitem>
                <para>
                    <emphasis role="bold">Configuration xml</emphasis>
                </para>
                <para>
                    <programlisting language="xml">
&lt;hazelcast xsi:schemaLocation="http://www.hazelcast.com/schema/config
    http://www.hazelcast.com/schema/config/hazelcast-config-3.1.xsd"
    xmlns="http://www.hazelcast.com/schema/config"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
    ....
    &lt;properties&gt;
        &lt;property name="hazelcast.property.foo"&gt;value&lt;/property&gt;
            ....
    &lt;/properties&gt;
&lt;/hazelcast&gt;</programlisting>
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">Configuration API</emphasis>
                </para>
                <para>
                    <programlisting language="java">
Config cfg = new Config() ;
cfg.setProperty("hazelcast.property.foo", "value");
                    </programlisting>
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">System Property</emphasis>
                </para>
                <para>
                    <orderedlist>
                        <listitem>
                            <para>Using JVM parameter:
                                <literal>java -Dhazelcast.property.foo=value</literal>
                            </para>
                        </listitem>
                        <listitem>
                            <para>Using System class:
                                <literal>System.setProperty("hazelcast.property.foo", "value");
                                </literal>
                            </para>
                        </listitem>
                    </orderedlist>
                </para>
            </listitem>
        </itemizedlist>
    </para>

    <table border="1" width="950">
        <caption>Properties Table</caption>
        <col width="44%"/>
        <col width="36%"/>
        <col width="10%"/>
        <col width="6%"/>
        <col width="2%"/>
        <col width="2%"/>
        <col width="2%"/>
        <thead>
            <tr>
                <th>Property Name</th>
                <th>Description</th>
                <th>Value Type</th>
                <th>Default</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <literal xml:id="hazelcast.memcache.enabled">hazelcast.memcache.enabled</literal>
                </td>
                <td>Enable
                    <link xlink:href="#MemcacheClient">Memcache</link>
                    client request listener service
                </td>
                <td>boolean</td>
                <td>true</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.rest.enabled</literal>
                </td>
                <td>Enable
                    <link xlink:href="#RestClient">REST</link>
                    client request listener service
                </td>
                <td>boolean</td>
                <td>true</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.logging.type</literal>
                </td>
                <td>Name of
                    <link xlink:href="#Logging">logging</link>
                    framework type to send logging events.
                </td>
                <td>enum</td>
                <td>jdk</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.map.load.chunk.size</literal>
                </td>
                <td>Chunk size for
                    <link xlink:href="#MapPersistence">MapLoader</link>
                    's map initialization
                    process (MapLoder.loadAllKeys())
                </td>
                <td>integer</td>
                <td>1000</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.merge.first.run.delay.seconds</literal>
                </td>
                <td>Inital run delay of
                    <link xlink:href="#NetworkPartitioning">split brain/merge process</link>
                    in seconds
                </td>
                <td>integer</td>
                <td>300</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.merge.next.run.delay.seconds</literal>
                </td>
                <td>Run interval of
                    <link xlink:href="#NetworkPartitioning">split brain/merge process</link>
                    in
                    seconds
                </td>
                <td>integer</td>
                <td>120</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.socket.bind.any</literal>
                </td>
                <td>Bind both server-socket and client-sockets to any local interface</td>
                <td>boolean</td>
                <td>true</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.socket.server.bind.any</literal>
                </td>
                <td>Bind server-socket to any local interface.
                    If not set, <literal>hazelcast.socket.bind.any</literal> will be used as default.</td>
                <td>boolean</td>
                <td>true</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.socket.client.bind.any</literal>
                </td>
                <td>Bind client-sockets to any local interface.
                    If not set, <literal>hazelcast.socket.bind.any</literal> will be used as default.</td>
                <td>boolean</td>
                <td>true</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.socket.receive.buffer.size</literal>
                </td>
                <td>Socket receive buffer size in KB</td>
                <td>integer</td>
                <td>32</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.socket.send.buffer.size</literal>
                </td>
                <td>Socket send buffer size in KB</td>
                <td>integer</td>
                <td>32</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.socket.keep.alive</literal>
                </td>
                <td>Socket set keep alive</td>
                <td>boolean</td>
                <td>true</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.socket.no.delay</literal>
                </td>
                <td>Socket set TCP no delay</td>
                <td>boolean</td>
                <td>true</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.prefer.ipv4.stack</literal>
                </td>
                <td>Prefer Ipv4 network interface when picking a local address.</td>
                <td>boolean</td>
                <td>true</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.shutdownhook.enabled</literal>
                </td>
                <td>Enable Hazelcast shutdownhook thread</td>
                <td>boolean</td>
                <td>true</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.wait.seconds.before.join</literal>
                </td>
                <td>Wait time before join operation</td>
                <td>integer</td>
                <td>5</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.max.wait.seconds.before.join</literal>
                </td>
                <td>Maximum wait time before join operation</td>
                <td>integer</td>
                <td>20</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.heartbeat.interval.seconds</literal>
                </td>
                <td>Heartbeat send interval in seconds</td>
                <td>integer</td>
                <td>1</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.max.no.heartbeat.seconds</literal>
                </td>
                <td>Max timeout of heartbeat in seconds for a node to assume it is dead</td>
                <td>integer</td>
                <td>300</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.icmp.enabled</literal>
                </td>
                <td>Enable ICMP ping</td>
                <td>boolean</td>
                <td>false</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.icmp.timeout</literal>
                </td>
                <td>ICMP timeout in ms</td>
                <td>int</td>
                <td>1000</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.icmp.ttl</literal>
                </td>
                <td>ICMP TTL (maximum numbers of hops to try)</td>
                <td>int</td>
                <td>0</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.master.confirmation.interval.seconds</literal>
                </td>
                <td>Interval at which nodes send master confirmation</td>
                <td>integer</td>
                <td>30</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.max.no.master.confirmation.seconds</literal>
                </td>
                <td>Max timeout of master confirmation from other nodes</td>
                <td>integer</td>
                <td>450</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.member.list.publish.interval.seconds</literal>
                </td>
                <td>Interval at which master node publishes a member list</td>
                <td>integer</td>
                <td>600</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.prefer.ipv4.stack</literal>
                </td>
                <td>Prefer IPv4 Stack, don't use IPv6. See <link xlink:href="#IPv6">IPv6 doc.</link></td>
                <td>boolean</td>
                <td>true</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.initial.min.cluster.size</literal>
                </td>
                <td>Initial expected cluster size to wait before node to start completely</td>
                <td>integer</td>
                <td>0</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.initial.wait.seconds</literal>
                </td>
                <td>Inital time in seconds to wait before node to start completely</td>
                <td>integer</td>
                <td>0</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.partition.count</literal>
                </td>
                <td>Total partition count</td>
                <td>integer</td>
                <td>271</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.jmx</literal>
                </td>
                <td>Enable
                    <link xlink:href="#JMX">JMX</link>
                    agent
                </td>
                <td>boolean</td>
                <td>false</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.jmx.detailed</literal>
                </td>
                <td>Enable detailed views on
                    <link xlink:href="#JMX">JMX</link>
                </td>
                <td>boolean</td>
                <td>false</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.mc.map.excludes</literal>
                </td>
                <td>Comma seperated map names to exclude from
                    <link
                            xlink:href="http://www.hazelcast.com/mancenter.jsp">Hazelcast Management
                        Center
                    </link>
                </td>
                <td>CSV</td>
                <td>null</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.mc.queue.excludes</literal>
                </td>
                <td>Comma seperated queue names to exclude from
                    <link
                            xlink:href="http://www.hazelcast.com/mancenter.jsp">Hazelcast Management
                        Center
                    </link>
                </td>
                <td>CSV</td>
                <td>null</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.mc.topic.excludes</literal>
                </td>
                <td>Comma seperated topic names to exclude from
                    <link
                            xlink:href="http://www.hazelcast.com/mancenter.jsp">Hazelcast Management
                        Center
                    </link>
                </td>
                <td>CSV</td>
                <td>null</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.version.check.enabled</literal>
                </td>
                <td>Enable Hazelcast new version check on startup</td>
                <td>boolean</td>
                <td>true</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.mc.max.visible.instance.count</literal>
                </td>
                <td>Management Center maximum visible instance count</td>
                <td>integer</td>
                <td>100</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.connection.monitor.interval</literal>
                </td>
                <td>Minimum interval to consider a connection error as critical in milliseconds.</td>
                <td>integer</td>
                <td>100</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.connection.monitor.max.faults</literal>
                </td>
                <td>Maximum IO error count before disconnecting from a node.</td>
                <td>integer</td>
                <td>3</td>
            </tr>
            <tr>
                <td>
                    <literal xml:id="hazelcast.partition.migration.interval">hazelcast.partition.migration.interval</literal>
                </td>
                <td>Interval to run partition migration tasks in seconds.</td>
                <td>integer</td>
                <td>0</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.partition.migration.timeout</literal>
                </td>
                <td>Timeout for partition migration tasks in seconds.</td>
                <td>integer</td>
                <td>300</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.graceful.shutdown.max.wait</literal>
                </td>
                <td>Maximum wait seconds during graceful shutdown.</td>
                <td>integer</td>
                <td>600</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.mc.url.change.enabled</literal>
                </td>
                <td>Management Center changing server url is enabled</td>
                <td>boolean</td>
                <td>true</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.elastic.memory.enabled</literal>
                </td>
                <td>Enable
                    <link xlink:href="#ElasticMemory">Hazelcast Elastic Memory</link>
                    off-heap storage
                </td>
                <td>boolean</td>
                <td>false</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.elastic.memory.total.size</literal>
                </td>
                <td>
                    <link xlink:href="#ElasticMemory">Hazelcast Elastic Memory</link>
                    storage total size in MB
                </td>
                <td>integer</td>
                <td>128</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.elastic.memory.chunk.size</literal>
                </td>
                <td>
                    <link xlink:href="#ElasticMemory">Hazelcast Elastic Memory</link>
                    storage chunk size in KB
                </td>
                <td>integer</td>
                <td>1</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.elastic.memory.shared.storage</literal>
                </td>
                <td>
                    <link xlink:href="#ElasticMemory">Enable Hazelcast Elastic Memory</link>
                    shared storage
                </td>
                <td>boolean</td>
                <td>false</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.enterprise.license.key</literal>
                </td>
                <td>
                    <link xlink:href="http://www.hazelcast.com/products.jsp">Hazelcast Enterprise</link>
                    license key
                </td>
                <td>string</td>
                <td>null</td>
            </tr>
            <tr>
                <td>
                    <literal>hazelcast.system.log.enabled</literal>
                </td>
                <td>
                    Enable system logs
                </td>
                <td>boolean</td>
                <td>true</td>
            </tr>
        </tbody>
    </table>

</sect1>
