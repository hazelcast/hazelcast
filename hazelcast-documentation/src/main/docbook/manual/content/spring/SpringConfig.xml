<?xml version='1.0' encoding='UTF-8'?>

<!--
  ~ Copyright (c) 2008-2013, Hazelcast, Inc. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<sect1 xml:id="SpringConfiguration" version="5.0" xmlns="http://docbook.org/ns/docbook"
       xmlns:xi="http://www.w3.org/2001/XInclude"
       xmlns:xlink="http://www.w3.org/1999/xlink"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
       http://www.w3.org/1999/xlink http://www.w3.org/1999/xlink.xsd">
    <title>Configuration</title>
    <para>
    You can declare Hazelcast beans for Spring context
    using <emphasis>beans</emphasis> namespace (default spring <emphasis>beans</emphasis> namespace)
    as well to declare hazelcast maps, queues and others.
    <emphasis role="bold">Hazelcast-Spring integration requires either hazelcast-spring jar or hazelcast-all jar in the
        classpath.
    </emphasis>
    <programlisting language="xml"><![CDATA[<bean id="instance" class="com.hazelcast.core.Hazelcast" factory-method="newHazelcastInstance">
    <constructor-arg>
        <bean class="com.hazelcast.config.Config">
            <property name="groupConfig">
                <bean class="com.hazelcast.config.GroupConfig">
                    <property name="name" value="dev"/>
                    <property name="password" value="pwd"/>
                </bean>
            </property>
            <!-- and so on ... -->
        </bean>
    </constructor-arg>
</bean>

<bean id="map" factory-bean="instance" factory-method="getMap">
    <constructor-arg value="map"/>
</bean>
]]></programlisting>
    Hazelcast has Spring integration (requires version 2.5 or greater) since 1.9.1
    using
    <emphasis>hazelcast</emphasis>
    namespace.
    <itemizedlist>
        <listitem>
            <para>Add namespace
                <emphasis>xmlns:hz="http://www.hazelcast.com/schema/spring"</emphasis>
                to beans
                tag in context file:
                <programlisting language="xml"><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:hz="http://www.hazelcast.com/schema/spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                http://www.hazelcast.com/schema/spring
                http://www.hazelcast.com/schema/spring/hazelcast-spring-2.5.xsd">
]]></programlisting>
            </para>
        </listitem>
        <listitem>
            <para>Use
                <emphasis>hz</emphasis>
                namespace shortcuts to declare cluster, its items and
                so on.
            </para>
        </listitem>
    </itemizedlist>
    After that you can configure Hazelcast instance (node):
    <programlisting language="xml"><![CDATA[<hz:hazelcast id="instance">
    <hz:config>
        <hz:group name="dev" password="password"/>
        <hz:network port="5701" port-auto-increment="false">
            <hz:join>
                <hz:multicast enabled="false"
                              multicast-group="224.2.2.3"
                              multicast-port="54327"/>
                <hz:tcp-ip enabled="true">
                    <hz:members>10.10.1.2, 10.10.1.3</hz:members>
                </hz:tcp-ip>
            </hz:join>
        </hz:network>
        <hz:map name="map"
                backup-count="2"
                max-size="0"
                eviction-percentage="30"
                read-backup-data="true"
                cache-value="true"
                eviction-policy="NONE"
                merge-policy="hz.ADD_NEW_ENTRY"/>
    </hz:config>
</hz:hazelcast>
]]></programlisting>
    You can easily configure map-store and near-cache too. (For map-store you should set either
    <emphasis>class-name</emphasis> or <emphasis>implementation</emphasis> attribute.)
    <programlisting language="xml"><![CDATA[<hz:config>
    <hz:map name="map1">
            <hz:near-cache time-to-live-seconds="0" max-idle-seconds="60"
               eviction-policy="LRU" max-size="5000"  invalidate-on-change="true"/>

            <hz:map-store enabled="true" class-name="com.foo.DummyStore"
                write-delay-seconds="0"/>
    </hz:map>

    <hz:map name="map2">
            <hz:map-store enabled="true" implementation="dummyMapStore"
                write-delay-seconds="0"/>
    </hz:map>

    <bean id="dummyMapStore" class="com.foo.DummyStore" />
</hz:config>
]]></programlisting>
    It's possible to use placeholders instead of concrete values. For instance, use
    property file
    <emphasis>app-default.properties</emphasis>
    for group configuration:
    <programlisting language="xml"><![CDATA[<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations">
        <list>
            <value>classpath:/app-default.properties</value>
        </list>
    </property>
</bean>

<hz:hazelcast id="instance">
    <hz:config>
        <hz:group
            name="${cluster.group.name}"
            password="${cluster.group.password}"/>
        <!-- ... -->
    </hz:config>
</hz:hazelcast>
]]></programlisting>
    Similar for client
    <programlisting language="xml"><![CDATA[<hz:client id="client"
    group-name="${cluster.group.name}" group-password="${cluster.group.password}">
    <hz:member>10.10.1.2:5701</hz:member>
	<hz:member>10.10.1.3:5701</hz:member>
</hz:client>
]]></programlisting>
    Hazelcast also supports <code>lazy-init</code>, <code>scope</code> and <code>depends-on</code> bean attributes.
    <programlisting language="xml"><![CDATA[
<hz:hazelcast id="instance" lazy-init="true" scope="singleton">
    ...
</hz:hazelcast>

<hz:client id="client" scope="prototype" depends-on="instance">
    ...
</hz:client>

]]></programlisting>
    You can declare beans for the following Hazelcast objects:
    <itemizedlist>
        <listitem>
            <para>map</para>
        </listitem>
        <listitem>
            <para>multiMap</para>
        </listitem>
        <listitem>
            <para>queue</para>
        </listitem>
        <listitem>
            <para>topic</para>
        </listitem>
        <listitem>
            <para>set</para>
        </listitem>
        <listitem>
            <para>list</para>
        </listitem>
        <listitem>
            <para>executorService</para>
        </listitem>
        <listitem>
            <para>idGenerator</para>
        </listitem>
        <listitem>
            <para>atomicNumber</para>
        </listitem>
        <listitem>
            <para>semaphore</para>
        </listitem>
        <listitem>
            <para>countDownLatch</para>
        </listitem>
        <listitem>
            <para>lock</para>
        </listitem>
    </itemizedlist>
    Example:
    <programlisting language="xml"><![CDATA[<hz:map id="map" instance-ref="client" name="map" lazy-init="true" />
<hz:multiMap id="multiMap" instance-ref="instance" name="multiMap" lazy-init="false" />
<hz:queue id="queue" instance-ref="client" name="queue" lazy-init="true" depends-on="instance"/>
<hz:topic id="topic" instance-ref="instance" name="topic" depends-on="instance, client"/>
<hz:set id="set" instance-ref="instance" name="set" />
<hz:list id="list" instance-ref="instance" name="list"/>
<hz:executorService id="executorService" instance-ref="client" name="executorService"/>
<hz:idGenerator id="idGenerator" instance-ref="instance" name="idGenerator"/>
<hz:atomicNumber id="atomicNumber" instance-ref="instance" name="atomicNumber"/>
<hz:atomicNumber id="semaphore" instance-ref="client" name="semaphore"/>
<hz:atomicNumber id="countDownLatch" instance-ref="instance" name="countDownLatch"/>
<hz:atomicNumber id="lock" instance-ref="client" name="lock"/>
]]></programlisting>
    </para>
    <anchor xml:id="SpringInjectingTypedBean"/>
    <para><link xlink:href="#SpringInjectingTypedBean">
        <emphasis role="bold">Injecting Typed Collections/Maps</emphasis></link></para>
    <para>
        Spring tries to create a new <code>Map</code>/<code>Collection</code> instance and fill the new instance
        by iterating and converting values of the original <code>Map</code>/<code>Collection</code>
        (<literal>IMap</literal>, <literal>IQueue</literal> etc.) to required types when generic type parameters
        of the original <code>Map</code>/<code>Collection</code> and the target property/attribute do not match.
    </para>
    <para>
        Since Hazelcast <code>Map</code>s/<code>Collection</code>s are designed to hold very large data
        which a single machine can not carry, iterating through whole values can cause out of memory errors.
    </para>
    <para>
        To avoid this issue either target property/attribute can be declared as
        un-typed <code>Map</code>/<code>Collection</code>
        <programlisting language="java"><![CDATA[
public class SomeBean {
    @Autowired
    IMap map; // instead of IMap<K, V> map

    @Autowired
    IQueue queue; // instead of IQueue<E> queue

    ...
}
]]></programlisting>

        or parameters of injection methods (constructor, setter) can be un-typed.

        <programlisting language="java"><![CDATA[
public class SomeBean {

    IMap<K, V> map;

    IQueue<E> queue;

    public SomeBean(IMap map) { // instead of IMap<K, V> map
        this.map = map;
    }

    ...

    public void setQueue(IQueue queue) { // instead of IQueue<E> queue
        this.queue = queue;
    }
    ...
}
]]></programlisting>
        <emphasis role="italic">For more info see
            <link xlink:href="https://jira.springsource.org/browse/SPR-3407">
                Spring issue-3407
            </link>.</emphasis>
    </para>
</sect1>