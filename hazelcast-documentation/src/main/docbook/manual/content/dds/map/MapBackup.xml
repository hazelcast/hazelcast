<?xml version='1.0' encoding='UTF-8'?>
<!--
  ~ Copyright (c) 2008-2013, Hazelcast, Inc. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<sect2 xml:id="MapBackup" version='5.0' xmlns='http://docbook.org/ns/docbook'
       xmlns:xi="http://www.w3.org/2001/XInclude"
       xmlns:xlink="http://www.w3.org/1999/xlink"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
        http://www.w3.org/1999/xlink http://www.w3.org/1999/xlink.xsd">
    <title>Backups</title>
    <para>Hazelcast will distribute map entries onto multiple JVMs (cluster members). Each JVM
        holds some portion of the data but we don't want to lose data when a member JVM crashes.
        To provide data-safety, Hazelcast allows you to specify the number of backup copies you
        want to have. That way data on a JVM will be copied onto other JVM(s). Hazelcast supports both
        <literal>sync</literal> and <literal>async</literal> backups.
        <literal>Sync</literal> backups block operations until backups are successfully copied to
        backups nodes (or deleted from backup nodes in case of remove)
        and acknowledgements are received. In contrast, <literal>async</literal> backups do not block
        operations, they are fire &amp; forget and do not require acknowledgements.
        By default, Hazelcast will have one sync backup copy.
        If backup count &gt;= 1, then each member will carry both owned entries and backup copies of other
        member(s). So for the <literal>map.get(key)</literal> call, it is possible that calling member has backup
        copy of that key but by default, <literal>map.get(key)</literal> will always read the
        value from the actual owner of the key for consistency. It is possible to enable backup
        reads by changing the configuration. Enabling backup reads will give you greater performance.
        <programlisting language="xml"><![CDATA[<hazelcast>
    ...
    <map name="default">
        <!--
            Number of sync-backups. If 1 is set as the backup-count for example,
            then all entries of the map will be copied to another JVM for
            fail-safety. Valid numbers are 0 (no backup), 1, 2, 3.
        -->
        <backup-count>1</backup-count>

        <!--
            Number of async-backups. If 1 is set as the backup-count for example,
            then all entries of the map will be copied to another JVM for
            fail-safety. Valid numbers are 0 (no backup), 1, 2, 3.
        -->
        <async-backup-count>1</async-backup-count>

        <!--
            Can we read the local backup entries? Default value is false for
            strong consistency. Being able to read backup data will give you
            greater performance.
        -->
        <read-backup-data>false</read-backup-data>

        ...
    </map>
</hazelcast>
]]></programlisting>
    </para>
</sect2>
