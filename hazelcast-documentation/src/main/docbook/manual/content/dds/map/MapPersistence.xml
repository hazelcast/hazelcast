<?xml version='1.0' encoding='UTF-8'?>
<!--
  ~ Copyright (c) 2008-2013, Hazelcast, Inc. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<sect2 xml:id="MapPersistence" version='5.0' xmlns='http://docbook.org/ns/docbook'
       xmlns:xi="http://www.w3.org/2001/XInclude"
       xmlns:xlink="http://www.w3.org/1999/xlink"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
        http://www.w3.org/1999/xlink http://www.w3.org/1999/xlink.xsd">
    <title>Persistence</title>
    <para>Hazelcast allows you to load and store the distributed map entries from/to a
        persistent datastore such as relational database. If a loader implementation is
        provided, when
        <literal>get(key)</literal>
        is called, if the map entry doesn't exist
        in-memory then Hazelcast will call your loader implementation to load the entry from a
        datastore. If a store implementation is provided, when
        <literal>put(key,value)</literal>
        is called, Hazelcast will call your store implementation to store the entry into a
        datastore. Hazelcast can call your implementation to store the entries synchronously
        (write-through) with no-delay or asynchronously (write-behind) with delay and it is
        defined by the
        <literal>write-delay-seconds</literal>
        value in the configuration.
    </para>
    <para>If it is write-through, when the
        <literal>map.put(key,value)</literal>
        call returns,
        you can be sure that
        <itemizedlist>
            <listitem>
                <para>
                    <literal>MapStore.store(key,value)</literal>
                    is successfully called so the
                    entry is persisted.
                </para>
            </listitem>
            <listitem>
                <para>In-Memory entry is updated</para>
            </listitem>
            <listitem>
                <para>In-Memory backup copies are successfully created on other JVMs (if
                    backup-count is greater than 0)
                </para>
            </listitem>
        </itemizedlist>
        If it is write-behind, when the
        <literal>map.put(key,value)</literal>
        call returns, you can be sure that
        <itemizedlist>
            <listitem>
                <para>In-Memory entry is updated</para>
            </listitem>
            <listitem>
                <para>In-Memory backup copies are successfully created on other JVMs (if
                    backup-count is greater than 0)
                </para>
            </listitem>
            <listitem>
                <para>The entry is marked as
                    <literal>dirty</literal>
                    so that after
                    <literal>write-delay-seconds</literal>, it can be persisted.
                </para>
            </listitem>
        </itemizedlist>
        Same behavior goes for the
        <literal>remove(key</literal>
        and
        <literal>MapStore.delete(key)</literal>. If
        <literal>MapStore</literal>
        throws an
        exception then the exception will be propagated back to the original
        <literal>put</literal>
        or
        <literal>remove</literal>
        call in the form of
        <literal>RuntimeException</literal>. When write-through is used, Hazelcast will call
        <literal>MapStore.store(key,value)</literal>
        and
        <literal>MapStore.delete(key)</literal>
        for each entry update. When write-behind is
        used, Hazelcast will call<literal>MapStore.store(map)</literal>, and
        <literal>MapStore.delete(collection)</literal>
        to do all writes in a single call.
        Also note that your MapStore or MapLoader implementation should not use Hazelcast
        Map/Queue/MultiMap/List/Set operations. Your implementation should only work with your
        data store. Otherwise you may get into deadlock situations.
    </para>
    <para>Here is a sample configuration:
        <programlisting language="xml"><![CDATA[<hazelcast>
    ...
    <map name="default">
        ...
        <map-store enabled="true">
            <!--
               Name of the class implementing MapLoader and/or MapStore.
               The class should implement at least of these interfaces and
               contain no-argument constructor. Note that the inner classes are not supported.
            -->
            <class-name>com.hazelcast.examples.DummyStore</class-name>
            <!--
               Number of seconds to delay to call the MapStore.store(key, value).
               If the value is zero then it is write-through so MapStore.store(key, value)
               will be called as soon as the entry is updated.
               Otherwise it is write-behind so updates will be stored after write-delay-seconds
               value by calling Hazelcast.storeAll(map). Default value is 0.
            -->
            <write-delay-seconds>0</write-delay-seconds>
        </map-store>
    </map>
</hazelcast>
]]></programlisting>
    </para>
    <para>
        <emphasis role="italic">
            <emphasis role="bold">Initialization on
                startup:
            </emphasis>
        </emphasis>
    </para>
    <para>As of 1.9.3
        <literal>MapLoader</literal>
        has the new
        <literal>MapLoader.loadAllKeys</literal>
        API. It is used for pre-populating the
        in-memory map when the map is first touched/used. If
        <literal>MapLoader.loadAllKeys</literal>
        returns NULL then nothing will be loaded.
        Your
        <literal>MapLoader.loadAllKeys</literal>
        implementation can return all or some of the keys. You may
        select and return only the
        <literal>hot</literal>
        keys, for instance. Also note that
        this is the fastest way of pre-populating the map as Hazelcast will optimize the loading
        process by having each node loading owned portion of the entries.
    </para>
    <para>Here is MapLoader initialization flow;
        <orderedlist>
            <listitem>
                <para>When
                    <code>getMap()</code>
                    first called from any node, initialization starts
                </para>
            </listitem>
            <listitem>
                <para>Hazelcast will call
                    <code>MapLoader.loadAllKeys()</code>
                    to get all your keys on each
                    node
                </para>
            </listitem>
            <listitem>
                <para>Each node will figure out the list of keys it owns</para>
            </listitem>
            <listitem>
                <para>Each node will load all its owned keys by calling
                    <code>MapLoader.loadAll(keys)</code>
                </para>
            </listitem>
            <listitem>
                <para>Each node puts its owned entries into the map by
                    calling
                    <code>IMap.putTransient(key,value)</code>
                </para>
            </listitem>
        </orderedlist>
    </para>
</sect2>
