<?xml version='1.0' encoding='UTF-8'?>
<!--
  ~ Copyright (c) 2008-2013, Hazelcast, Inc. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<sect2 xml:id="MapQuery" version="5.0" xmlns="http://docbook.org/ns/docbook"
       xmlns:xi="http://www.w3.org/2001/XInclude"
       xmlns:xlink="http://www.w3.org/1999/xlink"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
        http://www.w3.org/1999/xlink http://www.w3.org/1999/xlink.xsd">
    <title>Query</title>
    <para>Hazelcast partitions your data and spreads across cluster of servers. You can surely
        iterate over the map entries and look for certain entries you are interested in but this
        is not very efficient as you will have to bring entire entry set and iterate locally.
        Instead, Hazelcast allows you to run distributed queries on your distributed map.
    </para>
    <para>Let's say you have a "employee" map containing values of
        <literal>Employee</literal>
        objects:<programlisting language="java"><![CDATA[import java.io.Serializable;

public class Employee implements Serializable {
private String name;
private int age;
private boolean active;
private double salary;

public Employee(String name, int age, boolean live, double price) {
    this.name = name;
    this.age = age;
    this.active = live;
    this.salary = price;
}

public Employee() {
}

public String getName() {
    return name;
}

public int getAge() {
    return age;
}

public double getSalary() {
    return salary;
}

public boolean isActive() {
    return active;
}
}
]]></programlisting>Now you are looking for the employees who are active and with age less than 30.
        Hazelcast allows you to find these entries in two different ways:
    </para>
    <para>
        <emphasis role="bold">Distributed SQL Query</emphasis>
    </para>
    <para>
        <literal>SqlPredicate</literal>
        takes regular SQL where clause. Here is an example:
        <programlisting language="java"><![CDATA[import com.hazelcast.core.IMap;
import com.hazelcast.query.SqlPredicate;

Config cfg = new Config();
HazelcastInstance hz = Hazelcast.newHazelcastInstance(cfg);
IMap map = hz.getMap("employee");

Set<Employee> employees = (Set<Employee>) map.values(new SqlPredicate("active AND age < 30"));
]]></programlisting>
        Supported SQL syntax:
        <itemizedlist>
            <listitem>
                <para>AND/OR
                    <itemizedlist>
                        <listitem>
                            <para>
                                <literal>&lt;expression&gt; AND &lt;expression&gt; AND
                                    &lt;expression&gt;...
                                </literal>
                                <itemizedlist>
                                    <listitem>
                                        <para>
                                            <literal>active AND age&gt;30</literal>
                                        </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>active=false OR age = 45 OR name =
                                                'Joe'
                                            </literal>
                                        </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>active AND (age &gt;20 OR salary &lt;
                                                60000)
                                            </literal>
                                        </para>
                                    </listitem>
                                </itemizedlist>
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
            </listitem>
            <listitem>
                <para>
                    <literal>=, !=, &lt;, &lt;=, &gt;, &gt;=</literal>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <literal>&lt;expression&gt; = value</literal>
                                <itemizedlist>
                                    <listitem>
                                        <para>
                                            <literal>age &lt;= 30</literal>
                                        </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>name ="Joe"</literal>
                                        </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>salary != 50000</literal>
                                        </para>
                                    </listitem>
                                </itemizedlist>
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
            </listitem>
            <listitem>
                <para>BETWEEN
                    <itemizedlist>
                        <listitem>
                            <para>
                                <literal>&lt;attribute&gt; [NOT] BETWEEN &lt;value1&gt; AND
                                    &lt;value2&gt;</literal>
                                <itemizedlist>
                                    <listitem>
                                        <para>
                                            <literal>age BETWEEN 20 AND 33 (same as age &gt;=20
                                                AND age&lt;=33)
                                            </literal>
                                        </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>age NOT BETWEEN 30 AND 40 (same as age
                                                &lt;30 OR age&gt;40)
                                            </literal>
                                        </para>
                                    </listitem>
                                </itemizedlist>
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
            </listitem>
            <listitem>
                <para>LIKE
                    <itemizedlist>
                        <listitem>
                            <para>
                                <literal>&lt;attribute&gt; [NOT] LIKE 'expression'</literal>
                            </para>
                            <para>
                                <literal>%</literal>
                                (percentage sign) is placeholder for many
                                characters,
                                <literal>_</literal>
                                (underscore) is placeholder for
                                only one character.
                                <itemizedlist>
                                    <listitem>
                                        <para>
                                            <literal>name LIKE 'Jo%'</literal>
                                            (true for 'Joe',
                                            'Josh', 'Joseph' etc.)
                                        </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>name LIKE 'Jo_'</literal>
                                            (true for 'Joe';
                                            false for 'Josh')
                                        </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>name NOT LIKE 'Jo_'</literal>
                                            (true for
                                            'Josh'; false for 'Joe')
                                        </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>name LIKE 'J_s%'</literal>
                                            (true for
                                            'Josh', 'Joseph'; false 'John', 'Joe')
                                        </para>
                                    </listitem>
                                </itemizedlist>
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
            </listitem>
            <listitem>
                <para>IN
                    <itemizedlist>
                        <listitem>
                            <para>
                                <literal>&lt;attribute&gt; [NOT] IN (val1, val2,
                                    ...)
                                </literal>
                                <itemizedlist>
                                    <listitem>
                                        <para>
                                            <literal>age IN (20, 30, 40)</literal>
                                        </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>age NOT IN (60, 70)</literal>
                                        </para>
                                    </listitem>
                                </itemizedlist>
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
            </listitem>
        </itemizedlist>
        Examples:
        <itemizedlist>
            <listitem>
                <para>
                    <literal>active AND (salary &gt;= 50000 OR (age NOT BETWEEN 20 AND
                        30))
                    </literal>
                </para>
            </listitem>
            <listitem>
                <para>
                    <literal>age IN (20, 30, 40) AND salary BETWEEN (50000, 80000)</literal>
                </para>
            </listitem>
        </itemizedlist>
    </para>
    <para>
        <emphasis role="bold">Criteria API</emphasis>
    </para>
    <para>If SQL is not enough or programmable queries are preferred then JPA criteria like API
        can be used. Here is an example:
        <programlisting language="java"><![CDATA[import com.hazelcast.core.IMap;
import com.hazelcast.query.Predicate;
import com.hazelcast.query.PredicateBuilder;
import com.hazelcast.query.EntryObject;
import com.hazelcast.config.Config;


Config cfg = new Config();
HazelcastInstance hz = Hazelcast.newHazelcastInstance(cfg);
IMap map = hz.getMap("employee");

EntryObject e = new PredicateBuilder().getEntryObject();
Predicate predicate = e.is("active").and(e.get("age").lessThan(30));

Set<Employee> employees = (Set<Employee>) map.values(predicate);

]]></programlisting>
    </para>
    <para>
        <emphasis role="bold">Indexing</emphasis>
    </para>
    <para>Hazelcast distributed queries will run on each member in parallel and only results
        will return the caller. When a query runs on a member, Hazelcast will iterate through
        the entire owned entries and find the matching ones. Can we make this even faster? Yes
        by indexing the mostly queried fields. Just like you would do for your database. Of
        course, indexing will add overhead for each
        <literal>write</literal>
        operation but
        queries will be a lot faster. If you are querying your map a lot then make sure to add
        indexes for most frequently queried fields. So if your
        <literal>active and age &lt;
            30
        </literal>
        query, for example, is used a lot then make sure you add index for
        <literal>active</literal>
        and
        <literal>age</literal>
        fields. Here is how:
        <programlisting language="java"><![CDATA[IMap imap = Hazelcast.getMap("employees");
imap.addIndex("age", true);        // ordered, since we have ranged queries for this field
imap.addIndex("active", false);    // not ordered, because boolean field cannot have range
]]></programlisting>
        API
        <literal>IMap.addIndex(fieldName, ordered)</literal>
        is used for adding
        index. For a each indexed field, if you have -ranged- queries such
        as<literal>age&gt;30</literal>,
        <literal>age BETWEEN 40 AND 60</literal>
        then
        <literal>ordered</literal>
        parameter should be<literal>true</literal>, otherwise set
        it to<literal>false</literal>.
    </para>
</sect2>
