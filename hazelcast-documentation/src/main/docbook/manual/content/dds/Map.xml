<?xml version='1.0' encoding='UTF-8'?>
<!--
  ~ Copyright (c) 2008-2013, Hazelcast, Inc. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<sect1 xml:id="Map" version='5.0' xmlns='http://docbook.org/ns/docbook'
       xmlns:xi="http://www.w3.org/2001/XInclude"
       xmlns:xlink="http://www.w3.org/1999/xlink"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
        http://www.w3.org/1999/xlink http://www.w3.org/1999/xlink.xsd">
    <title>Distributed Map</title>
    <para>Hazelcast will partition your map entries; and almost evenly
        distribute onto all Hazelcast members. Distributed maps have 1 backup by
        default so that if a member goes down, we don't lose data. Backup operations are synchronous
        so when a
        <literal>map.put(key, value)</literal>
        returns, it is guaranteed that the entry is
        replicated to one other node. For the reads, it is also guaranteed that
        <literal>map.get(key)</literal>
        returns the latest value of the entry. Consistency is
        strictly enforced.
        <programlisting language="java"><![CDATA[import com.hazelcast.core.Hazelcast;
import java.util.Map;
import java.util.Collection;
import com.hazelcast.config.Config;

Config cfg = new Config();
HazelcastInstance hz = Hazelcast.newHazelcastInstance(cfg);
Map<String, Customer> mapCustomers = hz.getMap("customers");
mapCustomers.put("1", new Customer("Joe", "Smith"));
mapCustomers.put("2", new Customer("Ali", "Selam"));
mapCustomers.put("3", new Customer("Avi", "Noyan"));

Collection<Customer> colCustomers = mapCustomers.values();
for (Customer customer : colCustomers) {
    // process customer
}
]]></programlisting>
        <literal>HazelcastInstance.getMap()</literal>
        actually returns
        <literal>com.hazelcast.core.IMap</literal>
        which extends
        <literal>java.util.concurrent.ConcurrentMap</literal>
        interface. So methods like
        <literal>ConcurrentMap.putIfAbsent(key,value)</literal>
        and
        <literal>ConcurrentMap.replace(key,value)</literal>
        can be used on distributed map as
        shown in the example below.
        <programlisting language="java"><![CDATA[import com.hazelcast.core.Hazelcast;
import java.util.concurrent.ConcurrentMap;

Customer getCustomer (String id) {
    ConcurrentMap<String, Customer> map = hz.getMap("customers");
    Customer customer = map.get(id);
    if (customer == null) {
        customer = new Customer (id);
        customer = map.putIfAbsent(id, customer);
    }
    return customer;
}               

public boolean updateCustomer (Customer customer) {
    ConcurrentMap<String, Customer> map = hz.getMap("customers");
    return (map.replace(customer.getId(), customer) != null);            
}
                
public boolean removeCustomer (Customer customer) {
    ConcurrentMap<String, Customer> map = hz.getMap("customers");
    return map.remove(customer.getId(), customer) );           
}                                  
        
]]></programlisting>
        All
        <literal>ConcurrentMap</literal>
        operations such as
        <literal>put</literal>
        and
        <literal>remove</literal>
        might wait if the key is locked by another thread in the local
        or remote JVM, but they will eventually return with success.
        <literal>ConcurrentMap</literal>
        operations never
        throw<literal>java.util.ConcurrentModificationException</literal>.
    </para>

    <para>Also see:
        <itemizedlist>
            <listitem><para><link xlink:href="#InternalsDistributedMap">Distributed Map internals</link>.</para>
            </listitem>
            <listitem><para><link xlink:href="#DataAffinity">Data Affinity</link>.</para>
            </listitem>
            <listitem><para><link xlink:href="#WildcardConfiguration">Map Configuration with wildcards.</link>.</para>
            </listitem>
        </itemizedlist>
    </para>

    <xi:include href="map/MapBackup.xml"/>
    <xi:include href="map/MapEviction.xml"/>
    <xi:include href="map/MapPersistence.xml"/>
    <xi:include href="map/MapQuery.xml"/>
    <xi:include href="map/MapIndex.xml"/>
    <xi:include href="map/MapContinuousQuery.xml"/>
    <xi:include href="map/MapEntryProcessor.xml"/>
    <xi:include href="map/MapInterceptor.xml"/>
    <xi:include href="map/MapNearCache.xml"/>
    <xi:include href="map/MapEntry.xml"/>
    <xi:include href="map/MapInMemoryFormat.xml"/>

    <xi:include href="../WildcardConfigurationLink.xml"/>
</sect1>
