<?xml version='1.0' encoding='UTF-8'?>
<!--
  ~ Copyright (c) 2008-2012, Hazel Bilisim Ltd. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<sect1 xml:id="Queue" version='5.0' xmlns='http://docbook.org/ns/docbook'
       xmlns:xi="http://www.w3.org/2001/XInclude"
       xmlns:xlink="http://www.w3.org/1999/xlink"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
      http://www.w3.org/1999/xlink http://www.w3.org/1999/xlink.xsd">
    <title>Distributed Queue</title>
    <para>Hazelcast distributed queue is an implementation
        of<literal>java.util.concurrent.BlockingQueue</literal>.
        <programlisting language="java"><![CDATA[import com.hazelcast.core.Hazelcast;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.TimeUnit;
import com.hazelcast.config.Config;

Config cfg = new Config();
HazelcastInstance hz = Hazelcast.newHazelcastInstance(cfg);
BlockingQueue<MyTask> q = hz.getQueue("tasks");
q.put(new MyTask());
MyTask task = q.take();

boolean offered = q.offer(new MyTask(), 10, TimeUnit.SECONDS);
task = q.poll (5, TimeUnit.SECONDS);
if (task != null) {
    //process task
}
]]></programlisting>
        If you have 10 million tasks in your "tasks" queue and you are running that
        code over 10 JVMs (or servers), then each server carries 1 million task objects (plus
        backups). FIFO ordering will apply to all queue operations cluster-wide. User objects (such
        as
        <literal>MyTask</literal>
        in the example above), that are (en/de)queued have to
        be<literal>Serializable</literal>. Maximum capacity per JVM and the TTL (Time to Live)
        for a queue can be configured.
        </para>

        <para>
            Distributed queues are backed by distributed maps. Thus,
            queues can have custom backup counts and persistent storage. Hazelcast will generate
            cluster-wide unique id for each element in the queue.
        </para>
        <para>
        Sample configuration:
        <programlisting language="xml"><![CDATA[<hazelcast>
    ...
    <queue name="tasks">
        <!--
            Maximum size of the queue. When a JVM's local queue size reaches the maximum,
            all put/offer operations will get blocked until the queue size
            of the JVM goes down below the maximum.
            Any integer between 0 and Integer.MAX_VALUE. 0 means Integer.MAX_VALUE. Default is 0.
        -->
        <max-size-per-jvm>10000</max-size-per-jvm>
        
        <!--
            Name of the map configuration that will be used for the backing distributed
            map for this queue.
        -->
        <backing-map-ref>queue-map</backing-map-ref>
    </queue>

    <map name="queue-map">

        <backup-count>1</backup-count>

        <map-store enabled="true">

            <class-name>com.your,company.storage.DBMapStore</class-name>

            <write-delay-seconds>0</write-delay-seconds>

        </map-store>

        ...

    </map>
</hazelcast>
]]></programlisting>
        If the backing map has no
        <literal>map-store</literal>
        defined then your
        distributed queue will be in-memory only. If the backing map has a
        <literal>map-store</literal>
        defined then Hazelcast will call your
        <literal>MapStore</literal>
        implementation to persist queue elements. Even if you reboot
        your cluster Hazelcast will rebuild the queue with its content. When implementing a
        <literal>MapStore</literal>
        for the backing map, note that type of the
        <literal>key</literal>
        is always
        <literal>Long</literal>
        and values are the elements you place into the queue. So make
        sure
        <literal>MapStore.loadAllKeys</literal>
        returns
        <literal>Set&lt;Long&gt;</literal>
        for
        instance.
    </para>


    <xi:include href="../WildcardConfigurationLink.xml"/>
</sect1>
