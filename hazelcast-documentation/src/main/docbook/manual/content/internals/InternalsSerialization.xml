<?xml version='1.0' encoding='UTF-8'?>
<!--
  ~ Copyright (c) 2008-2013, Hazelcast, Inc. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<sect1 xml:id="InternalsSerialization" version='5.0' xmlns='http://docbook.org/ns/docbook'
       xmlns:xi="http://www.w3.org/2001/XInclude"
       xmlns:xlink="http://www.w3.org/1999/xlink"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
       http://www.w3.org/1999/xlink http://www.w3.org/1999/xlink.xsd">
    <title>Internals 2: Serialization</title>
    <para>All your distributed objects such as your key and value objects, objects you offer into
        distributed queue and your distributed callable/runnable objects have to
        be<literal>Serializable</literal>.
    </para>
    <para>Hazelcast serializes all your objects into an instance
        of<literal>com.hazelcast.nio.Data</literal>.
        <literal>Data</literal>
        is the binary
        representation of an object. When Hazelcast serializes an object into<literal>Data</literal>,
        it first checks whether the object is an instance of well-known, optimizable object
        such as<literal>String, Long, Integer, byte[], ByteBuffer, Date</literal>. If not, it then checks
        whether the object is an instance
        of<literal>com.hazelcast.nio.DataSerializable</literal>. If not, Hazelcast
        uses standard java serialization to convert the object into binary format. See
        <literal>com.hazelcast.nio.Serializer</literal>
        for details.
    </para>
    <para>So for faster serialization, Hazelcast recommends to use of
        <literal>String, Long,
            Integer, byte[]
        </literal>
        objects or to implement
        <literal>com.hazelcast.nio.DataSerializable</literal>
        interface. Here is an
        example of a class implementing
        <literal>com.hazelcast.nio.DataSerializable</literal>
        interface.
        <programlisting language="java"><![CDATA[public class Address implements com.hazelcast.nio.DataSerializable {
    private String street;
    private int zipCode;
    private String city;
    private String state;

    public Address() {}

    //getters setters..

    public void writeData(DataOutput out) throws IOException {
        out.writeUTF(street);
        out.writeInt(zipCode);
        out.writeUTF(city);
        out.writeUTF(state);
    }

    public void readData (DataInput in) throws IOException {
        street    = in.readUTF();
        zipCode = in.readInt();
        city    = in.readUTF();
        state    = in.readUTF();
    }
}
]]></programlisting>
        Lets take a look at another example which is encapsulating a
        <literal>DataSerializable</literal>
        field.<programlisting language="java"><![CDATA[public class Employee implements com.hazelcast.nio.DataSerializable {
    private String firstName;
    private String lastName;
    private int age;
    private double salary;
    private Address address; //address itself is DataSerializable

    public Employee() {}

    //getters setters..

    public void writeData(DataOutput out) throws IOException {
        out.writeUTF(firstName);
        out.writeUTF(lastName);
        out.writeInt(age);
        out.writeDouble (salary);
        address.writeData (out);
    }

    public void readData (DataInput in) throws IOException {
        firstName = in.readUTF();
        lastName  = in.readUTF();
        age       = in.readInt();
        salary       = in.readDouble();
        address   = new Address();
        // since Address is DataSerializable let it read its own internal state
        address.readData (in);
    }
}
]]></programlisting>As you can see, since
        <literal>address</literal>
        field itself
        is<literal>DataSerializable</literal>, it is calling
        <literal>address.writeData(out)</literal>
        when writing and
        <literal>address.readData(in)</literal>
        when reading.
    </para>
    <para>
        <emphasis role="bold">Caution:</emphasis>
        Hazelcast serialization is done on the user
        thread and it assumes that there will be only one object serialization at a time. So
        putting any Hazelcast operation that will require to serialize anything else will
        break the serialization. For Example: Putting<programlisting language="java"><![CDATA[Hazelcast.getMap("anyMap").put("key", "dummy value");
]]></programlisting>line in readData or writeData methods will break the serialization. If you have
        to perform such an operation, at least it should be performed in another thread
        which will force the serialization to take on different thread.
    </para>
</sect1>
