<?xml version='1.0' encoding='UTF-8'?>
<!--
  ~ Copyright (c) 2008-2012, Hazel Bilisim Ltd. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<sect1 xml:id="DistributedExecution" version='5.0' xmlns='http://docbook.org/ns/docbook'
       xmlns:xi="http://www.w3.org/2001/XInclude"
       xmlns:xlink="http://www.w3.org/1999/xlink"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
       http://www.w3.org/1999/xlink http://www.w3.org/1999/xlink.xsd">
    <title>Distributed Execution</title>
    <para>Distributed executor service is a distributed implementation of java.util.concurrent.ExecutorService.
        It allows you to execute your code in cluster. In this chapter, all the code samples are based on the Echo class
        above.
        Please note that Echo class is
        <literal>Serializable</literal>
        .
        You can ask Hazelcast to execute your code (<literal>Runnable, Callable</literal>):
        <itemizedlist>
            <listitem>
                <para>on a specific cluster member you choose.
                </para>
            </listitem>
            <listitem>
                <para>on the member owning the key you choose.
                </para>
            </listitem>
            <listitem>
                <para>on the member Hazelcast will pick.
                </para>
            </listitem>
            <listitem>
                <para>on all or subset of the cluster members.
                </para>
            </listitem>
        </itemizedlist>
        <programlisting language="java"><![CDATA[import com.hazelcast.core.Member;
import com.hazelcast.core.Hazelcast;
import com.hazelcast.core.MultiTask;
import com.hazelcast.core.DistributedTask;
import java.util.concurrent.ExecutorService;   
import java.util.concurrent.FutureTask;   
import java.util.concurrent.Future;   
import java.util.Set;
import com.hazelcast.config.Config;


public void echoOnTheMember(String input, Member member) throws Exception {
   FutureTask<String> task = new DistributedTask<String>(new Echo(input), member);
   Config cfg = new Config();
   HazelcastInstance hz = Hazelcast.newHazelcastInstance(cfg);
   ExecutorService executorService = hz.getExecutorService();
   executorService.execute(task);
   String echoResult = task.get();
}

public void echoOnTheMemberOwningTheKey(String input, Object key) throws Exception {
   FutureTask<String> task = new DistributedTask<String>(new Echo(input), key);
   Config cfg = new Config();
   HazelcastInstance hz = Hazelcast.newHazelcastInstance(cfg);
   ExecutorService executorService = hz.getExecutorService();
   executorService.execute(task);
   String echoResult = task.get();
}

public void echoOnSomewhere(String input) throws Exception { 
   Config cfg = new Config();
   HazelcastInstance hz = Hazelcast.newHazelcastInstance(cfg);
   ExecutorService executorService = hz.getExecutorService();
   Future<String> task = executorService.submit(new Echo(input));
   String echoResult = task.get();
}

public void echoOnMembers(String input, Set<Member> members) throws Exception {
   Config cfg = new Config();
   HazelcastInstance hz = Hazelcast.newHazelcastInstance(cfg);
   MultiTask<String> task = new MultiTask<String>(new Echo(input), members);
   ExecutorService executorService = hz.getExecutorService();
   executorService.execute(task);
   Collection<String> results = task.get();
} 
]]></programlisting>
        Note that you can obtain the set of cluster members via
        <literal>Hazelcast.getCluster().getMembers()</literal>
        call.
        You can also extend the
        <literal>MultiTask</literal>
        class to override
        <literal>set(V result), setException(Throwable exception), done()</literal>
        methods for custom behaviour.
        Just like
        <literal>java.util.concurrent.FutureTask.get() , MultiTask.get()</literal>
        will throw
        <literal>java.util.concurrent.ExecutionException</literal>
        if any of the executions throws exception.

    </para>
</sect1>
