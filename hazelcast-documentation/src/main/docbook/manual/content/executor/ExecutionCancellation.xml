<?xml version='1.0' encoding='UTF-8'?>
<!--
  ~ Copyright (c) 2008-2013, Hazelcast, Inc. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<sect1 xml:id="ExecutionCancellation" version='5.0' xmlns='http://docbook.org/ns/docbook'
       xmlns:xi="http://www.w3.org/2001/XInclude"
       xmlns:xlink="http://www.w3.org/1999/xlink"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
       http://www.w3.org/1999/xlink http://www.w3.org/1999/xlink.xsd">
    <title>Execution Cancellation</title>
    <para>What if the code you execute in cluster takes longer than acceptable. If you cannot
        stop/cancel that task it will keep eating your resources. Standard Java executor framework
        solves this problem with by introducing
        <literal>cancel()</literal>
        api and 'encouraging' us
        to code and design for cancellations, which is highly ignored part of software development.
        <programlisting language="java"><![CDATA[public class Fibonacci implements Callable<Long>, Serializable {
    int input = 0; 

    public Fibonacci() { 
    } 

    public Fibonacci(int input) { 
        this.input = input;
    } 

    public Long call() {
        return calculate (input);
    }

    private long calculate (int n) {
        if (Thread.currentThread().isInterrupted()) return 0;
        if (n <= 1) return n;
        else return calculate(n-1) + calculate(n-2);
    }
}
]]></programlisting>
        The callable class above calculates the fibonacci number for a given number. In
        the calculate method, we are checking to see if the current thread is interrupted so that
        code can be responsive to cancellations once the execution started. Following
        <literal>fib()</literal>
        method submits the Fibonacci calculation task for number 'n'
        and waits maximum 3 seconds for result. If the execution doesn't complete in 3 seconds,
        <literal>future.get()</literal>
        will throw
        <literal>TimeoutException</literal>
        and upon
        catching it we interruptibly cancel the execution for saving some CPU cycles.
        <programlisting language="java"><![CDATA[long fib(int n) throws Exception {
    Config cfg = new Config();
    HazelcastInstance hz = Hazelcast.newHazelcastInstance(cfg);
    ExecutorService es = hz.getExecutorService();
    Future future = es.submit(new Fibonacci(n));  
    try {
        return future.get(3, TimeUnit.SECONDS);
    } catch (TimeoutException e) {
        future.cancel(true);            
    }
    return -1;
}
]]></programlisting>
        <literal>fib(20)</literal>
        will probably will take less than 3 seconds but
        <literal>fib(50)</literal>
        will take
        way longer. (This is not the example for writing better fibonacci calculation code but for
        showing how to cancel a running execution that takes too long.)
        <literal>future.cancel(false)</literal>
        can
        only cancel execution before it is running (executing) but
        <literal>future.cancel(true)</literal>
        can
        interrupt running executions if your code is able to handle the interruption. So if you are
        willing to be able to cancel already running task then your task has to be designed to
        handle interruption. If
        <literal>calculate (int n)</literal>
        method didn't have if
        <literal>(Thread.currentThread().isInterrupted())</literal>
        line, then you wouldn't be
        able to cancel the execution after it started.
    </para>
</sect1>
