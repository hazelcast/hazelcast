<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2008-2013, Hazelcast, Inc. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<sect1 xml:id="ClusterLoginModule" version="5.0" xmlns="http://docbook.org/ns/docbook"
       xmlns:xi="http://www.w3.org/2001/XInclude"
       xmlns:xlink="http://www.w3.org/1999/xlink"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
       http://www.w3.org/1999/xlink http://www.w3.org/1999/xlink.xsd">
    <title>ClusterLoginModule</title>
    <para>All security attributes are carried in
        <literal>Credentials</literal>
        object and
        <literal>Credentials</literal>
        is used by
        <link
                xlink:href="http://download.oracle.com/javase/1.5.0/docs/api/javax/security/auth/spi/LoginModule.html"
                >
            <literal>LoginModule</literal>
        </link>
        s during authentication process. Accessing
        user supplied attributes from
        <link
                xlink:href="http://download.oracle.com/javase/1.5.0/docs/api/javax/security/auth/spi/LoginModule.html"
                >
            <literal>LoginModule</literal>
        </link>
        s is done by
        <link
                xlink:href="http://download.oracle.com/javase/1.5.0/docs/api/javax/security/auth/callback/CallbackHandler.html"
                >
            <literal>CallbackHandler</literal>
        </link>
        s. To provide access to
        <literal>Credentials</literal>
        object, Hazelcast uses its own specialized
        <literal>CallbackHandler</literal>. During initialization of
        <literal>LoginModule</literal>s Hazelcast will pass this special
        <literal>CallbackHandler</literal>into
        <code>LoginModule.initialize()</code>
        method.
    </para>
    <para>
        <literal>LoginModule</literal>
        implementations should create an instance of
        <literal>com.hazelcast.security.CredentialsCallback</literal>
        and call
        <code>handle(Callback[] callbacks)</code>
        method of
        <literal>CallbackHandler</literal>
        during login process.
        <code>CredentialsCallback.getCredentials()</code>
        will return supplied
        <literal>Credentials</literal>
        object.
        <programlisting language="java"><![CDATA[
public class CustomLoginModule implements LoginModule {
    CallbackHandler callbackHandler;
    Subject subject;

    public final void initialize(Subject subject, CallbackHandler callbackHandler,
        Map<String, ?> sharedState, Map<String, ?> options) {
        this.subject = subject;
        this.callbackHandler = callbackHandler;
    }

    public final boolean login() throws LoginException {
        CredentialsCallback callback = new CredentialsCallback();
        try {
            callbackHandler.handle(new Callback[]{callback});
            credentials = cb.getCredentials();
        } catch (Exception e) {
            throw new LoginException(e.getMessage());
        }
        ...
    }
...
}
]]></programlisting>
    </para>
    <para>* To use default Hazelcast permission policy, an instance of
        <code>com.hazelcast.security.ClusterPrincipal</code>
        that holding
        <literal>Credentials</literal>
        object must be created and added to
        <code>Subject.principals</code>
        on<code>LoginModule.commit()</code>.
        <programlisting language="java"><![CDATA[
public class MyCustomLoginModule implements LoginModule {
...
    public boolean commit() throws LoginException {
        ...
        final Principal principal = new ClusterPrincipal(credentials);
        subject.getPrincipals().add(principal);
        
        return true;
    }
    ...
}
]]></programlisting>
    </para>

    <para>Hazelcast also has an abstract implementation of
        <literal>LoginModule</literal>
        that does
        callback and cleanup operations and holds resulting
        <literal>Credentials</literal>
        instance.
        <literal>LoginModule</literal>s extending
        <literal>ClusterLoginModule</literal>
        can access<literal>Credentials</literal>,
        <literal>Subject</literal>,
        <literal>LoginModule</literal>
        instances and
        <code>options</code>
        and
        <code>sharedState</code>
        maps. Extending
        <literal>ClusterLoginModule</literal>
        is recommended instead of implementing all required stuff.
        <programlisting language="java"><![CDATA[
package com.hazelcast.security;
...
public abstract class ClusterLoginModule implements LoginModule {

    protected abstract boolean onLogin() throws LoginException;
    protected abstract boolean onCommit() throws LoginException;
    protected abstract boolean onAbort() throws LoginException;
    protected abstract boolean onLogout() throws LoginException;

}
]]></programlisting>
    </para>

</sect1>
