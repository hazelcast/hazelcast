<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2008-2012, Hazel Bilisim Ltd. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<sect1 xml:id="MemberSecurity" version="5.0"
       xmlns="http://docbook.org/ns/docbook"
        >
    <title>Cluster Member Security</title>
    <para>Hazelcast supports standard Java Security (JAAS) based authentication between cluster
        members. You should configure one or more<code>LoginModule</code>s and an instance of
        <literal>com.hazelcast.security.ICredentialsFactory</literal>. Although Hazelcast has
        default implementations using cluster group and group-password and
        <literal>UsernamePasswordCredentials</literal>
        on authentication, it is advised to
        implement these according to specific needs and environment.
        <programlisting language="xml"><![CDATA[
<security enabled="true">
    <member-credentials-factory class-name="com.hazelcast.examples.MyCredentialsFactory">
        <properties>
            <property name="property1">value1</property>
            <property name="property2">value2</property>
        </properties>
    </member-credentials-factory>
    <member-login-modules>
        <login-module class-name="com.hazelcast.examples.MyRequiredLoginModule" usage="required">
            <properties>
                <property name="property3">value3</property>
            </properties>
        </login-module>
        <login-module class-name="com.hazelcast.examples.MySufficientLoginModule" usage="sufficient">
            <properties>
                <property name="property4">value4</property>
            </properties>
        </login-module>
        <login-module class-name="com.hazelcast.examples.MyOptionalLoginModule" usage="optional">
            <properties>
                <property name="property5">value5</property>
            </properties>
        </login-module>
    </member-login-modules>
    ...
</security>
]]></programlisting>
        You can define as many as<literal>LoginModule</literal>s you wanted in
        configuration. Those are executed in given order. Usage attribute has 4 values; 'required',
        'requisite', 'sufficient' and 'optional' as defined in
        <code>javax.security.auth.login.AppConfigurationEntry.LoginModuleControlFlag</code>.
    </para>

    <para>
        <programlisting language="java"><![CDATA[
package com.hazelcast.security;
/**
 * ICredentialsFactory is used to create Credentials objects to be used
 * during node authentication before connection accepted by master node.
 */
public interface ICredentialsFactory {

    void configure(GroupConfig groupConfig, Properties properties);

    Credentials newCredentials();

    void destroy();
}
]]></programlisting>
    </para>
    <para>
        Properties defined in configuration are passed to
        <code>ICredentialsFactory.configure()</code>
        method as
        <code>java.util.Properties</code>
        and to
        <code>LoginModule.initialize()</code>
        method as<code>java.util.Map</code>.
    </para>
</sect1>
