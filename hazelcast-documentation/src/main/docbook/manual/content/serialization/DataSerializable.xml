<?xml version='1.0' encoding='UTF-8'?>
<!--
  ~ Copyright (c) 2008-2013, Hazelcast, Inc. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<sect1 xml:id="DataSerializable" version='5.0' xmlns='http://docbook.org/ns/docbook'
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">
    <title>Data Serializable</title>

    <para>
        For a faster serialization of objects, Hazelcast recommends to implement
        <literal>com.hazelcast.nio.serialization.IdentifiedDataSerializable</literal>
        which is slightly better
        version of
        <literal>com.hazelcast.nio.serialization.DataSerializable</literal>.
        <para>
            Here is an example of a class implementing
            <literal>com.hazelcast.nio.serialization.DataSerializable</literal>
            interface.
            <programlisting language="java"><![CDATA[public class Address implements com.hazelcast.nio.serialization.DataSerializable {
    private String street;
    private int zipCode;
    private String city;
    private String state;

    public Address() {}

    //getters setters..

    public void writeData(ObjectDataOutput out) throws IOException {
        out.writeUTF(street);
        out.writeInt(zipCode);
        out.writeUTF(city);
        out.writeUTF(state);
    }

    public void readData(ObjectDataInput in) throws IOException {
        street    = in.readUTF();
        zipCode = in.readInt();
        city    = in.readUTF();
        state    = in.readUTF();
    }
}
]]></programlisting>
        </para>
        Lets take a look at another example which is encapsulating a
        <literal>DataSerializable</literal>
        field.<programlisting language="java"><![CDATA[public class Employee implements com.hazelcast.nio.serialization.DataSerializable {
    private String firstName;
    private String lastName;
    private int age;
    private double salary;
    private Address address; //address itself is DataSerializable

    public Employee() {}

    //getters setters..

    public void writeData(ObjectDataOutput out) throws IOException {
        out.writeUTF(firstName);
        out.writeUTF(lastName);
        out.writeInt(age);
        out.writeDouble (salary);
        address.writeData (out);
    }

    public void readData (ObjectDataInput in) throws IOException {
        firstName = in.readUTF();
        lastName  = in.readUTF();
        age       = in.readInt();
        salary       = in.readDouble();
        address   = new Address();
        // since Address is DataSerializable let it read its own internal state
        address.readData (in);
    }
}
]]></programlisting>As you can see, since
        <literal>address</literal>
        field itself
        is<literal>DataSerializable</literal>, it is calling
        <literal>address.writeData(out)</literal>
        when writing and
        <literal>address.readData(in)</literal>
        when reading. Also note that the order of writing and reading fields should be the same.
        While Hazelcast serializes a DataSerializable it writes the className first and when de-serializes it,
        className is used to instantiate the object using reflection.


        <emphasis role="bold">IdentifiedDataSerializable</emphasis>

        To avoid the reflection and long class names
        <literal>IdentifiedDataSerializable</literal>
        can be used instead of<literal>DataSerializable</literal>. Note that
        <literal>IdentifiedDataSerializable</literal>
        extends
        <literal>DataSerializable</literal>
        and introduces two new methods.

        <itemizedlist>
            <listitem>
                int getId();
            </listitem>
            <listitem>
                int getFactoryId();
            </listitem>
        </itemizedlist>

        IdentifiedDataSerializable uses
        <literal>getId()</literal>
        instead of className and uses getFactoryId()
        to load the class given the Id.
        To complete the implementation a
        <literal>com.hazelcast.nio.serialization.DataSerializableFactory</literal>
        should also be implemented and registered into
        <literal>SerializationConfig</literal>
        which can be accessed from
        <literal>Config.getSerializationConfig()</literal>. The Factories responsibility is to return an instance of
        the right
        <literal>IdentifiedDataSerializable</literal>
        object, given the id. So far this is the most efficient
        way of Serialization that Hazelcast supports of the shelf.

    </para>
</sect1>
