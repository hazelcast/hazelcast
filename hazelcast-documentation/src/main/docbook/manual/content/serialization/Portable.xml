<?xml version='1.0' encoding='UTF-8'?>
<!--
  ~ Copyright (c) 2008-2013, Hazelcast, Inc. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<sect1 xml:id="PortableSerialization" version='5.0' xmlns='http://docbook.org/ns/docbook'
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">
    <title>Portable Serialization</title>
    <para>
        As an alternative to the existing serialization methods, Hazelcast offers a Portable serialization that have
        the following advantages

        <itemizedlist>
            <listitem>
                Support multiversion of the same object type.
            </listitem>
            <listitem>
                Fetching individual fields without having to rely on reflection
            </listitem>
            <listitem>
                Querying and indexing support without de-serialization and/or reflection
            </listitem>
        </itemizedlist>

        <para>
            In order to support these features, a serialized Portable object contains meta information like the version
            and
            the concrete location of the each field in the binary data. This way Hazelcast is able to navigate in the
            byte[]
            and de-serialize only the required field without actually de-serializing the whole object which improves
            the Query performance.
        </para>
        <para>
            With multiversion support, you can have two nodes where each of them having different versions of the same
            Object and Hazelcast will store both meta information and use the correct one to serialize and de-serialize
            Portable objects depending on the node. This is very helpful when you are doing a rolling upgrade without
            shutting down the cluster.
        </para>
        <para>
            Also note that Portable serialization is totally language independent and is used as
            the binary protocol between Hazelcast server and clients.
        </para>
        <para>
            A sample Portable implementation of a Foo class will look like the following.

            <programlisting language="java"><![CDATA[
public class Foo implements Portable{
    final static int ID = 5;

    private String foo;

    public String getFoo() {
        return foo;
    }

    public void setFoo(String foo) {
        this.foo = foo;
    }

    @Override
    public int getFactoryId() {
        return 1;
    }

    @Override
    public int getClassId() {
        return ID;
    }

    @Override
    public void writePortable(PortableWriter writer) throws IOException {
        writer.writeUTF("foo", foo);
    }

    @Override
    public void readPortable(PortableReader reader) throws IOException {
        foo = reader.readUTF("foo");
    }
}
        ]]></programlisting>
        </para>
        <para>
            Similar to
            <literal>IdentifiedDataSerializable</literal>,
            a Portable Class must provide
            <literal>classId</literal>
            and<literal>factoryId</literal>. The Factory object will be used to create
            the Portable object given the <literal>classId</literal>.
        </para>

        <para>

            A sample
            <literal>Factory</literal>
            could be implemented as following:
            <programlisting language="java"><![CDATA[
public class MyPortableFactory implements PortableFactory {

    @Override
    public Portable create(int classId) {
        if (Foo.ID == classId)
            return new Foo();
        else return null;
     }
}
            ]]></programlisting>

            The last step is to register the
            <literal>Factory</literal>
            to the <literal>SerializationConfig</literal>.

            <para>
                Programmatic Configuration
                <programlisting language="java"><![CDATA[
Config config = new Config();
config.getSerializationConfig().addPortableFactory(1, new MyPortableFactory());
                ]]></programlisting>
            </para>

            <para>
                XML Configuration
                <programlisting language="java"><![CDATA[
<hazelcast>
    <serialization>
        <portable-version>0</portable-version>
        <portable-factories>
            <portable-factory factory-id="1">com.hazelcast.nio.serialization.MyPortableFactory</portable-factory>
        </portable-factories>
    </serialization>
</hazelcast>
                ]]></programlisting>
            </para>

            Note that the <literal>id</literal> that is passed to the
            <literal>SerializationConfig</literal>
            is same as the
            <literal>factoryId</literal>
            that
            <literal>Foo</literal>
            class returns.
        </para>

        <para>
            TODO: ClassDefinitionBuilder...
        </para>
    </para>
</sect1>
