<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2008-2018, Hazelcast, Inc. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:s="http://www.hazelcast.com/schema/sample"
       xmlns:hz="http://www.hazelcast.com/schema/spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.hazelcast.com/schema/sample
        hazelcast-sample-service.xsd
        http://www.hazelcast.com/schema/spring
        http://www.hazelcast.com/schema/spring/hazelcast-spring.xsd">

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
          p:systemPropertiesModeName="SYSTEM_PROPERTIES_MODE_OVERRIDE">
        <property name="locations">
            <list>
                <value>classpath:/hazelcast-default.properties</value>
            </list>
        </property>
    </bean>

    <hz:hazelcast id="instance">
        <hz:config>
            <hz:instance-name>test-instance</hz:instance-name>
            <hz:group
                    name="${cluster.group.name}"
                    password="${cluster.group.password}"/>
            <hz:license-key>HAZELCAST_ENTERPRISE_LICENSE_KEY</hz:license-key>
            <hz:management-center enabled="true" update-interval="2">
                <hz:url>myserver:80</hz:url>
                <hz:mutual-auth enabled="true">
                    <hz:factory-class-name>who.let.the.cat.out.class</hz:factory-class-name>
                    <hz:properties>
                        <hz:property name="bool">ean</hz:property>
                    </hz:properties>
                </hz:mutual-auth>
            </hz:management-center>

            <hz:properties>
                <hz:property name="hazelcast.merge.first.run.delay.seconds">5</hz:property>
                <hz:property name="hazelcast.merge.next.run.delay.seconds">5</hz:property>
                <hz:property name="hazelcast.partition.count">277</hz:property>
            </hz:properties>
            <hz:wan-replication name="testWan">
                <hz:wan-publisher group-name="tokyo" class-name="com.hazelcast.enterprise.wan.replication.WanBatchReplication">
                    <hz:queue-full-behavior>THROW_EXCEPTION</hz:queue-full-behavior>
                    <hz:queue-capacity>1000</hz:queue-capacity>
                    <hz:properties>
                        <hz:property name="batch.size">50</hz:property>
                        <hz:property name="batch.max.delay.millis">3000</hz:property>
                        <hz:property name="snapshot.enabled">false</hz:property>
                        <hz:property name="response.timeout.millis">5000</hz:property>
                        <hz:property name="ack.type">ACK_ON_OPERATION_COMPLETE</hz:property>
                        <hz:property name="endpoints">10.3.5.1:5701, 10.3.5.2:5701</hz:property>
                        <hz:property name="snapshot.enabled">false</hz:property>
                        <hz:property name="group.password">pass</hz:property>
                    </hz:properties>
                </hz:wan-publisher>
                <hz:wan-publisher group-name="istanbul" class-name="com.hazelcast.wan.custom.CustomPublisher">
                    <hz:queue-full-behavior>THROW_EXCEPTION_ONLY_IF_REPLICATION_ACTIVE</hz:queue-full-behavior>
                    <hz:aws enabled="false"
                            access-key="sample-access-key"
                            secret-key="sample-secret-key"
                            region="sample-region"
                            host-header="sample-header"
                            security-group-name="sample-group"
                            tag-key="sample-tag-key"
                            tag-value="sample-tag-value"
                            iam-role="sample-role"/>
                    <hz:discovery-strategies>
                        <hz:node-filter implementation="dummyNodeFilter"/>
                        <hz:discovery-strategy discovery-strategy-factory="dummyDiscoveryStrategyFactory">
                            <hz:properties>
                                <hz:property name="key-string">foo</hz:property>
                                <hz:property name="key-int">123</hz:property>
                                <hz:property name="key-boolean">true</hz:property>
                            </hz:properties>
                        </hz:discovery-strategy>
                        <hz:discovery-strategy class-name="com.hazelcast.spring.DummyDiscoveryStrategy">
                            <hz:properties>
                                <hz:property name="key-string">foo2</hz:property>
                            </hz:properties>
                        </hz:discovery-strategy>
                        <hz:discovery-service-provider implementation="dummyDiscoveryServiceProvider"/>
                    </hz:discovery-strategies>
                    <hz:properties>
                        <hz:property name="custom.prop.publisher">prop.publisher</hz:property>
                        <hz:property name="discovery.period">5</hz:property>
                        <hz:property name="maxEndpoints">2</hz:property>
                    </hz:properties>
                </hz:wan-publisher>
                <hz:wan-publisher group-name="ankara" class-name="com.hazelcast.enterprise.wan.replication.WanBatchReplication">
                    <hz:queue-capacity>${wan.queue.capacity}</hz:queue-capacity>
                </hz:wan-publisher>
                <hz:wan-consumer class-name="com.hazelcast.wan.custom.WanConsumer">
                    <hz:properties>
                        <hz:property name="custom.prop.consumer">prop.consumer</hz:property>
                    </hz:properties>
                </hz:wan-consumer>
            </hz:wan-replication>
            <hz:wan-replication name="testWan2">
                <hz:wan-consumer implementation="wanConsumer"/>
            </hz:wan-replication>
            <hz:network port="${cluster.port}" port-auto-increment="false" port-count="42">
                <hz:outbound-ports>
                    <hz:ports>35000-35100</hz:ports>
                    <hz:ports>36000,36100</hz:ports>
                </hz:outbound-ports>
                <hz:join>
                    <hz:multicast enabled="${boolean.false}" multicast-group="224.2.2.3" multicast-port="54327"
                                  multicast-time-to-live="16" multicast-timeout-seconds="8" loopback-mode-enabled="false">
                        <hz:trusted-interfaces>
                            <hz:interface>10.10.10.*</hz:interface>
                        </hz:trusted-interfaces>
                    </hz:multicast>
                    <hz:tcp-ip enabled="${boolean.true}">
                        <hz:required-member>127.0.0.1:5700</hz:required-member>
                        <!--                         <hz:members>${cluster.members}</hz:members> -->
                        <hz:interface>127.0.0.1:5700</hz:interface>
                        <hz:interface>127.0.0.1:5701</hz:interface>
                    </hz:tcp-ip>
                    <hz:aws enabled="false"
                            access-key="sample-access-key"
                            secret-key="sample-secret-key"
                            region="sample-region"
                            host-header="sample-header"
                            security-group-name="sample-group"
                            tag-key="sample-tag-key"
                            tag-value="sample-tag-value"
                            iam-role="sample-role"/>
                    <hz:discovery-strategies>
                        <hz:node-filter implementation="dummyNodeFilter"/>
                        <hz:discovery-strategy discovery-strategy-factory="dummyDiscoveryStrategyFactory">
                            <hz:properties>
                                <hz:property name="key-string">foo</hz:property>
                                <hz:property name="key-int">123</hz:property>
                                <hz:property name="key-boolean">true</hz:property>
                            </hz:properties>
                        </hz:discovery-strategy>
                        <hz:discovery-strategy class-name="com.hazelcast.spring.DummyDiscoveryStrategy">
                            <hz:properties>
                                <hz:property name="key-string">foo2</hz:property>
                            </hz:properties>
                        </hz:discovery-strategy>
                        <hz:discovery-service-provider implementation="dummyDiscoveryServiceProvider"/>
                    </hz:discovery-strategies>
                </hz:join>
                <hz:interfaces enabled="false">
                    <hz:interface>10.10.1.*</hz:interface>
                </hz:interfaces>


                <hz:ssl enabled="false" factory-class-name="com.hazelcast.spring.DummySSLContextFactory"
                        factory-implementation="dummySSLContextFactory"/>
                <hz:socket-interceptor enabled="false" class-name="com.hazelcast.spring.DummySocketInterceptor"
                                       implementation="dummySocketInterceptor"/>
                <hz:symmetric-encryption enabled="false"
                                         algorithm="PBEWithMD5AndDES"
                                         salt="thesalt"
                                         password="thepass"
                                         iteration-count="19"/>
                <hz:reuse-address>true</hz:reuse-address>
                <hz:member-address-provider enabled="false" class-name="com.hazelcast.spring.DummyMemberAddressProvider">
                    <hz:properties>
                        <hz:property name="dummy.property">value</hz:property>
                        <hz:property name="dummy.property.2">value2</hz:property>
                    </hz:properties>
                </hz:member-address-provider>
                <hz:failure-detector>
                    <hz:icmp enabled="false">
                        <hz:fail-fast-on-startup>true</hz:fail-fast-on-startup>
                        <hz:interval-milliseconds>1002</hz:interval-milliseconds>
                        <hz:max-attempts>2</hz:max-attempts>
                        <hz:parallel-mode>true</hz:parallel-mode>
                        <hz:timeout-milliseconds>500</hz:timeout-milliseconds>
                        <hz:ttl>1</hz:ttl>
                    </hz:icmp>
                </hz:failure-detector>
            </hz:network>
            <hz:partition-group enabled="true" group-type="CUSTOM">
                <hz:member-group>
                    <hz:interface>127.0.0.1</hz:interface>
                    <hz:interface>127.0.0.2</hz:interface>
                </hz:member-group>
                <hz:member-group>
                    <hz:interface>127.0.0.3</hz:interface>
                    <hz:interface>127.0.0.4</hz:interface>
                </hz:member-group>
            </hz:partition-group>
            <hz:executor-service name="testExec"
                                 pool-size="2"
                                 queue-capacity="100">
                <hz:quorum-ref>my-quorum</hz:quorum-ref>
            </hz:executor-service>
            <hz:executor-service name="testExec2"
                                 pool-size="5"
                                 queue-capacity="300"
                                 statistics-enabled="false"
            />
            <hz:durable-executor-service name="durableExec"
                                         pool-size="10"
                                         durability="5"
                                         capacity="200">
                <hz:quorum-ref>my-quorum</hz:quorum-ref>
            </hz:durable-executor-service>

            <hz:scheduled-executor-service name="scheduledExec"
                                           pool-size="10"
                                           durability="5">
                <hz:quorum-ref>my-quorum</hz:quorum-ref>
                <hz:merge-policy batch-size="101">PassThroughMergePolicy</hz:merge-policy>
            </hz:scheduled-executor-service>

            <hz:cardinality-estimator name="estimator">
                <hz:quorum-ref>my-quorum</hz:quorum-ref>
                <hz:backup-count>4</hz:backup-count>
                <hz:merge-policy batch-size="44">DiscardMergePolicy</hz:merge-policy>

            </hz:cardinality-estimator>

            <hz:queue name="testQ" max-size="1000">
                <hz:item-listeners>
                    <hz:item-listener class-name="com.hazelcast.spring.DummyItemListener" include-value="true"/>
                </hz:item-listeners>
            </hz:queue>
            <hz:queue name="queueWithSplitBrainConfig"
                      max-size="2500"
                      backup-count="1"
                      async-backup-count="1"
                      statistics-enabled="false"
                      empty-queue-ttl="100">
                <hz:quorum-ref>my-quorum</hz:quorum-ref>
                <hz:merge-policy batch-size="2342">DiscardMergePolicy</hz:merge-policy>
            </hz:queue>
            <hz:queue name="queueWithStore1">
                <hz:queue-store enabled="true" class-name="com.hazelcast.spring.DummyQueueStore"/>
            </hz:queue>
            <hz:queue name="queueWithStore2">
                <hz:queue-store enabled="true" factory-class-name="com.hazelcast.spring.DummyQueueStoreFactory"/>
            </hz:queue>
            <hz:queue name="queueWithStore3">
                <hz:queue-store enabled="true" store-implementation="dummyQueueStore"/>
            </hz:queue>
            <hz:queue name="queueWithStore4">
                <hz:queue-store enabled="true" factory-implementation="dummyQueueStoreFactory"/>
            </hz:queue>

            <hz:lock name="lock">
                <hz:quorum-ref>my-quorum</hz:quorum-ref>
            </hz:lock>

            <hz:ringbuffer name="testRingbuffer"
                           in-memory-format="OBJECT"
                           capacity="100"
                           backup-count="1"
                           async-backup-count="1"
                           time-to-live-seconds="20">
                <hz:ringbuffer-store enabled="true" class-name="com.hazelcast.spring.DummyRingbufferStore"/>
                <hz:quorum-ref>my-quorum</hz:quorum-ref>
                <hz:merge-policy batch-size="2342">PassThroughMergePolicy</hz:merge-policy>
            </hz:ringbuffer>

            <hz:ringbuffer name="testRingbuffer2">
                <hz:ringbuffer-store enabled="true" factory-class-name="com.hazelcast.spring.DummyRingbufferStoreFactory">
                    <hz:properties>
                        <hz:property name="dummy.property">value</hz:property>
                        <hz:property name="dummy.property.2">value2</hz:property>
                    </hz:properties>
                </hz:ringbuffer-store>
            </hz:ringbuffer>

            <hz:ringbuffer name="testRingbuffer3">
                <hz:ringbuffer-store enabled="true" implementation="dummyRingbufferStore"/>
            </hz:ringbuffer>

            <hz:ringbuffer name="testRingbuffer4">
                <hz:ringbuffer-store enabled="true" factory-implementation="dummyRingbufferStoreFactory"/>
            </hz:ringbuffer>

            <hz:atomic-long name="testAtomicLong">
                <hz:quorum-ref>my-quorum</hz:quorum-ref>
                <hz:merge-policy batch-size="2342">DiscardMergePolicy</hz:merge-policy>
            </hz:atomic-long>

            <hz:atomic-reference name="testAtomicReference">
                <hz:quorum-ref>my-quorum</hz:quorum-ref>
                <hz:merge-policy batch-size="4223">PassThroughMergePolicy</hz:merge-policy>
            </hz:atomic-reference>

            <hz:count-down-latch name="testCountDownLatch">
                <hz:quorum-ref>my-quorum</hz:quorum-ref>
            </hz:count-down-latch>

            <hz:semaphore name="testSemaphore" async-backup-count="1" backup-count="1" initial-permits="10">
                <hz:quorum-ref>my-quorum</hz:quorum-ref>
            </hz:semaphore>

            <hz:reliable-topic name="testReliableTopic" topic-overload-policy="BLOCK" read-batch-size="10"
                               statistics-enabled="false">
                <hz:message-listeners>
                    <hz:message-listener class-name="com.hazelcast.spring.DummyMessageListener"/>
                </hz:message-listeners>
            </hz:reliable-topic>

            <hz:map name="testMap"
                    backup-count="2"
                    max-size="0"
                    eviction-percentage="30"
                    min-eviction-check-millis="1000"
                    read-backup-data="true"
                    eviction-policy="NONE"
                    in-memory-format="BINARY">
                <hz:map-store enabled="true" class-name="com.hazelcast.spring.DummyStore" write-delay-seconds="0"
                              initial-mode="EAGER" write-batch-size="10"/>
                <hz:near-cache time-to-live-seconds="0" max-idle-seconds="60" eviction-policy="LRU" max-size="5000"
                               invalidate-on-change="true" serialize-keys="false"/>

                <hz:indexes>
                    <hz:index attribute="name"/>
                    <hz:index attribute="age" ordered="true"/>
                </hz:indexes>
                <hz:attributes>
                    <hz:attribute name="power" extractor="com.car.PowerExtractor"/>
                    <hz:attribute name="weight" extractor="com.car.WeightExtractor"/>
                </hz:attributes>
                <hz:quorum-ref>my-quorum</hz:quorum-ref>
                <hz:merge-policy batch-size="2342">PassThroughMergePolicy</hz:merge-policy>
                <hz:hot-restart enabled="${testMap.hotRestart.enabled}" fsync="${testMap.hotRestart.fsync}"/>
            </hz:map>
            <hz:map name="testMap2"
                    backup-count="2"
                    max-size="1000"
                    max-size-policy="PER_NODE"
                    eviction-percentage="30"
                    read-backup-data="true"
                    eviction-policy="NONE">
                <hz:map-store enabled="true" implementation="dummyMapStore" write-delay-seconds="0"
                              initial-mode="LAZY"/>
                <hz:wan-replication-ref name="testWan" merge-policy="PUT_IF_ABSENT"/>

                <hz:entry-listeners>
                    <hz:entry-listener class-name="com.hazelcast.spring.DummyEntryListener" include-value="true"/>
                    <hz:entry-listener implementation="dummyEntryListener" local="true"/>
                </hz:entry-listeners>
            </hz:map>

            <hz:map name="lfuEvictionMap" eviction-policy="LFU"/>
            <hz:map name="lruEvictionMap" eviction-policy="LRU"/>
            <hz:map name="noneEvictionMap" eviction-policy="NONE"/>
            <hz:map name="randomEvictionMap" eviction-policy="RANDOM"/>

            <hz:map name="lfuNearCacheEvictionMap">
                <hz:near-cache eviction-policy="LFU"/>
            </hz:map>
            <hz:map name="lruNearCacheEvictionMap">
                <hz:near-cache eviction-policy="LRU"/>
            </hz:map>
            <hz:map name="noneNearCacheEvictionMap">
                <hz:near-cache eviction-policy="NONE"/>
            </hz:map>
            <hz:map name="randomNearCacheEvictionMap">
                <hz:near-cache eviction-policy="RANDOM"/>
            </hz:map>

            <hz:map name="testMap3"
                    backup-count="2"
                    max-size="0"
                    max-size-policy="PER_NODE"
                    eviction-percentage="30"
                    read-backup-data="true"
                    eviction-policy="NONE">
                <hz:map-store enabled="true" factory-class-name="com.hazelcast.spring.DummyStoreFactory"
                              write-delay-seconds="0">
                    <hz:properties>
                        <hz:property name="dummy.property">value</hz:property>
                        <hz:property name="dummy.property.2">value2</hz:property>
                    </hz:properties>
                </hz:map-store>
            </hz:map>
            <hz:map name="testMap4"
                    backup-count="2"
                    max-size="0"
                    eviction-percentage="30"
                    read-backup-data="true"
                    eviction-policy="NONE">
                <hz:map-store enabled="true" factory-implementation="dummyMapStoreFactory" write-delay-seconds="0"/>
            </hz:map>
            <hz:map name="map-with-query-cache">
                <hz:query-caches>
                    <hz:query-cache name="my-query-cache-1">
                        <hz:predicate type="sql">__key > 12</hz:predicate>
                        <hz:batch-size>12</hz:batch-size>
                        <hz:buffer-size>33</hz:buffer-size>
                        <hz:coalesce>true</hz:coalesce>
                        <hz:populate>false</hz:populate>
                        <hz:delay-seconds>12</hz:delay-seconds>
                        <hz:entry-listeners>
                            <hz:entry-listener class-name="com.hazelcast.spring.DummyEntryListener"/>
                        </hz:entry-listeners>
                        <hz:eviction eviction-policy="LRU" max-size-policy="ENTRY_COUNT" size="111"/>
                        <hz:in-memory-format>OBJECT</hz:in-memory-format>
                        <hz:include-value>false</hz:include-value>
                        <hz:indexes>
                            <hz:index attribute="name" ordered="false"></hz:index>
                        </hz:indexes>
                    </hz:query-cache>
                </hz:query-caches>
            </hz:map>

            <hz:map name="simpleMap"
                    backup-count="3"
                    async-backup-count="1"
                    time-to-live-seconds="1"
                    max-size="10"
                    eviction-percentage="50"
                    eviction-policy="LRU"/>

            <hz:map name="mapWithOptimizedQueries" optimize-queries="true"/>
            <hz:map name="mapWithNotOptimizedQueries" optimize-queries="false"/>
            <hz:map name="mapWithValueCachingSetToNever" cache-deserialized-values="NEVER"/>
            <hz:map name="mapWithValueCachingSetToAlways" cache-deserialized-values="${map.conf.cache.deserialized.values}"/>
            <hz:map name="mapWithDefaultOptimizedQueries"/>
            <hz:map name="map-with-native-max-size-policy" max-size-policy="USED_NATIVE_MEMORY_PERCENTAGE"
                    in-memory-format="NATIVE"/>

            <hz:map name="mapWithPartitionLostListener">
                <hz:partition-lost-listeners>
                    <hz:partition-lost-listener class-name="DummyMapPartitionLostListenerImpl"/>
                </hz:partition-lost-listeners>
            </hz:map>

            <hz:map name="mapWithPartitionStrategy">
                <hz:partition-strategy>com.hazelcast.spring.DummyPartitionStrategy</hz:partition-strategy>
            </hz:map>

            <hz:map name="mapWithMapEvictionPolicyClassName">
                <hz:map-eviction-policy class-name="com.hazelcast.map.eviction.LRUEvictionPolicy"/>
            </hz:map>

            <hz:map name="mapWithMapEvictionPolicyImpl">
                <hz:map-eviction-policy implementation="dummyMapEvictionPolicy"/>
            </hz:map>

            <hz:map name="mapBothMapEvictionPolicyClassNameAndEvictionPolicy" eviction-policy="LRU">
                <hz:map-eviction-policy class-name="com.hazelcast.map.eviction.LRUEvictionPolicy"/>
            </hz:map>

            <hz:cache name="testCache" disable-per-entry-invalidation-events="true">
                <hz:wan-replication-ref name="testWan" merge-policy="PUT_IF_ABSENT" republishing-enabled="false">
                    <hz:filters>
                        <hz:filter-impl>com.example.SampleFilter</hz:filter-impl>
                    </hz:filters>
                </hz:wan-replication-ref>
                <hz:quorum-ref>my-quorum</hz:quorum-ref>
                <hz:hot-restart enabled="true" fsync="true"/>
            </hz:cache>

            <hz:event-journal map-name="mapName" cache-name="cacheName" enabled="true"
                              capacity="123" time-to-live-seconds="321"/>

            <hz:multimap name="testMultimap" value-collection-type="LIST" binary="false" statistics-enabled="false">
                <hz:entry-listeners>
                    <hz:entry-listener class-name="com.hazelcast.spring.DummyEntryListener" include-value="true"/>
                    <hz:entry-listener implementation="dummyEntryListener" local="true"/>
                </hz:entry-listeners>
                <hz:quorum-ref>my-quorum</hz:quorum-ref>
                <hz:merge-policy batch-size="1234">PassThroughMergePolicy</hz:merge-policy>
            </hz:multimap>

            <hz:list name="testList"
                     max-size="9999"
                     backup-count="1"
                     async-backup-count="1"
                     statistics-enabled="false">
                <hz:quorum-ref>my-quorum</hz:quorum-ref>
                <hz:merge-policy batch-size="2342">DiscardMergePolicy</hz:merge-policy>
            </hz:list>
            <hz:set name="testSet"
                    max-size="7777"
                    backup-count="0"
                    async-backup-count="0"
                    statistics-enabled="false">
                <hz:quorum-ref>my-quorum</hz:quorum-ref>
                <hz:merge-policy batch-size="2342">DiscardMergePolicy</hz:merge-policy>
            </hz:set>

            <hz:topic name="testTopic">
                <hz:statistics-enabled>false</hz:statistics-enabled>
                <hz:global-ordering-enabled>true</hz:global-ordering-enabled>
                <hz:message-listeners>
                    <hz:message-listener class-name="com.hazelcast.spring.DummyMessageListener"/>
                </hz:message-listeners>
            </hz:topic>

            <hz:replicatedmap name="replicatedMap" replication-delay-millis="200" async-fillup="false"
                              concurrency-level="16" statistics-enabled="false" in-memory-format="OBJECT">
                <hz:entry-listeners>
                    <hz:entry-listener class-name="com.hazelcast.spring.DummyEntryListener" include-value="true"/>
                    <hz:entry-listener implementation="dummyEntryListener" local="true"/>
                </hz:entry-listeners>
                <hz:quorum-ref>my-quorum</hz:quorum-ref>
                <hz:merge-policy batch-size="2342">PassThroughMergePolicy</hz:merge-policy>
            </hz:replicatedmap>

            <hz:listeners>
                <hz:listener class-name="com.hazelcast.spring.DummyMembershipListener"/>
                <hz:listener implementation="dummyMembershipListener"/>
            </hz:listeners>

            <hz:serialization allow-unsafe="false"
                              byte-order="BIG_ENDIAN"
                              check-class-def-errors="false"
                              enable-compression="false"
                              enable-shared-object="false"
                              portable-version="13"
                              use-native-byte-order="false">

                <hz:data-serializable-factories>
                    <hz:data-serializable-factory factory-id="1"
                                                  class-name="com.hazelcast.spring.serialization.DummyDataSerializableFactory"/>

                    <hz:data-serializable-factory factory-id="2" implementation="dummyDataSerializableFactory"/>

                </hz:data-serializable-factories>
                <hz:portable-factories>
                    <hz:portable-factory factory-id="1"
                                         class-name="com.hazelcast.spring.serialization.DummyPortableFactory"/>

                    <hz:portable-factory factory-id="2" implementation="dummyPortableFactory"/>
                </hz:portable-factories>
                <hz:serializers>
                    <hz:global-serializer implementation="dummySerializer"/>
                    <hz:serializer type-class="com.hazelcast.spring.serialization.DummySerializableObject1"
                                   class-name="com.hazelcast.spring.serialization.DummySerializer"/>
                    <hz:serializer type-class="com.hazelcast.spring.serialization.DummySerializableObject2"
                                   implementation="dummySerializer"/>
                </hz:serializers>
            </hz:serialization>

            <hz:native-memory enabled="false" allocator-type="POOLED" metadata-space-percentage="10.2"
                              min-block-size="10"
                              page-size="20">
                <hz:size unit="MEGABYTES" value="256"/>
            </hz:native-memory>
            <hz:security>
                <hz:client-permissions>
                    <hz:pn-counter-permission name="pnCounterPermission">
                        <hz:actions>
                            <hz:action>create</hz:action>
                        </hz:actions>
                    </hz:pn-counter-permission>
                </hz:client-permissions>
            </hz:security>

            <hz:member-attributes>
                <hz:attribute name="cluster.group.name">spring-group</hz:attribute>
                <hz:attribute name="cluster.port.int" type="int">5700</hz:attribute>
                <hz:attribute name="cluster.port.long" type="long">5700</hz:attribute>
                <hz:attribute name="cluster.port.short" type="short">5700</hz:attribute>
                <hz:attribute name="attribute.byte" type="byte">111</hz:attribute>
                <hz:attribute name="attribute.boolean" type="boolean">true</hz:attribute>
                <hz:attribute name="attribute.double" type="double">0.0d</hz:attribute>
                <hz:attribute name="attribute.float" type="float">1234.5678</hz:attribute>
            </hz:member-attributes>

            <hz:services>
                <hz:service implementation="dummyService">
                    <hz:name>my-service</hz:name>
                    <hz:class-name>com.hazelcast.spring.MyService</hz:class-name>
                    <hz:properties>
                        <hz:property name="prop1">prop1-value</hz:property>
                        <hz:property name="prop2">prop2-value</hz:property>
                    </hz:properties>
                    <hz:configuration parser="com.hazelcast.spring.MyServiceConfigParser">
                        <s:my-service id="my-service">
                            <s:string-prop>prop1</s:string-prop>
                            <s:int-prop>123</s:int-prop>
                            <s:bool-prop>true</s:bool-prop>
                        </s:my-service>
                    </hz:configuration>
                </hz:service>
            </hz:services>

            <hz:quorum enabled="true" name="my-quorum">
                <hz:quorum-size>2</hz:quorum-size>
                <hz:quorum-type>READ</hz:quorum-type>
                <hz:quorum-function-class-name>com.hazelcast.spring.DummyQuorumFunction</hz:quorum-function-class-name>
                <hz:quorum-listeners>
                    <hz:quorum-listener class-name="com.hazelcast.spring.DummyQuorumListener"/>
                    <hz:quorum-listener implementation="dummyQuorumListener"/>
                </hz:quorum-listeners>
            </hz:quorum>

            <hz:quorum enabled="true" name="probabilistic-quorum">
                <hz:quorum-size>3</hz:quorum-size>
                <hz:quorum-type>READ_WRITE</hz:quorum-type>
                <hz:quorum-listeners>
                    <hz:quorum-listener class-name="com.hazelcast.spring.DummyQuorumListener"/>
                    <hz:quorum-listener implementation="dummyQuorumListener"/>
                </hz:quorum-listeners>
                <hz:probabilistic-quorum suspicion-threshold="11" acceptable-heartbeat-pause-millis="31415" max-sample-size="42"
                                         heartbeat-interval-millis="77123" min-std-deviation-millis="1000" />
            </hz:quorum>

            <hz:quorum enabled="true" name="recently-active-quorum">
                <hz:quorum-size>5</hz:quorum-size>
                <hz:quorum-type>READ_WRITE</hz:quorum-type>
                <hz:recently-active-quorum heartbeat-tolerance-millis="5123"/>
            </hz:quorum>

            <hz:hot-restart-persistence enabled="true"
                                        validation-timeout-seconds="1111"
                                        data-load-timeout-seconds="2222"
                                        cluster-data-recovery-policy="PARTIAL_RECOVERY_MOST_COMPLETE">
                <hz:base-dir>/mnt/hot-restart/</hz:base-dir>
                <hz:backup-dir>/mnt/hot-backup/</hz:backup-dir>
            </hz:hot-restart-persistence>

            <hz:flake-id-generator name="flakeIdGenerator*" prefetchCount="3" prefetchValidityMillis="10" idOffset="20" 
                statistics-enabled="false" />

            <hz:crdt-replication max-concurrent-replication-targets="10" replication-period-millis="2000" />

            <hz:pn-counter name="testPNCounter" statistics-enabled="false">
                <hz:quorum-ref>my-quorum</hz:quorum-ref>
                <hz:replica-count>100</hz:replica-count>
            </hz:pn-counter>
        </hz:config>
    </hz:hazelcast>

    <bean id="dummySerializer" class="com.hazelcast.spring.serialization.DummySerializer"/>
    <bean id="dummyDataSerializableFactory" class="com.hazelcast.spring.serialization.DummyDataSerializableFactory"/>
    <bean id="dummyPortableFactory" class="com.hazelcast.spring.serialization.DummyPortableFactory"/>

    <hz:map id="map1" instance-ref="instance" name="map1"/>
    <hz:map id="map2" instance-ref="instance" name="map2"/>
    <hz:multiMap id="multiMap" instance-ref="instance" name="testMultimap"/>
    <hz:replicatedMap id="replicatedMap" instance-ref="instance" name="replicatedMap"/>
    <hz:queue id="queue" instance-ref="instance" name="testQ"/>
    <hz:topic id="topic" instance-ref="instance" name="testTopic"/>
    <hz:set id="set" instance-ref="instance" name="set"/>
    <hz:list id="list" instance-ref="instance" name="list"/>
    <hz:executorService id="executorService" instance-ref="instance" name="executorService"/>
    <hz:scheduledExecutorService id="scheduledExec" instance-ref="instance" name="scheduledExec"/>
    <hz:durableExecutorService id="durableExec" instance-ref="instance" name="durableExec"/>
    <hz:idGenerator id="idGenerator" instance-ref="instance" name="idGenerator"/>
    <hz:flakeIdGenerator id="flakeIdGenerator" instance-ref="instance" name="flakeIdGenerator"/>
    <hz:atomicLong id="atomicLong" instance-ref="instance" name="testAtomicLong"/>
    <hz:atomicReference id="atomicReference" instance-ref="instance" name="testAtomicReference"/>
    <hz:countDownLatch id="countDownLatch" instance-ref="instance" name="countDownLatch"/>
    <hz:semaphore id="semaphore" instance-ref="instance" name="semaphore"/>
    <hz:lock id="lock" instance-ref="instance" name="lock"/>
    <hz:cardinalityEstimator id="cardinality" instance-ref="instance" name="cardinality"/>
    <hz:ringbuffer id="testRingbuffer" instance-ref="instance" name="testRingbuffer"/>
    <hz:reliableTopic id="testReliableTopic" instance-ref="instance" name="testReliableTopic"/>
    <hz:PNCounter id="pnCounter" instance-ref="instance" name="pnCounter"/>

    <bean id="dummyMapStore" class="com.hazelcast.spring.DummyStore"/>
    <bean id="dummyMapStoreFactory" class="com.hazelcast.spring.DummyStoreFactory"/>
    <bean id="dummyQueueStore" class="com.hazelcast.spring.DummyQueueStore"/>
    <bean id="dummyQueueStoreFactory" class="com.hazelcast.spring.DummyQueueStoreFactory"/>
    <bean id="dummyRingbufferStore" class="com.hazelcast.spring.DummyRingbufferStore"/>
    <bean id="dummyRingbufferStoreFactory" class="com.hazelcast.spring.DummyRingbufferStoreFactory"/>
    <bean id="dummyMapEvictionPolicy" class="com.hazelcast.spring.DummyMapEvictionPolicy"/>
    <bean id="dummyWanReplication" class="com.hazelcast.spring.DummyWanReplication"/>
    <bean id="dummyMembershipListener" class="com.hazelcast.spring.DummyMembershipListener"/>
    <bean id="dummyEntryListener" class="com.hazelcast.spring.DummyEntryListener"/>
    <bean id="dummyQuorumListener" class="com.hazelcast.spring.DummyQuorumListener"/>
    <bean id="dummySSLContextFactory" class="com.hazelcast.spring.DummySSLContextFactory"/>
    <bean id="dummySocketInterceptor" class="com.hazelcast.spring.DummySocketInterceptor"/>
    <bean id="dummyNodeFilter" class="com.hazelcast.spring.DummyNodeFilter"/>
    <bean id="dummyDiscoveryStrategyFactory" class="com.hazelcast.spring.DummyDiscoveryStrategyFactory"/>
    <bean id="dummyDiscoveryServiceProvider" class="com.hazelcast.spring.DummyDiscoveryServiceProvider"/>
    <bean id="dummyService" class="com.hazelcast.spring.MyService"/>
    <bean id="wanConsumer" class="com.hazelcast.spring.DummyWanConsumer"/>

</beans>
