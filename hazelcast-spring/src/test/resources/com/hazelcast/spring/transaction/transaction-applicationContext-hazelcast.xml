<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2008-2018, Hazelcast, Inc. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:hz="http://www.hazelcast.com/schema/spring"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.hazelcast.com/schema/spring
        http://www.hazelcast.com/schema/spring/hazelcast-spring.xsd">

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="transactionManager" class="com.hazelcast.spring.transaction.HazelcastTransactionManager">
        <constructor-arg ref="instance"/>
    </bean>

    <bean id="transactionalContext" class="com.hazelcast.spring.transaction.ManagedTransactionalTaskContext">
        <constructor-arg ref="transactionManager"/>
    </bean>

    <bean id="otherService" class="com.hazelcast.spring.transaction.OtherServiceBeanWithTransactionalContext">
        <constructor-arg ref="transactionalContext"/>
    </bean>

    <bean id="service" class="com.hazelcast.spring.transaction.ServiceBeanWithTransactionalContext">
        <constructor-arg ref="transactionalContext"/>
        <constructor-arg ref="otherService"/>
    </bean>

    <hz:hazelcast id="instance" lazy-init="true" scope="singleton">
        <hz:config>
            <hz:group name="${cluster.group.name}" password="${cluster.group.password}"/>
            <hz:network port="5701" port-auto-increment="false">
                <hz:join>
                    <hz:multicast enabled="false"/>
                    <hz:tcp-ip enabled="true">
                        <hz:interface>127.0.0.1:5701</hz:interface>
                        <hz:interface>127.0.0.1:5702</hz:interface>
                    </hz:tcp-ip>
                </hz:join>
                <hz:interfaces enabled="true">
                    <hz:interface>127.0.0.1</hz:interface>
                </hz:interfaces>
            </hz:network>
        </hz:config>
    </hz:hazelcast>

    <hz:client id="client" lazy-init="true" scope="prototype">
        <hz:group name="${cluster.group.name}" password="${cluster.group.password}"/>
        <hz:network connection-attempt-limit="3"
                    connection-attempt-period="3000"
                    connection-timeout="1000"
                    redo-operation="true"
                    smart-routing="true">

            <hz:member>127.0.0.1:5701</hz:member>

            <hz:socket-options buffer-size="32"
                               keep-alive="false"
                               linger-seconds="3"
                               reuse-address="false"
                               tcp-no-delay="false"/>
        </hz:network>
    </hz:client>
</beans>
