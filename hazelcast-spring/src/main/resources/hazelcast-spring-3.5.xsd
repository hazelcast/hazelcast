<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2008-2018, Hazelcast, Inc. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns="http://www.hazelcast.com/schema/spring"
           xmlns:tool="http://www.springframework.org/schema/tool"
           targetNamespace="http://www.hazelcast.com/schema/spring"
           elementFormDefault="qualified"
           attributeFormDefault="unqualified">

    <xs:import namespace="http://www.springframework.org/schema/tool"
               schemaLocation="http://www.springframework.org/schema/tool/spring-tool.xsd"/>
    <xs:element name="config">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="hazelcast-bean">
                    <xs:sequence>
                        <xs:element name="spring-aware" type="xs:string" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="instance-name" type="xs:string" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="group" type="group" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="license-key" type="xs:string" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="management-center" type="management-center" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="properties" type="properties" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="wan-replication" type="wan-replication" minOccurs="0" maxOccurs="unbounded"/>
                        <xs:element name="network" type="network" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="partition-group" type="partition-group" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="executor-service" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:sequence/>
                                <xs:attribute name="name" use="required" type="xs:string"/>
                                <xs:attribute name="pool-size" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            The number of executor threads per Member for the Executor.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="queue-capacity" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Executor's task queue capacity. 0 means Integer.MAX_VALUE.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="queue" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element name="item-listeners" minOccurs="0" maxOccurs="1">
                                        <xs:complexType>
                                            <xs:sequence>
                                                <xs:element name="item-listener" type="item-listener" minOccurs="0"
                                                            maxOccurs="unbounded"/>
                                            </xs:sequence>
                                        </xs:complexType>
                                    </xs:element>
                                    <xs:element name="queue-store" minOccurs="0" maxOccurs="1">
                                        <xs:complexType>
                                            <xs:sequence>
                                                <xs:element name="properties" type="properties" minOccurs="0"
                                                            maxOccurs="1"/>
                                            </xs:sequence>
                                            <xs:attribute name="enabled" use="required" type="xs:string"/>
                                            <xs:attribute name="class-name" use="optional" type="xs:string"/>
                                            <xs:attribute name="factory-class-name" use="optional" type="xs:string"/>
                                            <xs:attribute name="store-implementation" use="optional" type="xs:string"/>
                                            <xs:attribute name="factory-implementation" use="optional"
                                                          type="xs:string"/>
                                        </xs:complexType>
                                    </xs:element>
                                </xs:sequence>
                                <xs:attribute name="name" use="required" type="xs:string"/>
                                <xs:attribute name="max-size" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Value of maximum size of items in the Queue.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="backup-count" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Count of synchronous backups. Remember that, Queue is a non-partitioned
                                            data structure, i.e. all entries of a Set resides in one partition. When
                                            this parameter is '1', it means there will be a backup of that Set in
                                            another node in the cluster. When it is '2', 2 nodes will have the backup.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="async-backup-count" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Count of asynchronous backups.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="map" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element name="map-store" minOccurs="0" maxOccurs="1">
                                        <xs:complexType>
                                            <xs:sequence>
                                                <xs:element name="properties" type="properties" minOccurs="0"
                                                            maxOccurs="1"/>
                                            </xs:sequence>
                                            <xs:attribute name="enabled" use="required" type="xs:string"/>
                                            <xs:attribute name="class-name" use="optional" type="xs:string">
                                                <xs:annotation>
                                                    <xs:documentation>
                                                        Name of the class implementing MapLoader and/or MapStore.
                                                    </xs:documentation>
                                                </xs:annotation>
                                            </xs:attribute>
                                            <xs:attribute name="factory-class-name" use="optional" type="xs:string"/>
                                            <xs:attribute name="implementation" use="optional" type="xs:string"/>
                                            <xs:attribute name="factory-implementation" use="optional"
                                                          type="xs:string"/>
                                            <xs:attribute name="write-delay-seconds" use="required" type="xs:string">
                                                <xs:annotation>
                                                    <xs:documentation>
                                                        Number of seconds to delay to call the MapStore.store(key,
                                                        value).
                                                        If the value is zero then it is write-through so
                                                        MapStore.store(key, value) will be called as soon as the
                                                        entry is updated. Otherwise it is write-behind so updates will
                                                        be stored after write-delay-seconds value by calling
                                                        Hazelcast.storeAll(map). Default value is 0.
                                                    </xs:documentation>
                                                </xs:annotation>
                                            </xs:attribute>
                                            <xs:attribute name="write-batch-size" use="optional" type="xs:string">
                                                <xs:annotation>
                                                    <xs:documentation>
                                                        Used to create batch chunks when writing map store. In default
                                                        mode all entries will be tried to persist in one go. To create
                                                        batch chunks, minimum meaningful value for write-batch-size is
                                                        2.
                                                        For values smaller than 2, it works as in default mode.
                                                    </xs:documentation>
                                                </xs:annotation>
                                            </xs:attribute>
                                            <xs:attribute name="write-coalescing" use="optional" type="xs:boolean"
                                                          default="true">
                                                <xs:annotation>
                                                    <xs:documentation>
                                                        Setting write-coalescing is meaningful if you are using
                                                        write-behind map-store. Otherwise it has no effect.
                                                        When write-coalescing is true, only the latest
                                                        store operation on a key in the write-delay-seconds
                                                        time-window will be reflected to the map-store.
                                                    </xs:documentation>
                                                </xs:annotation>
                                            </xs:attribute>
                                            <xs:attribute name="initial-mode">
                                                <xs:simpleType>
                                                    <xs:restriction base="non-space-string">
                                                        <xs:enumeration value="LAZY"/>
                                                        <xs:enumeration value="EAGER"/>
                                                    </xs:restriction>
                                                </xs:simpleType>
                                            </xs:attribute>
                                        </xs:complexType>
                                    </xs:element>
                                    <xs:element name="near-cache" type="near-cache" minOccurs="0" maxOccurs="1"/>
                                    <xs:element name="query-caches" type="query-caches" minOccurs="0" maxOccurs="1"/>
                                    <xs:element name="wan-replication-ref" type="wan-replication-ref" minOccurs="0"
                                                maxOccurs="1">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Hazelcast can replicate some or all of the cluster data. For example,
                                                you can have 5 different maps but you want only one of these maps
                                                replicating across clusters. To achieve this you mark the maps
                                                to be replicated by adding this element.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:element>
                                    <xs:element name="indexes" minOccurs="0" maxOccurs="1">
                                        <xs:annotation>
                                            <xs:documentation>
                                                This configuration lets you index the attributes and also order them.
                                            </xs:documentation>
                                        </xs:annotation>
                                        <xs:complexType>
                                            <xs:sequence>
                                                <xs:element name="index" minOccurs="0" maxOccurs="unbounded">
                                                    <xs:complexType>
                                                        <xs:attribute name="attribute" type="xs:string" use="required"/>
                                                        <xs:attribute name="ordered" type="xs:string" use="optional"
                                                                      default="false"/>
                                                    </xs:complexType>
                                                </xs:element>
                                            </xs:sequence>
                                        </xs:complexType>
                                    </xs:element>
                                    <xs:element name="entry-listeners" minOccurs="0" maxOccurs="1">
                                        <xs:annotation>
                                            <xs:documentation>
                                                This configuration lets you add listeners (listener classes) for the
                                                map entries.
                                            </xs:documentation>
                                        </xs:annotation>
                                        <xs:complexType>
                                            <xs:sequence>
                                                <xs:element name="entry-listener" type="entry-listener" minOccurs="0"
                                                            maxOccurs="unbounded"/>
                                            </xs:sequence>
                                        </xs:complexType>
                                    </xs:element>
                                    <xs:element name="quorum-ref" minOccurs="0" maxOccurs="1"/>
                                </xs:sequence>
                                <xs:attribute name="name" use="required" type="xs:string"/>
                                <xs:attribute name="in-memory-format" use="optional" type="xs:string" default="BINARY">
                                    <xs:annotation>
                                        <xs:documentation>
                                            It is used to determine how the data will be stored in memory. It has two
                                            values: BINARY and OBJECT. BINARY is the default option and enables to
                                            store the data in serialized binary format. If OBJECT is set as the value,
                                            data will be stored in deserialized form.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="statistics-enabled" use="optional" type="xs:boolean"
                                              default="true">
                                    <xs:annotation>
                                        <xs:documentation>
                                            You can retrieve some statistics like owned entry count, backup entry count,
                                            last update time, locked entry count by setting this parameter's value
                                            as "true". The method for retrieving the statistics is `getLocalMapStats()`.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="optimize-queries" use="optional" type="xs:boolean"
                                              default="false">
                                    <xs:annotation>
                                        <xs:documentation>
                                            This parameter is used to increase the speed of query processes in the map.
                                            It only works when `in-memory-format` is set as `BINARY` and performs
                                            a pre-caching on the entries queried.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="backup-count" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Number of sync backups. If 1 is set as the backup-count for example, then
                                            all
                                            entries of the map will be copied to another JVM for fail-safety. Valid
                                            numbers are 0 (no backup), 1, 2 ... 6.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="async-backup-count" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Number of async backups. If 1 is set as the backup-count for example, then
                                            all
                                            entries of the map will be copied to another JVM for fail-safety. Valid
                                            numbers are 0 (no backup), 1, 2 ... 6.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="time-to-live-seconds" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Maximum number of seconds for each entry to stay in the map. Entries that
                                            are older than `time-to-live-seconds` and not updated for
                                            `time-to-live-seconds` will get automatically evicted from the map. Any
                                            integer between 0 and Integer.MAX_VALUE. 0 means infinite. Default is 0.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="max-size" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Maximum size. Any integer between 0 and Integer.MAX_VALUE. 0 means
                                            Integer.MAX_VALUE. Default is 0.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="max-size-policy" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            When maximum size is reached, map is evicted based on the eviction policy
                                            defined. It has four attributes: PER_NODE (Maximum number of map entries in
                                            each JVM), PER_PARTITION (Maximum number of map entries within each
                                            partition),
                                            USED_HEAP_SIZE (Maximum used heap size in megabytes for each JVM) and
                                            USED_HEAP_PERCENTAGE (Maximum used heap size percentage for each JVM).
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="max-idle-seconds" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Maximum number of seconds for each entry to stay idle in the map. Entries
                                            that are idle(not touched) for more than max-idle-seconds will get
                                            automatically evicted from the map. Entry is touched if get, put or
                                            containsKey is called. Any integer between 0 and Integer.MAX_VALUE. 0 means
                                            infinite. Default is 0.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="eviction-percentage" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            When max. size is reached, specified percentage of the map will be evicted.
                                            Any integer between 0 and 100. If 25 is set for example, 25% of the
                                            entries will get evicted.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="min-eviction-check-millis" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Minimum time in milliseconds which should pass before checking if a
                                            partition of this map is evictable or not. Default value is 100 millis.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="eviction-policy" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Valid values are: NONE (no eviction), LRU (Least Recently Used), LFU
                                            (Least Frequently Used). NONE is the default.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="merge-policy" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            While recovering from split-brain (network partitioning), map entries in
                                            the small cluster will merge into the bigger cluster based on the policy set
                                            here. When an entry merge into the cluster, there might an existing entry
                                            with the same key already. Values of these entries might be different for
                                            that same key. Which value should be set for the key? Conflict is resolved
                                            by the policy set here.
                                            <p>
                                                <br/>
                                                There are built-in merge policies such as:
                                                <br/>
                                                com.hazelcast.map.merge.PassThroughMergePolicy; entry will be added if
                                                there is no existing entry for the key.
                                                <br/>
                                                com.hazelcast.map.merge.PutIfAbsentMapMergePolicy ; entry will be added
                                                if
                                                the merging entry doesn't exist in the cluster.
                                                <br/>
                                                com.hazelcast.map.merge.HigherHitsMapMergePolicy ; entry with the higher
                                                hits wins.
                                                <br/>
                                                com.hazelcast.map.merge.LatestUpdateMapMergePolicy ; entry with the
                                                latest
                                                update wins.
                                                <br/>
                                                Default policy is 'com.hazelcast.map.merge.PutIfAbsentMapMergePolicy'
                                            </p>
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="read-backup-data" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            This boolean parameter enables reading local backup entries when set as
                                            `true`.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>

                            </xs:complexType>
                        </xs:element>
                        <xs:element name="cache" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element name="eviction" type="eviction" minOccurs="0" maxOccurs="1">
                                        <xs:annotation>
                                            <xs:documentation>
                                                When maximum size is reached, cache is evicted based on the eviction
                                                policy

                                                size:
                                                Size can be any integer between 0 and Integer.MAX_VALUE.

                                                Default value is 0.

                                                max-size-policy:
                                                Max-Size policy has these valid values:
                                                ENTRY_COUNT (Maximum number of cache entries in the cache),
                                                USED_NATIVE_MEMORY_SIZE (Maximum used native memory size in megabytes
                                                for each JVM),
                                                USED_NATIVE_MEMORY_PERCENTAGE (Maximum used native memory size
                                                percentage for each JVM),
                                                FREE_NATIVE_MEMORY_SIZE (Maximum free native memory size in megabytes
                                                for each JVM),
                                                FREE_NATIVE_MEMORY_PERCENTAGE (Maximum free native memory size
                                                percentage for each JVM).

                                                Default value is "ENTRY_COUNT".

                                                eviction-policy:
                                                Eviction policy has these valid values:
                                                LRU (Least Recently Used),
                                                LFU (Least Frequently Used).

                                                Default value is "LRU".
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:element>
                                    <xs:element name="cache-entry-listeners" minOccurs="0" maxOccurs="1">
                                        <xs:annotation>
                                            <xs:documentation>List of cache entry listeners</xs:documentation>
                                        </xs:annotation>
                                        <xs:complexType>
                                            <xs:sequence>
                                                <xs:element name="cache-entry-listener" type="cache-entry-listener"
                                                            minOccurs="0"
                                                            maxOccurs="unbounded"/>
                                            </xs:sequence>
                                        </xs:complexType>
                                    </xs:element>
                                    <xs:element name="expiry-policy-factory" minOccurs="0" maxOccurs="1">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Defines the expiry policy factory class name or
                                                defines the expiry policy factory from predefined ones with duration
                                                configuration.
                                            </xs:documentation>
                                        </xs:annotation>
                                        <xs:complexType>
                                            <xs:sequence>
                                                <xs:element name="timed-expiry-policy-factory"
                                                            type="timed-expiry-policy-factory"
                                                            minOccurs="0" maxOccurs="1"/>
                                            </xs:sequence>
                                            <xs:attribute name="class-name"/>
                                        </xs:complexType>
                                    </xs:element>
                                    <xs:element name="wan-replication-ref" type="wan-replication-ref" minOccurs="0"
                                                maxOccurs="1">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Hazelcast can replicate some or all of the cluster data. For example,
                                                you can have 5 different caches but you want only one of these caches
                                                replicating across clusters. To achieve this you mark the caches
                                                to be replicated by adding this element.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:element>
                                </xs:sequence>
                                <xs:attribute name="name" type="xs:string" use="required">
                                    <xs:annotation>
                                        <xs:documentation>Name of the cache.</xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="key-type" type="non-space-string" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>the type of keys provided as full class name
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="value-type" type="non-space-string" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>the type of values provided as full class name
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="statistics-enabled" type="xs:boolean" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Defines whether statistics gathering is enabled on a cache.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="management-enabled" type="xs:boolean" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Defines whether management is enabled on a cache.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="read-through" type="xs:boolean" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Set if read-through caching should be used.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="write-through" type="xs:boolean" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Set if write-through caching should be used.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="in-memory-format" type="xs:string" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Data type that will be used for storing records. Possible values:
                                            BINARY (default): keys and values will be stored as binary data
                                            OBJECT : values will be stored in their object forms
                                            NATIVE : keys and values will be stored in native memory.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="cache-loader-factory" type="xs:string" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Defines the cache loader factory class name.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="cache-writer-factory" type="xs:string" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Defines the cache writer factory class name.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="expiry-policy-factory" type="xs:string" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Defines the expiry policy factory class name.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="backup-count" use="optional" type="xs:unsignedByte">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Number of sync backups. If 1 is set as the backup-count for example, then
                                            all entries of the map will be copied to another JVM for fail-safety. Valid
                                            numbers are 0 (no backup), 1, 2 ... 6.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="async-backup-count" use="optional" type="xs:unsignedByte">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Number of async backups. If 1 is set as the backup-count for example, then
                                            all entries of the map will be copied to another JVM for fail-safety. Valid
                                            numbers are 0 (no backup), 1, 2 ... 6.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="multimap" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element name="entry-listeners" minOccurs="0" maxOccurs="1">
                                        <xs:complexType>
                                            <xs:sequence>
                                                <xs:element name="entry-listener" type="entry-listener" minOccurs="0"
                                                            maxOccurs="unbounded"/>
                                            </xs:sequence>
                                        </xs:complexType>
                                    </xs:element>
                                </xs:sequence>
                                <xs:attribute name="name" type="xs:string" use="optional" default="default"/>
                                <xs:attribute name="backup-count" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Number of sync backups. If 1 is set as the backup-count for example, then
                                            all
                                            entries of the map will be copied to another JVM for fail-safety. Valid
                                            numbers are 0 (no backup), 1, 2 ... 6.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="async-backup-count" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Number of async backups. If 1 is set as the backup-count for example, then
                                            all
                                            entries of the map will be copied to another JVM for fail-safety. Valid
                                            numbers are 0 (no backup), 1, 2 ... 6.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="value-collection-type" type="xs:string" use="optional"
                                              default="SET">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Type of value collection. It can be Set or List.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="list" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element name="item-listeners" minOccurs="0" maxOccurs="1">
                                        <xs:complexType>
                                            <xs:sequence>
                                                <xs:element name="item-listener" type="item-listener" minOccurs="0"
                                                            maxOccurs="unbounded"/>
                                            </xs:sequence>
                                        </xs:complexType>
                                    </xs:element>
                                </xs:sequence>
                                <xs:attribute name="name" use="required" type="xs:string"/>
                                <xs:attribute name="max-size" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Maximum size. Any integer between 0 and Integer.MAX_VALUE. 0 means
                                            Integer.MAX_VALUE. Default is 0.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="backup-count" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Count of synchronous backups. Remember that, List is a non-partitioned data
                                            structure, i.e. all entries of a List resides in one partition. When this
                                            parameter is '1', it means there will be a backup of that List in another
                                            node in the cluster. When it is '2', 2 nodes will have the backup.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="async-backup-count" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Count of asynchronous backups.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="set" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element name="item-listeners" minOccurs="0" maxOccurs="1">
                                        <xs:complexType>
                                            <xs:sequence>
                                                <xs:element name="item-listener" type="item-listener" minOccurs="0"
                                                            maxOccurs="unbounded"/>
                                            </xs:sequence>
                                        </xs:complexType>
                                    </xs:element>
                                </xs:sequence>
                                <xs:attribute name="name" use="required" type="xs:string"/>
                                <xs:attribute name="max-size" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Maximum size. Any integer between 0 and Integer.MAX_VALUE. 0 means
                                            Integer.MAX_VALUE. Default is 0.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="backup-count" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Count of synchronous backups. Remember that, Set is a non-partitioned data
                                            structure, i.e. all entries of a List resides in one partition. When this
                                            parameter is '1', it means there will be a backup of that List in another
                                            node in the cluster. When it is '2', 2 nodes will have the backup.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="async-backup-count" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Count of asynchronous backups.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="topic" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element name="statistics-enabled" type="xs:boolean" minOccurs="0" maxOccurs="1"
                                                default="true">
                                        <xs:annotation>
                                            <xs:documentation>
                                                If set as `true`, you can retrieve statistics for the topic using the
                                                method `getLocalTopicStats()`.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:element>
                                    <xs:element name="global-ordering-enabled" type="xs:boolean" minOccurs="0"
                                                maxOccurs="1"
                                                default="false">
                                        <xs:annotation>
                                            <xs:documentation>
                                                By default, it is false, meaning there is no global order
                                                guarantee by default.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:element>
                                    <xs:element name="message-listeners" minOccurs="0" maxOccurs="1">
                                        <xs:complexType>
                                            <xs:sequence>
                                                <xs:element name="message-listener" type="listener" minOccurs="0"
                                                            maxOccurs="unbounded"/>
                                            </xs:sequence>
                                        </xs:complexType>
                                    </xs:element>
                                </xs:sequence>
                                <xs:attribute name="name" type="xs:string" use="optional" default="default"/>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="jobtracker" minOccurs="0" maxOccurs="unbounded">
                            <xs:annotation>
                                <xs:documentation>
                                    The JobTracker configuration is used to setup behavior of the Hazelcast MapReduce
                                    framework. Every JobTracker is capable of running multiple map reduce jobs at once
                                    and so once configuration is meant as a shared resource for all jobs created by
                                    the same JobTracker. The configuration gives full control over the expected load
                                    behavior and thread counts to be used.
                                </xs:documentation>
                            </xs:annotation>
                            <xs:complexType>
                                <xs:attribute name="name" use="required" type="xs:string"/>
                                <xs:attribute name="max-thread-size" use="optional" type="xs:nonNegativeInteger"
                                              default="0">
                                    <xs:annotation>
                                        <xs:documentation>
                                            The max-thread-size setting configures the maximum thread pool size of the
                                            JobTracker.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="queue-size" use="optional" type="xs:nonNegativeInteger"
                                              default="0">
                                    <xs:annotation>
                                        <xs:documentation>
                                            The queue-size defines the maximum number of tasks are able to wait to be
                                            processed. A value of 0 means unbounded queue.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="retry-count" use="optional" type="xs:nonNegativeInteger"
                                              default="0">
                                    <xs:annotation>
                                        <xs:documentation>
                                            retry-count is currently not used but reserved for later use where the
                                            framework will automatically try to restart / retry operations from an
                                            available savepoint.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="chunk-size" use="optional" type="xs:nonNegativeInteger"
                                              default="1000">
                                    <xs:annotation>
                                        <xs:documentation>
                                            The chunk-size defined the number of emitted values before a chunk is sent
                                            to the reducers. If your emitted values are big or you want to better
                                            balance your work you might want to change this to a lower or higher value.
                                            A value of 0 means immediate transmission but remember that low values
                                            mean higher traffic costs. A very high value might cause an OutOfMemoryError
                                            to occur if emitted values not fit into heap memory before being send to
                                            reducers. To prevent this you might want to use a combiner to pre-reduce
                                            values on mapping nodes.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="communicate-stats" use="optional" type="xs:boolean" default="true">
                                    <xs:annotation>
                                        <xs:documentation>
                                            The communicate-stats setting defines if statistics (for example about
                                            processed entries) are transmitted to the job emitter. This might be used
                                            to show any kind of progress to an user inside of an UI system but produces
                                            additional traffic. If not needed you might want to deactivate this.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="topology-changed-strategy" use="optional"
                                              type="topology-changed-strategy" default="CANCEL_RUNNING_OPERATION">
                                    <xs:annotation>
                                        <xs:documentation>
                                            The topology-changed-strategy defines how the map reduce framework will
                                            react on topology changes while executing a job. Currently only
                                            CANCEL_RUNNING_OPERATION is fully supported which throws an exception to the
                                            job emitter (throws com.hazelcast.mapreduce.TopologyChangedException).
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="replicatedmap" minOccurs="0" maxOccurs="unbounded">
                            <xs:annotation>
                                <xs:documentation>
                                    A replicated map is a fully vector clock based, eventually consistent implementation
                                    of the map
                                    interface. In difference to all other Hazelcast data structures this implementation
                                    is not
                                    partitioned but fully replicates all data to all members.
                                    Due to the nature of eventually consistency there is a chance of reading staled data
                                    and no
                                    guarantee is given to retrieve the same value on multiple get calls.
                                    ReplicatedMap was added in Hazelcast 3.2.
                                </xs:documentation>
                            </xs:annotation>
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element name="entry-listeners" minOccurs="0" maxOccurs="1">
                                        <xs:complexType>
                                            <xs:sequence>
                                                <xs:element name="entry-listener" type="entry-listener" minOccurs="0"
                                                            maxOccurs="unbounded"/>
                                            </xs:sequence>
                                        </xs:complexType>
                                    </xs:element>
                                </xs:sequence>
                                <xs:attribute name="name" type="xs:string" use="optional" default="default"/>
                                <xs:attribute name="in-memory-format" type="in-memory-format" use="optional"
                                              default="OBJECT"/>
                                <xs:attribute name="concurrency-level" type="concurrency-level" use="optional"
                                              default="32">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Number of parallel mutexes to minimize contention on keys. The default value
                                            is 32 which
                                            is a good number for lots of applications. If higher contention is seen on
                                            writes to values
                                            inside of the replicated map this value can be adjusted to the needs.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="replication-delay-millis" type="xs:unsignedInt" use="optional"
                                              default="100">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Defines a number of milliseconds after a put is executed before the value is
                                            replicated
                                            to other nodes. In this time multiple puts can be operated and are cached up
                                            to be send
                                            at once. This highers the latency for eventually consistency but lowers IO
                                            operations.
                                            Default value is 100ms before a replication is operated, if set to 0 no
                                            delay is used and
                                            all values are replicated one by one.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="async-fillup" type="xs:boolean" use="optional" default="true">
                                    <xs:annotation>
                                        <xs:documentation>
                                            This value defines it the replicated map is available for reads before the
                                            initial
                                            replication is completed. Default is true. If set to false no Exception will
                                            be
                                            thrown when replicated map is not yet ready but call will block until
                                            finished.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="statistics-enabled" type="xs:boolean" use="optional"
                                              default="true"/>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="listeners" type="listeners" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="serialization" type="serialization" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="native-memory" type="native-memory" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="security" type="security" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="member-attributes" minOccurs="0" maxOccurs="1">
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element name="attribute" type="attribute" maxOccurs="unbounded">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Specify the name, type and value of your attribute here.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:element>
                                </xs:sequence>
                            </xs:complexType>
                            <xs:unique name="uniqueAttributeConstraint">
                                <xs:selector xpath="./*"/>
                                <xs:field xpath="@name"/>
                            </xs:unique>
                        </xs:element>
                        <xs:element name="services" type="services" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="quorum" type="quorum" minOccurs="0" maxOccurs="1"/>

                    </xs:sequence>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <xs:element name="data-serializable-factories">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="data-serializable-factory" type="serialization-factory" minOccurs="0"
                            maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>
                            DataSerializableFactory class to be registered.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="portable-factories">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="portable-factory" type="serialization-factory" minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>
                            PortableFactory class to be registered.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="serializers">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="global-serializer" type="global-serializer" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>
                            Global serializer class to be registered if no other serializer is applicable.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="serializer" type="serializer" minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>
                            Defines the class name of the serializer implementation.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:complexType name="serialization-factory">
        <xs:attribute name="factory-id" type="xs:string" use="required"/>
        <xs:attribute name="class-name" type="xs:string" use="optional"/>
        <xs:attribute name="implementation" type="xs:string" use="optional"/>
    </xs:complexType>

    <xs:complexType name="global-serializer">
        <xs:attribute name="class-name" type="xs:string" use="optional"/>
        <xs:attribute name="implementation" type="xs:string" use="optional"/>
    </xs:complexType>

    <xs:complexType name="serializer">
        <xs:attribute name="class-name" type="xs:string" use="optional"/>
        <xs:attribute name="implementation" type="xs:string" use="optional"/>
        <xs:attribute name="type-class" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:element name="hazelcast">
        <xs:annotation>
            <xs:documentation>
                Configure the hazelcast instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.HazelcastInstance"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="hazelcast-bean">
                    <xs:sequence>
                        <xs:element ref="config" minOccurs="0" maxOccurs="1"/>
                    </xs:sequence>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <xs:element name="client">
        <xs:annotation>
            <xs:documentation>
                Configure the hazelcast client
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.HazelcastInstance"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="hazelcast-bean">
                    <xs:sequence>
                        <xs:element name="spring-aware" type="xs:string" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="group" type="group" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="properties" type="properties" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="network" type="network-client" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="security" type="client-security" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="listeners" type="listeners" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="serialization" type="serialization" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="proxy-factories" type="proxy-factories" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="load-balancer" type="load-balancer" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="near-cache" type="near-cache-client" minOccurs="0" maxOccurs="unbounded"/>
                        <xs:element name="query-caches" type="query-caches-client" minOccurs="0" maxOccurs="unbounded"/>
                    </xs:sequence>
                    <xs:attribute name="executor-pool-size" type="xs:int" use="optional"/>
                    <xs:attribute name="credentials-ref" type="xs:string" use="optional"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <xs:element name="map" type="hazelcast-type">
        <xs:annotation>
            <xs:documentation>
                Retrieve a Hazelcast IMap instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.IMap"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
    </xs:element>
    <xs:element name="multiMap" type="hazelcast-type">
        <xs:annotation>
            <xs:documentation>
                Retrieve a Hazelcast MultiMap instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.MultiMap"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
    </xs:element>
    <xs:element name="replicatedMap" type="hazelcast-type">
        <xs:annotation>
            <xs:documentation>
                Retrieve a Hazelcast ReplicatedMap instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.ReplicatedMap"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
    </xs:element>
    <xs:element name="queue" type="hazelcast-type">
        <xs:annotation>
            <xs:documentation>
                Retrieve a Hazelcast IQueue instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.IQueue"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
    </xs:element>
    <xs:element name="topic" type="hazelcast-type">
        <xs:annotation>
            <xs:documentation>
                Retrieve a Hazelcast ITopic instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.ITopic"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
    </xs:element>
    <xs:element name="set" type="hazelcast-type">
        <xs:annotation>
            <xs:documentation>
                Retrieve a Hazelcast ISet instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.ISet"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
    </xs:element>
    <xs:element name="list" type="hazelcast-type">
        <xs:annotation>
            <xs:documentation>
                Retrieve a Hazelcast IList instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.IList"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
    </xs:element>
    <xs:element name="executorService" type="hazelcast-type">
        <xs:annotation>
            <xs:documentation>
                Retrieve a Hazelcast IExecutorService instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.IExecutorService"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
    </xs:element>
    <xs:element name="idGenerator" type="hazelcast-type">
        <xs:annotation>
            <xs:documentation>
                Retrieve a Hazelcast IdGenerator instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.IdGenerator"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
    </xs:element>
    <xs:element name="atomicLong" type="hazelcast-type">
        <xs:annotation>
            <xs:documentation>
                Retrieve a Hazelcast IAtomicLong instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.IAtomicLong"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
    </xs:element>
    <xs:element name="atomicReference" type="hazelcast-type">
        <xs:annotation>
            <xs:documentation>
                Retrieve a Hazelcast IAtomicReference instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.IAtomicReference"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
    </xs:element>
    <xs:element name="countDownLatch" type="hazelcast-type">
        <xs:annotation>
            <xs:documentation>
                Retrieve a Hazelcast ICountDownLatch instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.ICountDownLatch"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
    </xs:element>
    <xs:element name="semaphore" type="hazelcast-type">
        <xs:annotation>
            <xs:documentation>
                Retrieve a Hazelcast ISemaphore instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.ISemaphore"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
    </xs:element>
    <xs:element name="lock" type="hazelcast-type">
        <xs:annotation>
            <xs:documentation>
                Retrieve a Hazelcast ILock instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.ILock"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
    </xs:element>

    <xs:element name="hibernate-region-factory" type="hibernate-cache"/>

    <!-- internal elements -->
    <xs:complexType name="hazelcast-bean">
        <xs:attribute name="id" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>
                    <![CDATA[The unique identifier for a bean.
                    A bean ID may not be used more than once within the same <beans> element.]]>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="lazy-init" type="xs:string" use="optional" default="false">
            <xs:annotation>
                <xs:documentation>
                    <![CDATA[Indicates whether or not this bean is to be lazily initialized.
                    If false, it will be instantiated on startup by bean factories that perform
                    eager initialization of singletons.]]>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="scope" type="xs:string" use="optional" default="singleton">
            <xs:annotation>
                <xs:documentation>
                    <![CDATA[The scope of this bean: typically "singleton", or "prototype".]]>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="depends-on" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>
                    <![CDATA[The names of the beans that this bean depends on being initialized.]]>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="hazelcast-type">
        <xs:complexContent>
            <xs:extension base="hazelcast-bean">
                <xs:sequence/>
                <xs:attribute name="instance-ref" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>
                            <![CDATA[The name of the HazelcastInstance that this bean depends on.]]>
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="name" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>
                            <![CDATA[The name of this bean in Hazelcast context (HazelcastInstance.getMap(name)).]]>
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="network">
        <xs:sequence>
            <xs:element name="outbound-ports" type="outbound-ports" minOccurs="0" maxOccurs="1"/>
            <xs:element name="join" type="join" minOccurs="0" maxOccurs="1"/>
            <xs:element name="interfaces" type="interfaces" minOccurs="0" maxOccurs="1"/>
            <xs:element name="ssl" type="ssl" minOccurs="0" maxOccurs="1"/>
            <xs:element name="socket-interceptor" type="socket-interceptor" minOccurs="0" maxOccurs="1"/>
            <xs:element name="symmetric-encryption" type="symmetric-encryption" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>
                        Encryption algorithm such as DES/ECB/PKCS5Padding, PBEWithMD5AndDES, AES/CBC/PKCS5Padding,
                        Blowfish, DESede.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="reuse-address" type="xs:boolean" minOccurs="0" maxOccurs="1" default="false"/>
        </xs:sequence>
        <xs:attribute name="public-address" type="xs:string" use="optional"/>
        <xs:attribute name="port" type="xs:string" use="required"/>
        <xs:attribute name="port-auto-increment" type="xs:string" use="optional" default="true"/>
    </xs:complexType>

    <xs:complexType name="tcp-ip">
        <xs:sequence>
            <xs:element name="required-member" type="xs:string" minOccurs="0" maxOccurs="1"/>
            <xs:choice>
                <xs:element name="members" type="members" default="127.0.0.1"/>
                <xs:sequence>
                    <xs:element name="member" type="member" default="127.0.0.1" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
                <xs:sequence>
                    <xs:element name="interface" type="interface" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:choice>
        </xs:sequence>
        <xs:attribute name="enabled" type="xs:string" use="optional" default="false"/>
        <xs:attribute name="connection-timeout-seconds" type="xs:string" use="optional" default="5"/>
    </xs:complexType>

    <xs:complexType name="multicast">
        <xs:sequence/>
        <xs:attribute name="enabled" type="xs:string" use="optional" default="true"/>
        <xs:attribute name="multicast-group" type="xs:string" use="optional" default="224.2.2.3"/>
        <xs:attribute name="multicast-port" type="xs:string" use="optional" default="54327"/>
        <xs:attribute name="multicast-timeout-seconds" type="xs:string" use="optional" default="2"/>
        <xs:attribute name="multicast-time-to-live" type="xs:string" use="optional" default="32"/>
    </xs:complexType>

    <xs:complexType name="aws">
        <xs:sequence/>
        <xs:attribute name="enabled" type="xs:string" use="optional" default="true"/>
        <xs:attribute name="access-key" type="xs:string" use="optional"/>
        <xs:attribute name="secret-key" type="xs:string" use="optional"/>
        <xs:attribute name="region" type="xs:string" use="optional" default="us-east-1"/>
        <xs:attribute name="host-header" type="xs:string" use="optional" default="ec2.amazonaws.com"/>
        <xs:attribute name="security-group-name" type="xs:string" use="optional" default=""/>
        <xs:attribute name="tag-key" type="xs:string" use="optional" default=""/>
        <xs:attribute name="tag-value" type="xs:string" use="optional" default=""/>
        <xs:attribute name="connection-timeout-seconds" type="xs:string" use="optional" default="5"/>
    </xs:complexType>

    <xs:complexType name="merge-policies">
        <xs:sequence>
            <xs:element name="map-merge-policy" type="map-merge-policy" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="map-merge-policy">
        <xs:attribute name="name" type="xs:string" use="required"/>
        <xs:attribute name="class-name" type="xs:string" use="optional"/>
        <xs:attribute name="implementation" type="xs:string" use="optional"/>
    </xs:complexType>

    <xs:complexType name="outbound-ports">
        <xs:sequence>
            <xs:element name="ports" minOccurs="0" maxOccurs="unbounded">
                <xs:simpleType>
                    <xs:restriction base="xs:string"/>
                </xs:simpleType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="join">
        <xs:sequence>
            <xs:element name="multicast" type="multicast" minOccurs="0"/>
            <xs:element name="tcp-ip" type="tcp-ip" minOccurs="0"/>
            <xs:element name="aws" type="aws" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="interfaces">
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="interface" type="interface" default="127.0.0.1"/>
        </xs:sequence>
        <xs:attribute name="enabled" type="xs:string" use="optional" default="false"/>
    </xs:complexType>

    <xs:simpleType name="interface">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>

    <xs:simpleType name="member">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>

    <xs:simpleType name="members">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>

    <xs:complexType name="group">
        <xs:sequence/>
        <xs:attribute name="name" type="xs:string" use="required"/>
        <xs:attribute name="password" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:simpleType name="propertyNameEnum">
        <xs:restriction base="xs:string">
            <xs:enumeration value="hazelcast.merge.first.run.delay.seconds"/>
            <xs:enumeration value="hazelcast.merge.next.run.delay.seconds"/>
            <xs:enumeration value="hazelcast.redo.wait.millis"/>
            <xs:enumeration value="hazelcast.socket.bind.any"/>
            <xs:enumeration value="hazelcast.serializer.gzip.enabled"/>
            <xs:enumeration value="hazelcast.serializer.shared"/>
            <xs:enumeration value="hazelcast.shutdownhook.enabled"/>
            <xs:enumeration value="hazelcast.wait.seconds.before.join"/>
            <xs:enumeration value="hazelcast.max.no.heartbeat.seconds"/>
            <xs:enumeration value="hazelcast.initial.wait.seconds"/>
            <xs:enumeration value="hazelcast.restart.on.max.idle"/>
            <xs:enumeration value="hazelcast.map.partition.count"/>
            <xs:enumeration value="hazelcast.map.remove.delay.seconds"/>
            <xs:enumeration value="hazelcast.map.cleanup.delay.seconds"/>
            <xs:enumeration value="hazelcast.executor.query.thread.count"/>
            <xs:enumeration value="hazelcast.executor.event.thread.count"/>
            <xs:enumeration value="hazelcast.executor.migration.thread.count"/>
            <xs:enumeration value="hazelcast.executor.client.thread.count"/>
            <xs:enumeration value="hazelcast.executor.store.thread.count"/>
            <xs:enumeration value="hazelcast.log.state"/>
            <xs:enumeration value="hazelcast.jmx"/>
            <xs:enumeration value="hazelcast.jmx.detailed"/>
            <xs:enumeration value="hazelcast.mancenter.enabled"/>
            <xs:enumeration value="hazelcast.memcache.enabled"/>
            <xs:enumeration value="hazelcast.rest.enabled"/>
            <xs:enumeration value="hazelcast.map.load.chunk.size"/>
            <xs:enumeration value="hazelcast.in.thread.priority"/>
            <xs:enumeration value="hazelcast.out.thread.priority"/>
            <xs:enumeration value="hazelcast.service.thread.priority"/>
            <xs:enumeration value="hazelcast.socket.receive.buffer.size"/>
            <xs:enumeration value="hazelcast.socket.send.buffer.size"/>
            <xs:enumeration value="hazelcast.socket.keep.alive"/>
            <xs:enumeration value="hazelcast.socket.no.delay"/>
            <xs:enumeration value="hazelcast.heartbeat.interval.seconds"/>
            <xs:enumeration value="hazelcast.icmp.enabled"/>
            <xs:enumeration value="hazelcast.initial.min.cluster.size"/>
            <xs:enumeration value="hazelcast.mc.atomiclong.excludes"/>
            <xs:enumeration value="hazelcast.mc.countdownlatch.excludes"/>
            <xs:enumeration value="hazelcast.mc.map.excludes"/>
            <xs:enumeration value="hazelcast.mc.queue.excludes"/>
            <xs:enumeration value="hazelcast.mc.semaphore.excludes"/>
            <xs:enumeration value="hazelcast.mc.topic.excludes"/>
            <xs:enumeration value="hazelcast.version.check.enabled"/>
            <xs:enumeration value="hazelcast.map.max.backup.count"/>
            <xs:enumeration value="hazelcast.max.wait.seconds.before.join"/>
            <xs:enumeration value="hazelcast.mc.max.visible.instance.count"/>
            <xs:enumeration value="hazelcast.logging.type"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="propertyNameString">
        <xs:restriction base="non-space-string"/>
    </xs:simpleType>
    <xs:simpleType name="propertyName">
        <xs:union memberTypes="propertyNameEnum propertyNameString"/>
    </xs:simpleType>
    <xs:complexType name="property">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="name" use="required" type="propertyName"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="properties">
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="property" type="property"/>
        </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="attributeName">
        <xs:restriction base="non-space-string"/>
    </xs:simpleType>
    <xs:simpleType name="attributeTypeEnum">
        <xs:restriction base="xs:string">
            <xs:enumeration value="boolean"/>
            <xs:enumeration value="byte"/>
            <xs:enumeration value="double"/>
            <xs:enumeration value="float"/>
            <xs:enumeration value="int"/>
            <xs:enumeration value="long"/>
            <xs:enumeration value="short"/>
            <xs:enumeration value="string"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="attribute">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="name" use="required" type="attributeName"/>
                <!--xs:attribute name="name" use="required" type="xs:ID"/-->
                <xs:attribute name="type" use="optional" default="string" type="attributeTypeEnum"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    <xs:complexType name="attributes">
        <xs:sequence>
            <xs:element name="attribute" type="attribute" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="ssl">
        <xs:sequence>
            <xs:element name="properties" type="properties" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="enabled" default="false" type="xs:string"/>
        <xs:attribute name="factory-class-name" type="xs:string" use="optional"/>
        <xs:attribute name="factory-implementation" type="xs:string" use="optional"/>
    </xs:complexType>

    <xs:complexType name="socket-interceptor">
        <xs:sequence>
            <xs:element name="properties" type="properties" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="enabled" default="false" type="xs:string"/>
        <xs:attribute name="class-name" type="xs:string" use="optional"/>
        <xs:attribute name="implementation" type="xs:string" use="optional"/>
    </xs:complexType>

    <xs:complexType name="symmetric-encryption">
        <xs:sequence/>
        <xs:attribute name="enabled" type="xs:string" use="optional" default="false"/>
        <xs:attribute name="algorithm" use="optional" type="xs:string"/>
        <xs:attribute name="salt" use="optional" type="xs:string"/>
        <xs:attribute name="password" use="optional" type="xs:string"/>
        <xs:attribute name="iteration-count" use="optional" type="xs:string"/>
    </xs:complexType>

    <xs:complexType name="hibernate-cache">
        <xs:complexContent>
            <xs:extension base="hazelcast-bean">
                <xs:attribute name="instance-ref" type="xs:string" use="required"/>
                <!-- valid values are DISTRIBUTED and LOCAL -->
                <xs:attribute name="mode" type="xs:string" use="optional" default="DISTRIBUTED"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:simpleType name="non-space-string">
        <xs:restriction base="xs:string">
            <xs:pattern value="\S.*"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="wan-replication">
        <xs:sequence>
            <xs:element name="target-cluster" minOccurs="1" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:sequence>
                        <xs:choice minOccurs="1" maxOccurs="1">
                            <xs:element name="replication-impl">
                                <xs:simpleType>
                                    <xs:restriction base="xs:string"/>
                                </xs:simpleType>
                            </xs:element>
                            <xs:element name="replication-impl-object">
                                <xs:complexType>
                                    <xs:complexContent>
                                        <xs:extension base="hazelcast-bean">
                                            <xs:attribute name="ref" type="xs:string" use="required"/>
                                        </xs:extension>
                                    </xs:complexContent>
                                </xs:complexType>
                            </xs:element>
                        </xs:choice>
                        <xs:element name="end-points" minOccurs="1" maxOccurs="1">
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element name="address" minOccurs="1" maxOccurs="unbounded">
                                        <xs:simpleType>
                                            <xs:restriction base="xs:string"/>
                                        </xs:simpleType>
                                    </xs:element>
                                </xs:sequence>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                    <xs:attribute name="group-name" use="required">
                        <xs:simpleType>
                            <xs:restriction base="xs:string"/>
                        </xs:simpleType>
                    </xs:attribute>
                    <xs:attribute name="group-password" use="required">
                        <xs:simpleType>
                            <xs:restriction base="xs:string"/>
                        </xs:simpleType>
                    </xs:attribute>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="name" use="required">
            <xs:simpleType>
                <xs:restriction base="xs:string"/>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="snapshot-enabled" use="optional" default="false">
            <xs:simpleType>
                <xs:restriction base="xs:boolean"/>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="partition-group">
        <xs:sequence>
            <xs:element name="member-group" minOccurs="0" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="interface" type="interface" minOccurs="0" maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="enabled" type="xs:boolean" use="required"/>
        <xs:attribute name="group-type" type="xs:string" use="optional"/>
    </xs:complexType>

    <xs:complexType name="management-center">
        <xs:attribute name="enabled" type="xs:string" default="false" use="optional"/>
        <xs:attribute name="url" type="xs:string" use="optional"/>
        <xs:attribute name="update-interval" type="xs:string" default="3" use="optional"/>
    </xs:complexType>
    <xs:complexType name="cache-entry-listener">
        <xs:attribute name="cache-entry-listener-factory" type="non-space-string" use="optional"/>
        <xs:attribute name="cache-entry-event-filter-factory" type="non-space-string" use="optional"/>
        <xs:attribute name="old-value-required" type="xs:boolean" use="optional" default="false"/>
        <xs:attribute name="synchronous" type="xs:boolean" use="optional" default="false"/>
    </xs:complexType>
    <xs:complexType name="listener">
        <xs:attribute name="class-name" type="xs:string" use="optional"/>
        <xs:attribute name="implementation" type="xs:string" use="optional"/>
    </xs:complexType>
    <xs:complexType name="item-listener">
        <xs:complexContent>
            <xs:extension base="listener">
                <xs:attribute name="include-value" type="xs:string" use="optional" default="true"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="entry-listener">
        <xs:complexContent>
            <xs:extension base="item-listener">
                <xs:attribute name="local" type="xs:string" use="optional" default="false"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="security">
        <xs:sequence>
            <xs:element name="member-credentials-factory" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="properties" type="properties" minOccurs="0" maxOccurs="1"/>
                    </xs:sequence>
                    <xs:attribute name="class-name" type="non-space-string" use="optional"/>
                    <xs:attribute name="implementation" type="non-space-string" use="optional"/>
                </xs:complexType>
            </xs:element>
            <xs:element name="member-login-modules" type="login-modules" minOccurs="0" maxOccurs="1"/>
            <xs:element name="client-login-modules" type="login-modules" minOccurs="0" maxOccurs="1"/>
            <xs:element name="client-permission-policy" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="properties" type="properties" minOccurs="0" maxOccurs="1"/>
                    </xs:sequence>
                    <xs:attribute name="class-name" type="non-space-string" use="optional"/>
                    <xs:attribute name="implementation" type="non-space-string" use="optional"/>
                </xs:complexType>
            </xs:element>
            <xs:element name="client-permissions" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="all-permissions" type="base-permission" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="map-permission" type="instance-permission" minOccurs="0"
                                    maxOccurs="unbounded"/>
                        <xs:element name="queue-permission" type="instance-permission" minOccurs="0"
                                    maxOccurs="unbounded"/>
                        <xs:element name="multimap-permission" type="instance-permission" minOccurs="0"
                                    maxOccurs="unbounded"/>
                        <xs:element name="topic-permission" type="instance-permission" minOccurs="0"
                                    maxOccurs="unbounded"/>
                        <xs:element name="list-permission" type="instance-permission" minOccurs="0"
                                    maxOccurs="unbounded"/>
                        <xs:element name="set-permission" type="instance-permission" minOccurs="0"
                                    maxOccurs="unbounded"/>
                        <xs:element name="lock-permission" type="instance-permission" minOccurs="0"
                                    maxOccurs="unbounded"/>
                        <xs:element name="atomic-long-permission" type="instance-permission" minOccurs="0"
                                    maxOccurs="unbounded"/>
                        <xs:element name="countdown-latch-permission" type="instance-permission" minOccurs="0"
                                    maxOccurs="unbounded"/>
                        <xs:element name="semaphore-permission" type="instance-permission" minOccurs="0"
                                    maxOccurs="unbounded"/>
                        <xs:element name="id-generator-permission" type="instance-permission" minOccurs="0"
                                    maxOccurs="unbounded"/>
                        <xs:element name="executor-service-permission" type="instance-permission" minOccurs="0"
                                    maxOccurs="unbounded"/>
                        <xs:element name="transaction-permission" type="base-permission" minOccurs="0" maxOccurs="1"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="security-interceptors" type="interceptors" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="enabled" type="xs:string" default="false"/>
    </xs:complexType>

    <xs:complexType name="interceptors">
        <xs:sequence>
            <xs:element name="interceptor" type="interceptor" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="interceptor">
        <xs:attribute name="class-name" type="non-space-string" use="optional"/>
        <xs:attribute name="implementation" type="non-space-string" use="optional"/>
    </xs:complexType>

    <xs:complexType name="login-modules">
        <xs:sequence>
            <xs:element name="login-module" type="login-module" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="login-module">
        <xs:sequence>
            <xs:element name="properties" type="properties" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="class-name" type="non-space-string" use="required"/>
        <xs:attribute name="usage" use="optional" default="required">
            <xs:simpleType>
                <xs:union>
                    <xs:simpleType>
                        <xs:restriction base="xs:string">
                            <xs:enumeration value="REQUIRED"/>
                            <xs:enumeration value="OPTIONAL"/>
                            <xs:enumeration value="REQUISITE"/>
                            <xs:enumeration value="SUFFICIENT"/>
                        </xs:restriction>
                    </xs:simpleType>
                    <xs:simpleType>
                        <xs:restriction base="non-space-string"/>
                    </xs:simpleType>
                </xs:union>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="base-permission">
        <xs:sequence>
            <xs:element name="endpoints" type="endpoints" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="principal" type="xs:string" use="optional" default="*">
            <xs:annotation>
                <xs:documentation>
                    Name of the principal. Wildcards(*) can be used.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="instance-permission">
        <xs:complexContent>
            <xs:extension base="base-permission">
                <xs:sequence>
                    <xs:element name="actions" type="actions" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
                <xs:attribute name="name" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>
                            Name of the permission. Wildcards(*) can be used.
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="endpoints">
        <xs:sequence>
            <xs:element name="endpoint" minOccurs="1" maxOccurs="unbounded" default="127.0.0.1">
                <xs:annotation>
                    <xs:documentation>
                        Endpoint address of principal. Wildcards(*) can be used.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string"/>
                </xs:simpleType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="actions">
        <xs:sequence>
            <xs:element name="action" minOccurs="1" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>
                        Permission actions that are permitted on Hazelcast instance objects.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:union>
                        <xs:simpleType>
                            <xs:restriction base="xs:string">
                                <xs:enumeration value="all"/>
                                <xs:enumeration value="create"/>
                                <xs:enumeration value="destroy"/>
                                <xs:enumeration value="modify"/>
                                <xs:enumeration value="read"/>
                                <xs:enumeration value="remove"/>
                                <xs:enumeration value="lock"/>
                                <xs:enumeration value="listen"/>
                                <xs:enumeration value="release"/>
                                <xs:enumeration value="acquire"/>
                                <xs:enumeration value="put"/>
                                <xs:enumeration value="add"/>
                                <xs:enumeration value="index"/>
                                <xs:enumeration value="intercept"/>
                                <xs:enumeration value="publish"/>
                            </xs:restriction>
                        </xs:simpleType>
                        <xs:simpleType>
                            <xs:restriction base="non-space-string"/>
                        </xs:simpleType>
                    </xs:union>
                </xs:simpleType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="serialization">
        <xs:sequence>
            <xs:element ref="data-serializable-factories" minOccurs="0" maxOccurs="1"/>
            <xs:element ref="portable-factories" minOccurs="0" maxOccurs="1"/>
            <xs:element ref="serializers" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="use-native-byte-order" use="optional" type="xs:string" default="false"/>
        <xs:attribute name="byte-order" use="optional" default="BIG_ENDIAN">
            <xs:simpleType>
                <xs:restriction base="non-space-string">
                    <xs:enumeration value="BIG_ENDIAN"/>
                    <xs:enumeration value="LITTLE_ENDIAN"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="portable-version" use="optional" type="xs:string"/>
        <xs:attribute name="check-class-def-errors" use="optional" type="xs:string" default="false"/>
        <xs:attribute name="enable-compression" use="optional" type="xs:string" default="false"/>
        <xs:attribute name="enable-shared-object" use="optional" type="xs:string" default="false"/>
        <xs:attribute name="allow-unsafe" use="optional" type="xs:string" default="false"/>
    </xs:complexType>

    <xs:complexType name="network-client">
        <xs:sequence>
            <xs:element name="member" type="member" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="socket-options" type="socket-options" minOccurs="0" maxOccurs="1"/>
            <xs:element name="socket-interceptor" type="socket-interceptor" minOccurs="0" maxOccurs="1"/>
            <xs:element name="ssl" type="ssl" minOccurs="0" maxOccurs="1"/>
            <xs:element name="aws" type="aws-client" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="smart-routing" use="optional" type="xs:boolean" default="false"/>
        <xs:attribute name="redo-operation" use="optional" type="xs:boolean" default="false"/>
        <xs:attribute name="connection-timeout" use="optional" type="intMin1" default="60000"/>
        <xs:attribute name="connection-attempt-period" use="optional" type="intMin1" default="3000"/>
        <xs:attribute name="connection-attempt-limit" use="optional" type="intMin0" default="2"/>
    </xs:complexType>

    <xs:complexType name="socket-options">
        <xs:attribute name="tcp-no-delay" type="xs:boolean" use="optional" default="false"/>
        <xs:attribute name="keep-alive" type="xs:boolean" use="optional" default="true"/>
        <xs:attribute name="reuse-address" type="xs:boolean" use="optional" default="true"/>
        <xs:attribute name="linger-seconds" type="xs:unsignedInt" use="optional" default="3"/>
        <xs:attribute name="buffer-size" use="optional" default="32">
            <xs:simpleType>
                <xs:restriction base="xs:unsignedInt">
                    <xs:minInclusive value="1"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="services">
        <xs:sequence>
            <xs:element name="service" type="service" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="enable-defaults" type="xs:boolean" default="true"/>
    </xs:complexType>
    <xs:complexType name="service">
        <xs:sequence>
            <xs:element name="name" type="xs:string" minOccurs="1" maxOccurs="1"/>
            <xs:element name="class-name" type="xs:string" minOccurs="0" maxOccurs="1"/>
            <xs:element name="properties" type="properties" minOccurs="0" maxOccurs="1"/>
            <xs:element name="configuration" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <xs:sequence>
                        <xs:any minOccurs="0" maxOccurs="unbounded"/>
                    </xs:sequence>
                    <xs:attribute name="parser" type="xs:string" use="required"/>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="enabled" type="xs:boolean" default="true"/>
    </xs:complexType>

    <xs:simpleType name="parameterizedValueType">
        <xs:restriction base="xs:string">
            <xs:pattern value="(\$|\#)\{([^=^:]+)\}"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="intMin1">
        <xs:union memberTypes="xs:positiveInteger parameterizedValueType"/>
    </xs:simpleType>
    <xs:simpleType name="intMin0">
        <xs:union memberTypes="xs:nonNegativeInteger parameterizedValueType"/>
    </xs:simpleType>

    <xs:complexType name="listeners">
        <xs:sequence>
            <xs:element name="listener" type="listener" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="client-security">
        <xs:sequence>
            <xs:element name="credentials" type="credentials" minOccurs="1" maxOccurs="1"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="credentials">
        <xs:annotation>
            <xs:documentation>Credentials className
            </xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="non-space-string"/>
        </xs:simpleContent>
    </xs:complexType>
    <xs:complexType name="proxy-factories">
        <xs:sequence>
            <xs:element name="proxy-factory" type="proxy-factory" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="proxy-factory">
        <xs:attribute name="service">
            <xs:simpleType>
                <xs:restriction base="non-space-string"/>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="class-name">
            <xs:simpleType>
                <xs:restriction base="non-space-string"/>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="load-balancer">
        <xs:attribute name="type" use="required">
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="random"/>
                    <xs:enumeration value="round-robin"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="near-cache-client">
        <xs:complexContent>
            <xs:extension base="near-cache">
                <xs:attribute name="name" use="required">
                    <xs:simpleType>
                        <xs:restriction base="xs:string"/>
                    </xs:simpleType>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="aws-client">
        <xs:complexContent>
            <xs:extension base="aws">
                <xs:attribute name="inside-aws" use="optional" type="xs:boolean" default="false"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="near-cache">
        <xs:sequence>
            <xs:element name="eviction" type="eviction" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="max-size" use="optional" type="xs:string" default="0"/>
        <xs:attribute name="time-to-live-seconds" use="optional" type="xs:string" default="0"/>
        <xs:attribute name="max-idle-seconds" use="optional" type="xs:string" default="0"/>
        <xs:attribute name="eviction-policy" use="optional" type="eviction-policy" default="LRU"/>
        <xs:attribute name="invalidate-on-change" use="optional" type="xs:string" default="true"/>
        <xs:attribute name="cache-local-entries" use="optional" type="xs:string" default="false"/>
        <xs:attribute name="in-memory-format" type="in-memory-format" use="optional" default="BINARY"/>
    </xs:complexType>

    <xs:complexType name="query-caches">
        <xs:sequence>
            <xs:element name="query-cache" type="query-cache" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="query-cache">
        <xs:all>
            <xs:element name="include-value" type="xs:boolean" minOccurs="0" maxOccurs="1" default="true"/>
            <xs:element name="predicate" type="predicate" minOccurs="1" maxOccurs="1"/>
            <xs:element name="entry-listeners" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>
                        This configuration lets you add listeners (listener classes) for the
                        map entries.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="entry-listener" type="entry-listener" minOccurs="0"
                                    maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="in-memory-format" type="in-memory-format" minOccurs="0" maxOccurs="1" default="BINARY"/>
            <xs:element name="populate" type="xs:boolean" minOccurs="0" maxOccurs="1" default="true"/>
            <xs:element name="coalesce" type="xs:boolean" minOccurs="0" maxOccurs="1" default="false"/>
            <xs:element name="delay-seconds" type="xs:unsignedInt" minOccurs="0" maxOccurs="1" default="0"/>
            <xs:element name="batch-size" type="xs:unsignedInt" minOccurs="0" maxOccurs="1" default="1"/>
            <xs:element name="buffer-size" type="xs:unsignedInt" minOccurs="0" maxOccurs="1" default="16"/>
            <xs:element name="eviction" type="eviction" minOccurs="0" maxOccurs="1"/>
            <xs:element name="indexes" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>
                        This configuration lets you index the attributes and also order them.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="index" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:attribute name="attribute" type="xs:string" use="required"/>
                                <xs:attribute name="ordered" type="xs:string" use="optional"
                                              default="false"/>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:all>
        <xs:attribute name="name" use="required">
            <xs:simpleType>
                <xs:restriction base="xs:string"/>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="query-caches-client">
        <xs:sequence>
            <xs:element name="query-cache" type="query-cache-client" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="query-cache-client">
        <xs:all>
            <xs:element name="include-value" type="xs:boolean" minOccurs="0" maxOccurs="1" default="true"/>
            <xs:element name="predicate" type="predicate" minOccurs="1" maxOccurs="1"/>
            <xs:element name="entry-listeners" type="entry-listeners" minOccurs="0" maxOccurs="1"/>
            <xs:element name="in-memory-format" type="in-memory-format" minOccurs="0" maxOccurs="1" default="BINARY"/>
            <xs:element name="populate" type="xs:boolean" minOccurs="0" maxOccurs="1" default="true"/>
            <xs:element name="coalesce" type="xs:boolean" minOccurs="0" maxOccurs="1" default="false"/>
            <xs:element name="delay-seconds" type="xs:unsignedInt" minOccurs="0" maxOccurs="1" default="0"/>
            <xs:element name="batch-size" type="xs:unsignedInt" minOccurs="0" maxOccurs="1" default="1"/>
            <xs:element name="buffer-size" type="xs:unsignedInt" minOccurs="0" maxOccurs="1" default="16"/>
            <xs:element name="eviction" type="eviction" minOccurs="0" maxOccurs="1"/>
            <xs:element name="indexes" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>
                        This configuration lets you index the attributes and also order them.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="index" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:attribute name="attribute" type="xs:string" use="required"/>
                                <xs:attribute name="ordered" type="xs:string" use="optional"
                                              default="false"/>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:all>
        <xs:attribute name="name" use="required">
            <xs:simpleType>
                <xs:restriction base="xs:string"/>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="mapName" use="required">
            <xs:simpleType>
                <xs:restriction base="xs:string"/>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="predicate">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="type" use="required">
                    <xs:simpleType>
                        <xs:restriction base="non-space-string">
                            <xs:enumeration value="class-name"/>
                            <xs:enumeration value="sql"/>
                        </xs:restriction>
                    </xs:simpleType>
                </xs:attribute>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    <xs:complexType name="index">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="ordered" type="xs:boolean" use="optional" default="false"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    <xs:complexType name="entry-listeners">
        <xs:sequence>
            <xs:element name="entry-listener" type="entry-listener" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="listener-base">
        <xs:annotation>
            <xs:documentation>One of membership-listener, instance-listener or migration-listener
            </xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="non-space-string"/>
        </xs:simpleContent>
    </xs:complexType>
    <xs:simpleType name="eviction-policy-enum">
        <xs:restriction base="xs:string">
            <xs:enumeration value="NONE"/>
            <xs:enumeration value="LRU"/>
            <xs:enumeration value="LFU"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="eviction-policy">
        <xs:union memberTypes="eviction-policy-enum non-space-string"/>
    </xs:simpleType>

    <xs:simpleType name="in-memory-format-enum">
        <xs:restriction base="xs:string">
            <xs:enumeration value="BINARY"/>
            <xs:enumeration value="OBJECT"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="in-memory-format">
        <xs:union memberTypes="in-memory-format-enum non-space-string"/>
    </xs:simpleType>

    <xs:simpleType name="time-unit">
        <xs:restriction base="non-space-string">
            <xs:enumeration value="NANOSECONDS"/>
            <xs:enumeration value="MICROSECONDS"/>
            <xs:enumeration value="MILLISECONDS"/>
            <xs:enumeration value="SECONDS"/>
            <xs:enumeration value="MINUTES"/>
            <xs:enumeration value="HOURS"/>
            <xs:enumeration value="DAYS"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="expiry-policy-type">
        <xs:restriction base="non-space-string">
            <xs:enumeration value="CREATED"/>
            <xs:enumeration value="ACCESSED"/>
            <xs:enumeration value="ETERNAL"/>
            <xs:enumeration value="MODIFIED"/>
            <xs:enumeration value="TOUCHED"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="timed-expiry-policy-factory">
        <xs:attribute name="expiry-policy-type" type="expiry-policy-type" use="required"/>
        <xs:attribute name="duration-amount" type="xs:unsignedLong" use="optional"/>
        <xs:attribute name="time-unit" type="time-unit" use="optional"/>
    </xs:complexType>

    <xs:simpleType name="concurrency-level">
        <xs:restriction base="xs:int">
            <xs:minInclusive value="0"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="topology-changed-strategy">
        <xs:restriction base="xs:string">
            <xs:enumeration value="CANCEL_RUNNING_OPERATION"/>
            <xs:enumeration value="DISCARD_AND_RESTART"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="max-size-policy">
        <xs:restriction base="xs:string">
            <xs:enumeration value="ENTRY_COUNT"/>
            <xs:enumeration value="USED_NATIVE_MEMORY_SIZE"/>
            <xs:enumeration value="USED_NATIVE_MEMORY_PERCENTAGE"/>
            <xs:enumeration value="FREE_NATIVE_MEMORY_SIZE"/>
            <xs:enumeration value="FREE_NATIVE_MEMORY_PERCENTAGE"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="eviction">
        <xs:attribute name="size" type="xs:nonNegativeInteger" default="10000" use="optional"/>
        <xs:attribute name="max-size-policy" type="max-size-policy" default="ENTRY_COUNT" use="optional"/>
        <xs:attribute name="eviction-policy" type="eviction-policy" default="LRU" use="optional"/>
    </xs:complexType>

    <xs:complexType name="wan-replication-ref">
        <xs:attribute name="name" use="required" type="xs:string"/>
        <xs:attribute name="merge-policy" use="required" type="xs:string"/>
        <xs:attribute name="republishing-enabled" use="optional" type="xs:boolean" default="true"/>
    </xs:complexType>
    <xs:complexType name="native-memory">
        <xs:all>
            <xs:element name="size" type="memory-size" minOccurs="0" maxOccurs="1"/>
        </xs:all>
        <xs:attribute name="min-block-size" use="optional" type="xs:positiveInteger"/>
        <xs:attribute name="page-size" use="optional" type="xs:positiveInteger"/>
        <xs:attribute name="metadata-space-percentage" use="optional">
            <xs:simpleType>
                <xs:restriction base="xs:decimal">
                    <xs:totalDigits value="3"/>
                    <xs:fractionDigits value="1"/>
                    <xs:minInclusive value="5"/>
                    <xs:maxInclusive value="95"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="allocator-type" default="POOLED" type="memory-allocator-type"/>
        <xs:attribute name="enabled" default="true" type="xs:boolean"/>
    </xs:complexType>
    <xs:complexType name="memory-size">
        <xs:attribute name="value" type="xs:int" default="128"/>
        <xs:attribute name="unit" type="memory-unit" default="MEGABYTES"/>
    </xs:complexType>
    <xs:simpleType name="memory-unit">
        <xs:restriction base="xs:string">
            <xs:enumeration value="BYTES"/>
            <xs:enumeration value="KILOBYTES"/>
            <xs:enumeration value="MEGABYTES"/>
            <xs:enumeration value="GIGABYTES"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="memory-allocator-type">
        <xs:restriction base="xs:string">
            <xs:enumeration value="STANDARD"/>
            <xs:enumeration value="POOLED"/>
        </xs:restriction>
    </xs:simpleType>


    <xs:complexType name="quorum">
        <xs:all>
            <xs:element name="quorum-size" type="quorum-size" maxOccurs="1"/>
            <xs:element name="quorum-type" type="quorum-type" maxOccurs="1"/>
            <xs:element name="quorum-function-class-name" type="xs:string" maxOccurs="1"/>
            <xs:element name="quorum-listeners" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="quorum-listener" type="quorum-listener" maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:all>
        <xs:attribute name="enabled" type="xs:boolean" use="required"/>
        <xs:attribute name="name" use="required">
            <xs:simpleType>
                <xs:restriction base="xs:string"/>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>

    <xs:simpleType name="quorum-type">
        <xs:restriction base="xs:string">
            <xs:enumeration value="READ"/>
            <xs:enumeration value="WRITE"/>
            <xs:enumeration value="READ_WRITE"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="quorum-size">
        <xs:restriction base="xs:int">
            <xs:minInclusive value="0"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="quorum-listener">
        <xs:complexContent>
            <xs:extension base="listener">
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
</xs:schema>
