<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2008-2018, Hazelcast, Inc. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns="http://www.hazelcast.com/schema/spring"
           xmlns:tool="http://www.springframework.org/schema/tool"
           targetNamespace="http://www.hazelcast.com/schema/spring"
           elementFormDefault="qualified"
           attributeFormDefault="unqualified">

    <xs:import namespace="http://www.springframework.org/schema/tool"
               schemaLocation="http://www.springframework.org/schema/tool/spring-tool.xsd"/>
    <xs:element name="config">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="hazelcast-bean">
                    <xs:sequence>
                        <xs:element name="spring-aware" type="xs:string" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="instance-name" type="xs:string" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="group" type="group" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="license-key" type="xs:string" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="management-center" type="management-center" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="properties" type="properties" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="wan-replication" type="wan-replication" minOccurs="0" maxOccurs="unbounded"/>
                        <xs:element name="network" type="network" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="partition-group" type="partition-group" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="executor-service" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:sequence/>
                                <xs:attribute name="name" use="required" type="xs:string"/>
                                <xs:attribute name="pool-size" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            The number of executor threads per Member for the Executor.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="queue-capacity" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Executor's task queue capacity. 0 means Integer.MAX_VALUE.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="statistics-enabled" type="parameterized-boolean"
                                              use="optional" default="true">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Enable/disable statistics
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="durable-executor-service" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:sequence/>
                                <xs:attribute name="name" use="required" type="xs:string"/>
                                <xs:attribute name="pool-size" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            The number of executor threads per Member for the Executor.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="durability" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            The durability of the executor
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="capacity" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Executor's task capacity (per partition)
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="scheduled-executor-service" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:sequence/>
                                <xs:attribute name="name" use="required" type="xs:string"/>
                                <xs:attribute name="pool-size" use="optional" type="xs:string" default="16">
                                    <xs:annotation>
                                        <xs:documentation>
                                            The number of executor threads per member for the executor.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="durability" use="optional" type="xs:string" default="1">
                                    <xs:annotation>
                                        <xs:documentation>
                                            The durability of the scheduled executor.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="capacity" use="optional" type="xs:string" default="100">
                                    <xs:annotation>
                                        <xs:documentation>
                                            The maximum number of tasks that a scheduler can have at any given point
                                            in time per partition.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="cardinality-estimator" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:all>
                                    <xs:element name="backup-count" type="backup-count" minOccurs="0" maxOccurs="1" default="1">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Number of synchronous backups. For example, if 1 is set as the backup-count,
                                                then the cardinality estimation will be copied to one other JVM for
                                                fail-safety. Valid numbers are 0 (no backup), 1, 2 ... 6.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:element>
                                    <xs:element name="async-backup-count" type="backup-count" minOccurs="0" maxOccurs="1" default="0">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Number of asynchronous backups. For example, if 1 is set as the async-backup-count,
                                                then cardinality estimation will be copied to one other JVM (asynchronously) for
                                                fail-safety. Valid numbers are 0 (no backup), 1, 2 ... 6.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:element>
                                </xs:all>
                                <xs:attribute name="name" type="xs:string" use="optional" default="default">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Name of the cardinality estimator.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="queue" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element name="item-listeners" minOccurs="0" maxOccurs="1">
                                        <xs:complexType>
                                            <xs:sequence>
                                                <xs:element name="item-listener" type="item-listener" minOccurs="0"
                                                            maxOccurs="unbounded"/>
                                            </xs:sequence>
                                        </xs:complexType>
                                    </xs:element>
                                    <xs:element name="queue-store" minOccurs="0" maxOccurs="1">
                                        <xs:complexType>
                                            <xs:sequence>
                                                <xs:element name="properties" type="properties" minOccurs="0"
                                                            maxOccurs="1"/>
                                            </xs:sequence>
                                            <xs:attribute name="enabled" use="required" type="xs:string"/>
                                            <xs:attribute name="class-name" use="optional" type="xs:string"/>
                                            <xs:attribute name="factory-class-name" use="optional" type="xs:string"/>
                                            <xs:attribute name="store-implementation" use="optional" type="xs:string"/>
                                            <xs:attribute name="factory-implementation" use="optional"
                                                          type="xs:string"/>
                                        </xs:complexType>
                                    </xs:element>
                                    <xs:element name="quorum-ref" minOccurs="0" maxOccurs="1"/>
                                </xs:sequence>
                                <xs:attribute name="name" use="required" type="xs:string"/>
                                <xs:attribute name="max-size" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Value of maximum size of items in the Queue.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="backup-count" use="optional" type="parameterized-backup-count">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Count of synchronous backups. Remember that, Queue is a non-partitioned
                                            data structure, i.e. all entries of a Set resides in one partition. When
                                            this parameter is '1', it means there will be a backup of that Set in
                                            another node in the cluster. When it is '2', 2 nodes will have the backup.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="async-backup-count" use="optional" type="parameterized-backup-count">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Count of asynchronous backups.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="statistics-enabled" type="parameterized-boolean"
                                              use="optional" default="true">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Enable/disable statistics.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="empty-queue-ttl" use="optional" default="-1">
                                    <xs:simpleType>
                                        <xs:restriction base="xs:int">
                                            <xs:minInclusive value="-1"/>
                                        </xs:restriction>
                                    </xs:simpleType>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="lock" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element name="quorum-ref" minOccurs="0" maxOccurs="1"/>
                                </xs:sequence>
                                <xs:attribute name="name" use="required" type="xs:string"/>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="ringbuffer" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element name="ringbuffer-store" minOccurs="0" maxOccurs="1">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Includes the ring buffer store factory class name. The store format is the same as
                                                the in-memory-format for the ringbuffer.
                                            </xs:documentation>
                                        </xs:annotation>
                                        <xs:complexType>
                                            <xs:attribute name="enabled" use="required" type="parameterized-boolean"/>
                                            <xs:attributeGroup ref="class-or-bean-name">
                                                <xs:annotation>
                                                    <xs:documentation>
                                                        Name of the class or bean implementing MapLoader and/or MapStore.
                                                    </xs:documentation>
                                                </xs:annotation>
                                            </xs:attributeGroup>
                                            <xs:attribute name="factory-class-name" use="optional" type="xs:string"/>
                                            <xs:attribute name="factory-implementation" use="optional"
                                                          type="xs:string"/>
                                        </xs:complexType>
                                    </xs:element>
                                </xs:sequence>
                                <xs:attribute name="name" use="required" type="xs:string"/>
                                <xs:attribute name="capacity" use="optional" type="parameterized-unsigned-int">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Number of items in the ringbuffer. If no time-to-live-seconds is set, the size will
                                            always
                                            be equal to capacity after the head completed the first loop around the ring. This is
                                            because no items are getting retired. The default value is 10000.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="backup-count" use="optional" type="parameterized-backup-count" default="1">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Number of synchronous backups. For example, if 1 is set as the backup-count,
                                            then the items in the ringbuffer are copied to one other JVM for fail-safety.
                                            `backup-count` + `async-backup-count` cannot be bigger than maximum
                                            backup count which is `6`. Valid numbers are 0 (no backup), 1, 2 ... 6.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="async-backup-count" use="optional" type="parameterized-backup-count"
                                              default="0">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Number of asynchronous backups. For example, if 1 is set as the backup-count,
                                            then the items in the ringbuffer are copied to one other JVM for fail-safety.
                                            `backup-count` + `async-backup-count` cannot be bigger than maximum
                                            backup count which is `6`. Valid numbers are 0 (no backup), 1, 2 ... 6.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="time-to-live-seconds" use="optional" type="parameterized-unsigned-int">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Maximum number of seconds for each entry to stay in the ringbuffer. Entries that are
                                            older than &lt;time-to-live-seconds&gt; and are not updated for &lt;time-to-live-seconds&gt;
                                            are automatically evicted from the map.
                                            Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. Default is 0.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="in-memory-format" use="optional" type="in-memory-format" default="BINARY">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Data type used to store entries.
                                            Possible values:
                                            BINARY (default): keys and values are stored as binary data.
                                            OBJECT: values are stored in their object forms.
                                            NATIVE: keys and values are stored in native memory. Only available on Hazelcast
                                            Enterprise.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="semaphore" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:attribute name="name" use="required" type="xs:string"/>
                                <xs:attribute name="initial-permits" use="optional" type="parameterized-unsigned-int">
                                    <xs:annotation>
                                        <xs:documentation>
                                            The thread count to which the concurrent access is limited. For example, if you set
                                            it to "3", concurrent access to the object is limited to 3 threads.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="backup-count" use="optional" type="parameterized-backup-count" default="1">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Number of synchronous backups. For example, if 1 is set as the backup-count,
                                            then the items in the ringbuffer are copied to one other JVM for fail-safety.
                                            `backup-count` + `async-backup-count` cannot be bigger than maximum
                                            backup count which is `6`. Valid numbers are 0 (no backup), 1, 2 ... 6.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="async-backup-count" use="optional" type="parameterized-backup-count"
                                              default="0">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Number of asynchronous backups. For example, if 1 is set as the backup-count,
                                            then the items in the ringbuffer are copied to one other JVM for fail-safety.
                                            `backup-count` + `async-backup-count` cannot be bigger than maximum
                                            backup count which is `6`. Valid numbers are 0 (no backup), 1, 2 ... 6.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="reliable-topic" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element name="message-listeners" minOccurs="0" maxOccurs="1">
                                        <xs:complexType>
                                            <xs:sequence>
                                                <xs:element name="message-listener" type="listener" minOccurs="0"
                                                            maxOccurs="unbounded"/>
                                            </xs:sequence>
                                        </xs:complexType>
                                    </xs:element>
                                </xs:sequence>
                                <xs:attribute name="name" use="required" type="xs:string"/>
                                <xs:attribute name="statistics-enabled" type="parameterized-boolean" use="optional" default="true">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Enable/disable statistics.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="read-batch-size" use="optional" type="xs:int" default="10">
                                    <xs:annotation>
                                        <xs:documentation>
                                            The maximum number of items to read in a batch.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="topic-overload-policy" use="optional" type="topic-overload-policy">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Policy to handle an overloaded topic. Available values are `DISCARD_OLDEST`, `DISCARD_NEWEST`,
                                            `BLOCK` and `ERROR`. The default value is `BLOCK.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="map" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element name="map-store" minOccurs="0" maxOccurs="1">
                                        <xs:complexType>
                                            <xs:sequence>
                                                <xs:element name="properties" type="properties" minOccurs="0"
                                                            maxOccurs="1"/>
                                            </xs:sequence>
                                            <xs:attribute name="enabled" use="required" type="xs:string"/>
                                            <xs:attributeGroup ref="class-or-bean-name">
                                                  <xs:annotation>
                                                      <xs:documentation>
                                                        Name of the class or bean implementing MapLoader and/or MapStore.
                                                      </xs:documentation>
                                                  </xs:annotation>
                                            </xs:attributeGroup>
                                            <xs:attribute name="factory-class-name" use="optional" type="xs:string"/>
                                            <xs:attribute name="factory-implementation" use="optional"
                                                          type="xs:string"/>
                                            <xs:attribute name="write-delay-seconds" use="required" type="xs:string">
                                                <xs:annotation>
                                                    <xs:documentation>
                                                        Number of seconds to delay to call the MapStore.store(key,
                                                        value).
                                                        If the value is zero then it is write-through so
                                                        MapStore.store(key, value) will be called as soon as the
                                                        entry is updated. Otherwise it is write-behind so updates will
                                                        be stored after write-delay-seconds value by calling
                                                        Hazelcast.storeAll(map). Default value is 0.
                                                    </xs:documentation>
                                                </xs:annotation>
                                            </xs:attribute>
                                            <xs:attribute name="write-batch-size" use="optional" type="xs:string">
                                                <xs:annotation>
                                                    <xs:documentation>
                                                        Used to create batch chunks when writing map store. In default
                                                        mode all entries will be tried to persist in one go. To create
                                                        batch chunks, minimum meaningful value for write-batch-size is
                                                        2.
                                                        For values smaller than 2, it works as in default mode.
                                                    </xs:documentation>
                                                </xs:annotation>
                                            </xs:attribute>
                                            <xs:attribute name="write-coalescing" use="optional" type="parameterized-boolean"
                                                          default="true">
                                                <xs:annotation>
                                                    <xs:documentation>
                                                        Setting write-coalescing is meaningful if you are using
                                                        write-behind map-store. Otherwise it has no effect.
                                                        When write-coalescing is true, only the latest
                                                        store operation on a key in the write-delay-seconds
                                                        time-window will be reflected to the map-store.
                                                    </xs:documentation>
                                                </xs:annotation>
                                            </xs:attribute>
                                            <xs:attribute name="initial-mode">
                                                <xs:simpleType>
                                                    <xs:restriction base="non-space-string">
                                                        <xs:enumeration value="LAZY"/>
                                                        <xs:enumeration value="EAGER"/>
                                                    </xs:restriction>
                                                </xs:simpleType>
                                            </xs:attribute>
                                        </xs:complexType>
                                    </xs:element>
                                    <xs:element name="near-cache" type="near-cache" minOccurs="0" maxOccurs="1"/>
                                    <xs:element name="query-caches" type="query-caches" minOccurs="0" maxOccurs="1"/>
                                    <xs:element name="wan-replication-ref" type="wan-replication-ref" minOccurs="0"
                                                maxOccurs="1">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Hazelcast can replicate some or all of the cluster data. For example,
                                                you can have 5 different maps but you want only one of these maps
                                                replicating across clusters. To achieve this you mark the maps
                                                to be replicated by adding this element.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:element>
                                    <xs:element name="indexes" minOccurs="0" maxOccurs="1">
                                        <xs:annotation>
                                            <xs:documentation>
                                                This configuration lets you index the attributes and also order them.
                                            </xs:documentation>
                                        </xs:annotation>
                                        <xs:complexType>
                                            <xs:sequence>
                                                <xs:element name="index" minOccurs="0" maxOccurs="unbounded">
                                                    <xs:complexType>
                                                        <xs:attribute name="attribute" type="xs:string" use="required"/>
                                                        <xs:attribute name="ordered" type="xs:string" use="optional"
                                                                      default="false"/>
                                                    </xs:complexType>
                                                </xs:element>
                                            </xs:sequence>
                                        </xs:complexType>
                                    </xs:element>
                                    <xs:element name="attributes" minOccurs="0" maxOccurs="1">
                                        <xs:annotation>
                                            <xs:documentation>
                                                This configuration lets you define extractors for custom attributes.
                                            </xs:documentation>
                                        </xs:annotation>
                                        <xs:complexType>
                                            <xs:sequence>
                                                <xs:element name="attribute" minOccurs="0" maxOccurs="unbounded">
                                                    <xs:complexType>
                                                        <xs:attribute name="name" type="xs:string" use="required"/>
                                                        <xs:attribute name="extractor" type="xs:string" use="required"/>
                                                    </xs:complexType>
                                                </xs:element>
                                            </xs:sequence>
                                        </xs:complexType>
                                    </xs:element>
                                    <xs:element name="entry-listeners" minOccurs="0" maxOccurs="1">
                                        <xs:annotation>
                                            <xs:documentation>
                                                This configuration lets you add listeners (listener classes) for the
                                                map entries.
                                            </xs:documentation>
                                        </xs:annotation>
                                        <xs:complexType>
                                            <xs:sequence>
                                                <xs:element name="entry-listener" type="entry-listener" minOccurs="0"
                                                            maxOccurs="unbounded"/>
                                            </xs:sequence>
                                        </xs:complexType>
                                    </xs:element>
                                    <xs:element name="quorum-ref" minOccurs="0" maxOccurs="1"/>
                                    <xs:element name="partition-lost-listeners" minOccurs="0" maxOccurs="1">
                                        <xs:annotation>
                                            <xs:documentation>List of partition lost listeners</xs:documentation>
                                        </xs:annotation>
                                        <xs:complexType>
                                            <xs:sequence>
                                                <xs:element name="partition-lost-listener" type="listener"
                                                            minOccurs="0"
                                                            maxOccurs="unbounded"/>
                                            </xs:sequence>
                                        </xs:complexType>
                                    </xs:element>
                                    <xs:element name="hot-restart" type="hot-restart" minOccurs="0" maxOccurs="1" />
                                    <xs:element name="map-eviction-policy" type="map-eviction-policy" minOccurs="0" maxOccurs="1">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Internal eviction algorithm finds most appropriate entry
                                                to evict from this map by using this policy.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:element>
                                    <xs:element name="partition-strategy" type="xs:string" minOccurs="0" maxOccurs="1"/>
                                </xs:sequence>
                                <xs:attribute name="name" use="required" type="xs:string"/>
                                <xs:attribute name="in-memory-format" use="optional" type="xs:string" default="BINARY">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Data type used to store entries.
                                            Possible values:
                                            BINARY (default): keys and values are stored as binary data.
                                            OBJECT: values are stored in their object forms.
                                            NATIVE: keys and values are stored in native memory. Only available on Hazelcast Enterprise.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="statistics-enabled" use="optional" type="parameterized-boolean"
                                              default="true">
                                    <xs:annotation>
                                        <xs:documentation>
                                            You can retrieve some statistics like owned entry count, backup entry count,
                                            last update time, locked entry count by setting this parameter's value
                                            as "true". The method for retrieving the statistics is `getLocalMapStats()`.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="optimize-queries" use="optional" type="parameterized-boolean">
                                    <xs:annotation>
                                        <xs:documentation>
                                            This parameter is deprecated as of Hazelcast 3.6
                                            Use cache-deserialized-values attribute instead.

                                            When both optimize-query and cache-deserialized-values are used at the same time
                                            Hazelcast will do its best to detect possible conflicts. Conflict detection
                                            is done on best-effort basis and you should not rely on it.

                                            This parameter is used to increase the speed of query processes in the map.
                                            It only works when `in-memory-format` is set as `BINARY` and performs
                                            a pre-caching on the entries queried.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="cache-deserialized-values" use="optional" type="cache-deserialized">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Control caching of de-serialized values. Caching makes query evaluation faster, but it cost memory.
                                            Possible Values:
                                            NEVER: Never cache de-serialized object
                                            INDEX-ONLY: Cache values only when they are inserted into an index.
                                            ALWAYS: Always cache de-serialized values.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="backup-count" use="optional" type="parameterized-backup-count">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Number of sync backups. If 1 is set as the backup-count for example, then
                                            all
                                            entries of the map will be copied to another JVM for fail-safety. Valid
                                            numbers are 0 (no backup), 1, 2 ... 6.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="async-backup-count" use="optional" type="parameterized-backup-count">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Number of async backups. If 1 is set as the backup-count for example, then
                                            all
                                            entries of the map will be copied to another JVM for fail-safety. Valid
                                            numbers are 0 (no backup), 1, 2 ... 6.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="time-to-live-seconds" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Maximum number of seconds for each entry to stay in the map. Entries that
                                            are older than `time-to-live-seconds` and not updated for
                                            `time-to-live-seconds` will get automatically evicted from the map. Any
                                            integer between 0 and Integer.MAX_VALUE. 0 means infinite. Default is 0.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="max-size" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Maximum size. Any integer between 0 and Integer.MAX_VALUE. 0 means
                                            Integer.MAX_VALUE. Default is 0.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <!--max-size-policy attribute didn't converted into enumeration to support case-insensitivity-->
                                <xs:attribute name="max-size-policy" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Valid values are:
                                            PER_NODE: Maximum number of map entries in each Hazelcast instance.
                                            This is the default policy.
                                            PER_PARTITION: Maximum number of map entries within each partition. Storage size
                                            depends on the partition count in a Hazelcast instance.
                                            This attribute should not be used often.
                                            Avoid using this attribute with a small cluster: if the cluster is small it will
                                            be hosting more partitions, and therefore map entries, than that of a larger
                                            cluster. Thus, for a small cluster, eviction of the entries will decrease
                                            performance (the number of entries is large).
                                            USED_HEAP_SIZE: Maximum used heap size in megabytes per map for each Hazelcast instance.
                                            USED_HEAP_PERCENTAGE: Maximum used heap size percentage per map for each Hazelcast instance.
                                            If, for example, JVM is configured to have 1000 MB and this value is 10, then the map
                                            entries will be evicted when used heap size exceeds 100 MB.
                                            FREE_HEAP_SIZE: Minimum free heap size in megabytes for each JVM.
                                            FREE_HEAP_PERCENTAGE: Minimum free heap size percentage for each JVM.
                                            For example, if JVM is configured to have 1000 MB and this value is 10,
                                            then the map entries will be evicted when free heap size is below 100 MB.
                                            USED_NATIVE_MEMORY_SIZE: Maximum used native memory size in megabytes per map
                                            for each Hazelcast instance.
                                            USED_NATIVE_MEMORY_PERCENTAGE: Maximum used native memory size percentage per map
                                            for each Hazelcast instance.
                                            FREE_NATIVE_MEMORY_SIZE: Minimum free native memory size in megabytes
                                            for each Hazelcast instance.
                                            FREE_NATIVE_MEMORY_PERCENTAGE: Minimum free native memory size percentage
                                            for each Hazelcast instance.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="max-idle-seconds" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Maximum number of seconds for each entry to stay idle in the map. Entries
                                            that are idle(not touched) for more than max-idle-seconds will get
                                            automatically evicted from the map. Entry is touched if get, put or
                                            containsKey is called. Any integer between 0 and Integer.MAX_VALUE. 0 means
                                            infinite. Default is 0.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="eviction-percentage" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            This parameter is deprecated as of version 3.7 due to the eviction mechanism change.
                                            (New eviction mechanism uses a probabilistic algorithm based on sampling. Please see documentation for further details.)

                                            When max. size is reached, specified percentage of the map will be evicted.
                                            Any integer between 0 and 100. If 25 is set for example, 25% of the
                                            entries will get evicted.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="min-eviction-check-millis" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            This parameter is deprecated as of version 3.7 due to the eviction mechanism change.
                                            (New eviction mechanism uses a probabilistic algorithm based on sampling. Please see documentation for further details.)

                                            Minimum time in milliseconds which should pass before checking if a
                                            partition of this map is evictable or not. Default value is 100 millis.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="eviction-policy" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Valid values are: NONE (no eviction), LRU (Least Recently Used), LFU
                                            (Least Frequently Used). NONE is the default.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="merge-policy" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            While recovering from split-brain (network partitioning), map entries in
                                            the small cluster will merge into the bigger cluster based on the policy set
                                            here. When an entry merge into the cluster, there might an existing entry
                                            with the same key already. Values of these entries might be different for
                                            that same key. Which value should be set for the key? Conflict is resolved
                                            by the policy set here.
                                            <p>
                                                <br/>
                                                There are built-in merge policies such as:
                                                <br/>
                                                com.hazelcast.map.merge.PassThroughMergePolicy; entry will be added if
                                                there is no existing entry for the key.
                                                <br/>
                                                com.hazelcast.map.merge.PutIfAbsentMapMergePolicy ; entry will be added
                                                if
                                                the merging entry doesn't exist in the cluster.
                                                <br/>
                                                com.hazelcast.map.merge.HigherHitsMapMergePolicy ; entry with the higher
                                                hits wins.
                                                <br/>
                                                com.hazelcast.map.merge.LatestUpdateMapMergePolicy ; entry with the
                                                latest
                                                update wins.
                                                <br/>
                                                Default policy is 'com.hazelcast.map.merge.PutIfAbsentMapMergePolicy'
                                            </p>
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="read-backup-data" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            This boolean parameter enables reading local backup entries when set as
                                            `true`.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="cache" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element name="eviction" type="eviction" minOccurs="0" maxOccurs="1">
                                        <xs:annotation>
                                            <xs:documentation>
                                                When maximum size is reached, cache is evicted based on the eviction policy.

                                                size:
                                                maximum size can be any integer between 0 and Integer.MAX_VALUE.

                                                Default value is 0.

                                                max-size-policy:
                                                max-size-policy has these valid values:
                                                ENTRY_COUNT (Maximum number of cache entries in the cache),
                                                USED_NATIVE_MEMORY_SIZE (Maximum used native memory size in megabytes per cache
                                                for each Hazelcast instance),
                                                USED_NATIVE_MEMORY_PERCENTAGE (Maximum used native memory size percentage per cache
                                                for each Hazelcast instance),
                                                FREE_NATIVE_MEMORY_SIZE (Minimum free native memory size in megabytes for each Hazelcast instance),
                                                FREE_NATIVE_MEMORY_PERCENTAGE (Minimum free native memory size percentage for each Hazelcast instance).

                                                Default value is "ENTRY_COUNT".

                                                eviction-policy:
                                                Eviction policy has these valid values:
                                                LRU (Least Recently Used),
                                                LFU (Least Frequently Used).

                                                Default value is "LRU".
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:element>
                                    <xs:element name="cache-entry-listeners" minOccurs="0" maxOccurs="1">
                                        <xs:annotation>
                                            <xs:documentation>List of cache entry listeners</xs:documentation>
                                        </xs:annotation>
                                        <xs:complexType>
                                            <xs:sequence>
                                                <xs:element name="cache-entry-listener" type="cache-entry-listener"
                                                            minOccurs="0"
                                                            maxOccurs="unbounded"/>
                                            </xs:sequence>
                                        </xs:complexType>
                                    </xs:element>
                                    <xs:element name="partition-lost-listeners" minOccurs="0" maxOccurs="1">
                                        <xs:annotation>
                                            <xs:documentation>List of partition lost listeners</xs:documentation>
                                        </xs:annotation>
                                        <xs:complexType>
                                            <xs:sequence>
                                                <xs:element name="partition-lost-listener" type="listener"
                                                            minOccurs="0"
                                                            maxOccurs="unbounded"/>
                                            </xs:sequence>
                                        </xs:complexType>
                                    </xs:element>
                                    <xs:element name="expiry-policy-factory" minOccurs="0" maxOccurs="1">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Defines the expiry policy factory class name or
                                                defines the expiry policy factory from predefined ones with duration
                                                configuration.
                                            </xs:documentation>
                                        </xs:annotation>
                                        <xs:complexType>
                                            <xs:sequence>
                                                <xs:element name="timed-expiry-policy-factory"
                                                            type="timed-expiry-policy-factory"
                                                            minOccurs="0" maxOccurs="1"/>
                                            </xs:sequence>
                                            <xs:attribute name="class-name"/>
                                        </xs:complexType>
                                    </xs:element>
                                    <xs:element name="wan-replication-ref" type="wan-replication-ref" minOccurs="0"
                                                maxOccurs="1">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Hazelcast can replicate some or all of the cluster data. For example,
                                                you can have 5 different caches but you want only one of these caches
                                                replicating across clusters. To achieve this you mark the caches
                                                to be replicated by adding this element.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:element>
                                    <xs:element name="quorum-ref" minOccurs="0" maxOccurs="1" />
                                    <xs:element name="merge-policy" minOccurs="0" maxOccurs="1">
                                        <xs:annotation>
                                            <xs:documentation>
                                                While recovering from split-brain (network partitioning), cache entries in the small cluster
                                                merge into the bigger cluster based on the policy set here.
                                                When an entry merges into the cluster, an entry with the same key might already exist in the cluster.
                                                The values of these entries might be different for that same key. Which value should be set for the
                                                key? The conflict is resolved by the policy set here.
                                                <p>
                                                    <br/>There are built-in merge policies, such as:
                                                    <br/>`com.hazelcast.cache.merge.PassThroughCacheMergePolicy` or `PASS_THROUGH`:
                                                    The entry will be added directly even though there is an existing entry for the key.
                                                    <br/>`com.hazelcast.cache.merge.PutIfAbsentCacheMergePolicy` or `PUT_IF_ABSENT`:
                                                    The entry will be added if there is no existing entry for the key.
                                                    <br/>`com.hazelcast.cache.merge.HigherHitsCacheMergePolicy` or `HIGHER_HITS`:
                                                    The entry with the higher number of hits wins.
                                                    <br/>`com.hazelcast.cache.merge.LatestAccessCacheMergePolicy` or `LATEST_ACCESS`:
                                                    The entry which has been accessed more recently wins.
                                                    <br/>Default policy is 'com.hazelcast.cache.merge.PassThroughCacheMergePolicy'
                                                </p>
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:element>
                                    <xs:element name="hot-restart" type="hot-restart" minOccurs="0" maxOccurs="1" />
                                </xs:sequence>
                                <xs:attribute name="name" type="xs:string" use="required">
                                    <xs:annotation>
                                        <xs:documentation>Name of the cache.</xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="key-type" type="non-space-string" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>the type of keys provided as full class name
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="value-type" type="non-space-string" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>the type of values provided as full class name
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="statistics-enabled" type="parameterized-boolean" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Defines whether statistics gathering is enabled on a cache.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="management-enabled" type="parameterized-boolean" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Defines whether management is enabled on a cache.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="read-through" type="parameterized-boolean" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Set if read-through caching should be used.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="disable-per-entry-invalidation-events" type="parameterized-boolean" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Disables invalidation events for per entry but full-flush invalidation events are still enabled.
                                            Full-flush invalidation event means that invalidation events for all entries on clear.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="write-through" type="parameterized-boolean" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Set if write-through caching should be used.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="in-memory-format" type="xs:string" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Data type that will be used for storing records. Possible values:
                                            BINARY (default): keys and values will be stored as binary data
                                            OBJECT : values will be stored in their object forms
                                            NATIVE : keys and values will be stored in native memory.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="cache-loader-factory" type="xs:string" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Defines the cache loader factory class name.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="cache-loader" type="xs:string" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Defines the cache loader class name.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="cache-writer-factory" type="xs:string" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Defines the cache writer factory class name.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="cache-writer" type="xs:string" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Defines the cache writer class name.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="expiry-policy-factory" type="xs:string" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Defines the expiry policy factory class name.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="backup-count" use="optional" type="parameterized-backup-count">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Number of synchronous backups. For example, if `1` is set as the `backup-count`,
                                            then all entries of the cache are copied to one other instance as synchronous for fail-safety.
                                            `backup-count` + `async-backup-count` cannot be bigger than maximum backup count which is `6`.
                                            Valid numbers are 0 (no backup), 1, 2 ... 6.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="async-backup-count" use="optional" type="parameterized-backup-count">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Number of asynchronous backups. For example, if `1` is set as the `async-backup-count`,
                                            then all entries of the cache are copied to one other instance as asynchronous for fail-safety.
                                            `backup-count` + `async-backup-count` cannot be bigger than maximum backup count which is `6`.
                                            Valid numbers are 0 (no backup), 1, 2 ... 6.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="hot-restart-enabled" use="optional" type="parameterized-boolean">
                                    <xs:annotation>
                                        <xs:documentation>
                                            This boolean parameter enables hot-restart feature when set as true.
                                            Only available on Hazelcast Enterprise.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="multimap" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element name="entry-listeners" minOccurs="0" maxOccurs="1">
                                        <xs:complexType>
                                            <xs:sequence>
                                                <xs:element name="entry-listener" type="entry-listener" minOccurs="0"
                                                            maxOccurs="unbounded"/>
                                            </xs:sequence>
                                        </xs:complexType>
                                    </xs:element>
                                </xs:sequence>
                                <xs:attribute name="name" type="xs:string" use="optional" default="default"/>
                                <xs:attribute name="backup-count" use="optional" type="parameterized-backup-count">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Number of sync backups. If 1 is set as the backup-count for example, then
                                            all
                                            entries of the map will be copied to another JVM for fail-safety. Valid
                                            numbers are 0 (no backup), 1, 2 ... 6.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="async-backup-count" use="optional" type="parameterized-backup-count">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Number of async backups. If 1 is set as the backup-count for example, then
                                            all
                                            entries of the map will be copied to another JVM for fail-safety. Valid
                                            numbers are 0 (no backup), 1, 2 ... 6.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="value-collection-type" type="xs:string" use="optional"
                                              default="SET">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Type of value collection. It can be Set or List.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="statistics-enabled" use="optional" type="parameterized-boolean"
                                              default="true">
                                    <xs:annotation>
                                        <xs:documentation>
                                            You can retrieve some statistics like owned entry count, backup entry count,
                                            last update time, locked entry count by setting this parameter's value
                                            as "true". The method for retrieving the statistics is `getLocalMultiMapStats()`.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="binary" use="optional" type="parameterized-boolean"
                                              default="true">
                                    <xs:annotation>
                                        <xs:documentation>
                                            By default, BINARY in-memory format is used, meaning that the object is stored
                                            in a serialized form. You can set it to false, then, the OBJECT in-memory format
                                            is used, which is useful when the OBJECT in-memory format has a smaller memory
                                            footprint than BINARY.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="list" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element name="item-listeners" minOccurs="0" maxOccurs="1">
                                        <xs:complexType>
                                            <xs:sequence>
                                                <xs:element name="item-listener" type="item-listener" minOccurs="0"
                                                            maxOccurs="unbounded"/>
                                            </xs:sequence>
                                        </xs:complexType>
                                    </xs:element>
                                </xs:sequence>
                                <xs:attribute name="name" use="required" type="xs:string"/>
                                <xs:attribute name="max-size" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Maximum size. Any integer between 0 and Integer.MAX_VALUE. 0 means
                                            Integer.MAX_VALUE. Default is 0.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="backup-count" use="optional" type="parameterized-backup-count">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Count of synchronous backups. Remember that, List is a non-partitioned data
                                            structure, i.e. all entries of a List resides in one partition. When this
                                            parameter is '1', it means there will be a backup of that List in another
                                            node in the cluster. When it is '2', 2 nodes will have the backup.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="async-backup-count" use="optional" type="parameterized-backup-count">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Count of asynchronous backups.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="statistics-enabled" type="parameterized-boolean"
                                              use="optional" default="true">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Enable/disable statistics
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="set" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element name="item-listeners" minOccurs="0" maxOccurs="1">
                                        <xs:complexType>
                                            <xs:sequence>
                                                <xs:element name="item-listener" type="item-listener" minOccurs="0"
                                                            maxOccurs="unbounded"/>
                                            </xs:sequence>
                                        </xs:complexType>
                                    </xs:element>
                                </xs:sequence>
                                <xs:attribute name="name" use="required" type="xs:string"/>
                                <xs:attribute name="max-size" use="optional" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Maximum size. Any integer between 0 and Integer.MAX_VALUE. 0 means
                                            Integer.MAX_VALUE. Default is 0.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="backup-count" use="optional" type="parameterized-backup-count">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Count of synchronous backups. Remember that, Set is a non-partitioned data
                                            structure, i.e. all entries of a List resides in one partition. When this
                                            parameter is '1', it means there will be a backup of that List in another
                                            node in the cluster. When it is '2', 2 nodes will have the backup.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="async-backup-count" use="optional" type="parameterized-backup-count">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Count of asynchronous backups.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="statistics-enabled" type="parameterized-boolean"
                                              use="optional" default="true">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Enable/disable statistics
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="topic" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element name="statistics-enabled" type="parameterized-boolean" minOccurs="0" maxOccurs="1"
                                                default="true">
                                        <xs:annotation>
                                            <xs:documentation>
                                                If set as `true`, you can retrieve statistics for the topic using the
                                                method `getLocalTopicStats()`.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:element>
                                    <xs:element name="global-ordering-enabled" type="parameterized-boolean" minOccurs="0"
                                                maxOccurs="1"
                                                default="false">
                                        <xs:annotation>
                                            <xs:documentation>
                                                By default, it is false, meaning there is no global order
                                                guarantee by default.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:element>
                                    <xs:element name="message-listeners" minOccurs="0" maxOccurs="1">
                                        <xs:complexType>
                                            <xs:sequence>
                                                <xs:element name="message-listener" type="listener" minOccurs="0"
                                                            maxOccurs="unbounded"/>
                                            </xs:sequence>
                                        </xs:complexType>
                                    </xs:element>
                                    <xs:element name="multi-threading-enabled" type="parameterized-boolean" minOccurs="0" maxOccurs="1"
                                                default="false">
                                        <xs:annotation>
		                                    <xs:documentation>
                                                Default is `false`, meaning only one dedicated thread will handle topic messages. 
                                                When multi-threading enabled (true) all threads from event thread pool can be used for message handling.
		                                    </xs:documentation>
		                                </xs:annotation>
                                    </xs:element>
                                </xs:sequence>
                                <xs:attribute name="name" type="xs:string" use="optional" default="default"/>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="jobtracker" minOccurs="0" maxOccurs="unbounded">
                            <xs:annotation>
                                <xs:documentation>
                                    The JobTracker configuration is used to setup behavior of the Hazelcast MapReduce
                                    framework. Every JobTracker is capable of running multiple map reduce jobs at once
                                    and so once configuration is meant as a shared resource for all jobs created by
                                    the same JobTracker. The configuration gives full control over the expected load
                                    behavior and thread counts to be used.
                                </xs:documentation>
                            </xs:annotation>
                            <xs:complexType>
                                <xs:attribute name="name" use="required" type="xs:string"/>
                                <xs:attribute name="max-thread-size" use="optional" type="xs:nonNegativeInteger"
                                              default="0">
                                    <xs:annotation>
                                        <xs:documentation>
                                            The max-thread-size setting configures the maximum thread pool size of the
                                            JobTracker.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="queue-size" use="optional" type="xs:nonNegativeInteger"
                                              default="0">
                                    <xs:annotation>
                                        <xs:documentation>
                                            The queue-size defines the maximum number of tasks are able to wait to be
                                            processed. A value of 0 means number of partitions * 2.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="retry-count" use="optional" type="xs:nonNegativeInteger"
                                              default="0">
                                    <xs:annotation>
                                        <xs:documentation>
                                            retry-count is currently not used but reserved for later use where the
                                            framework will automatically try to restart / retry operations from an
                                            available savepoint.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="chunk-size" use="optional" type="xs:nonNegativeInteger"
                                              default="1000">
                                    <xs:annotation>
                                        <xs:documentation>
                                            The chunk-size defined the number of emitted values before a chunk is sent
                                            to the reducers. If your emitted values are big or you want to better
                                            balance your work you might want to change this to a lower or higher value.
                                            A value of 0 means immediate transmission but remember that low values
                                            mean higher traffic costs. A very high value might cause an OutOfMemoryError
                                            to occur if emitted values not fit into heap memory before being send to
                                            reducers. To prevent this you might want to use a combiner to pre-reduce
                                            values on mapping nodes.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="communicate-stats" use="optional" type="parameterized-boolean" default="true">
                                    <xs:annotation>
                                        <xs:documentation>
                                            The communicate-stats setting defines if statistics (for example about
                                            processed entries) are transmitted to the job emitter. This might be used
                                            to show any kind of progress to an user inside of an UI system but produces
                                            additional traffic. If not needed you might want to deactivate this.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="topology-changed-strategy" use="optional"
                                              type="topology-changed-strategy" default="CANCEL_RUNNING_OPERATION">
                                    <xs:annotation>
                                        <xs:documentation>
                                            The topology-changed-strategy defines how the map reduce framework will
                                            react on topology changes while executing a job. Currently only
                                            CANCEL_RUNNING_OPERATION is fully supported which throws an exception to the
                                            job emitter (throws com.hazelcast.mapreduce.TopologyChangedException).
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="replicatedmap" minOccurs="0" maxOccurs="unbounded">
                            <xs:annotation>
                                <xs:documentation>
                                    A replicated map is a implementation
                                    of the map
                                    interface which is not
                                    partitioned but fully replicates all data to all members.
                                    Due to the nature of weak consistency there is a chance of reading staled data
                                    and no
                                    guarantee is given to retrieve the same value on multiple get calls.
                                    ReplicatedMap was added in Hazelcast 3.2.
                                </xs:documentation>
                            </xs:annotation>
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element name="entry-listeners" minOccurs="0" maxOccurs="1">
                                        <xs:complexType>
                                            <xs:sequence>
                                                <xs:element name="entry-listener" type="entry-listener" minOccurs="0"
                                                            maxOccurs="unbounded"/>
                                            </xs:sequence>
                                        </xs:complexType>
                                    </xs:element>
                                </xs:sequence>
                                <xs:attribute name="name" type="xs:string" use="optional" default="default"/>
                                <xs:attribute name="in-memory-format" type="in-memory-format" use="optional"
                                              default="OBJECT"/>
                                <xs:attribute name="concurrency-level" type="concurrency-level" use="optional"
                                              default="32">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Number of parallel mutexes to minimize contention on keys. The default value
                                            is 32 which
                                            is a good number for lots of applications. If higher contention is seen on
                                            writes to values
                                            inside of the replicated map this value can be adjusted to the needs.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="replication-delay-millis" type="parameterized-unsigned-int" use="optional"
                                              default="100">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Defines a number of milliseconds after a put is executed before the value is
                                            replicated
                                            to other nodes. In this time multiple puts can be operated and are cached up
                                            to be send
                                            at once.
                                            Default value is 100ms before a replication is operated, if set to 0 no
                                            delay is used and
                                            all values are replicated one by one.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="async-fillup" type="parameterized-boolean" use="optional" default="true">
                                    <xs:annotation>
                                        <xs:documentation>
                                            This value defines it the replicated map is available for reads before the
                                            initial
                                            replication is completed. Default is true. If set to false no Exception will
                                            be
                                            thrown when replicated map is not yet ready but call will block until
                                            finished.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="statistics-enabled" type="parameterized-boolean" use="optional"
                                              default="true"/>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="listeners" type="listeners" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="serialization" type="serialization" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="native-memory" type="native-memory" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="security" type="security" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="member-attributes" minOccurs="0" maxOccurs="1">
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element name="attribute" type="attribute" maxOccurs="unbounded">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Specify the name, type and value of your attribute here.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:element>
                                </xs:sequence>
                            </xs:complexType>
                            <xs:unique name="uniqueAttributeConstraint">
                                <xs:selector xpath="./*"/>
                                <xs:field xpath="@name"/>
                            </xs:unique>
                        </xs:element>
                        <xs:element name="services" type="services" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="quorum" type="quorum" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="lite-member" minOccurs="0" maxOccurs="1">
                            <xs:complexType>
                                <xs:attribute name="enabled" type="parameterized-boolean">
                                    <xs:annotation>
                                        <xs:documentation>
                                            True to set the node as a lite member, false otherwise.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="hot-restart-persistence" type="hot-restart-persistence" minOccurs="0" maxOccurs="1" />
                    </xs:sequence>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <xs:element name="data-serializable-factories">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="data-serializable-factory" type="serialization-factory" minOccurs="0"
                            maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>
                            Custom classes implementing com.hazelcast.nio.serialization.DataSerializableFactory to be registered.
                            These can be used to speed up serialization/deserialization of objects.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="portable-factories">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="portable-factory" type="serialization-factory" minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>
                            PortableFactory class to be registered.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="serializers">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="global-serializer" type="global-serializer" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>
                            Global serializer class to be registered if no other serializer is applicable.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="serializer" type="serializer" minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>
                            Defines the class name of the serializer implementation.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:complexType name="serialization-factory">
        <xs:attributeGroup ref="class-or-bean-name"/>
        <xs:attribute name="factory-id" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="global-serializer">
        <xs:attributeGroup ref="class-or-bean-name"/>
        <xs:attribute name="override-java-serialization" type="parameterized-boolean" default="false" use="optional"/>
    </xs:complexType>

    <xs:complexType name="serializer">
        <xs:attributeGroup ref="class-or-bean-name"/>
        <xs:attribute name="type-class" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:element name="hazelcast">
        <xs:annotation>
            <xs:documentation>
                Configure the hazelcast instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.HazelcastInstance"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="hazelcast-bean">
                    <xs:sequence>
                        <xs:element ref="config" minOccurs="0" maxOccurs="1"/>
                    </xs:sequence>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <xs:element name="client">
        <xs:annotation>
            <xs:documentation>
                Configure the hazelcast client
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.HazelcastInstance"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="hazelcast-bean">
                    <xs:all>
                        <xs:element name="spring-aware" type="xs:string" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="group" type="group" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="properties" type="properties" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="network" type="network-client" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="security" type="client-security" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="listeners" type="listeners" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="serialization" type="serialization" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="proxy-factories" type="proxy-factories" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="load-balancer" type="load-balancer" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="near-cache" type="near-cache-client" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="query-caches" type="query-caches-client" minOccurs="0" maxOccurs="1"/>
                    </xs:all>
                    <xs:attribute name="executor-pool-size" type="xs:int" use="optional"/>
                    <xs:attribute name="credentials-ref" type="xs:string" use="optional"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <xs:element name="map" type="hazelcast-type">
        <xs:annotation>
            <xs:documentation>
                Retrieve a Hazelcast IMap instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.IMap"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
    </xs:element>

    <xs:element name="cache-manager">
        <xs:annotation>
            <xs:documentation>
                Retrieve a JCache cache manager from specified Hazelcast instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="javax.cache.CacheManager"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="hazelcast-bean">
                    <xs:sequence>
                        <xs:element name="properties" type="properties" minOccurs="0" maxOccurs="1"/>
                    </xs:sequence>
                    <xs:attribute name="instance-ref" type="xs:string" use="optional">
                        <xs:annotation>
                            <xs:documentation>
                                <![CDATA[The name of the HazelcastInstance that this bean depends on.]]>
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="name" type="xs:string" use="required">
                        <xs:annotation>
                            <xs:documentation>
                                <![CDATA[The name of this bean in Hazelcast context (HazelcastInstance.getMap(name)).]]>
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="uri" type="xs:string" use="optional"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="multiMap" type="hazelcast-type">
        <xs:annotation>
            <xs:documentation>
                Retrieve a Hazelcast MultiMap instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.MultiMap"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
    </xs:element>
    <xs:element name="replicatedMap" type="hazelcast-type">
        <xs:annotation>
            <xs:documentation>
                Retrieve a Hazelcast ReplicatedMap instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.ReplicatedMap"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
    </xs:element>
    <xs:element name="queue" type="hazelcast-type">
        <xs:annotation>
            <xs:documentation>
                Retrieve a Hazelcast IQueue instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.IQueue"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
    </xs:element>
    <xs:element name="ringbuffer" type="hazelcast-type">
        <xs:annotation>
            <xs:documentation>
                Retrieve a Hazelcast Ringbuffer instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.ringbuffer.Ringbuffer"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
    </xs:element>
    <xs:element name="topic" type="hazelcast-type">
        <xs:annotation>
            <xs:documentation>
                Retrieve a Hazelcast ITopic instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.ITopic"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
    </xs:element>
    <xs:element name="set" type="hazelcast-type">
        <xs:annotation>
            <xs:documentation>
                Retrieve a Hazelcast ISet instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.ISet"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
    </xs:element>
    <xs:element name="list" type="hazelcast-type">
        <xs:annotation>
            <xs:documentation>
                Retrieve a Hazelcast IList instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.IList"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
    </xs:element>
    <xs:element name="executorService" type="hazelcast-type">
        <xs:annotation>
            <xs:documentation>
                Retrieve a Hazelcast IExecutorService instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.IExecutorService"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
    </xs:element>
    <xs:element name="idGenerator" type="hazelcast-type">
        <xs:annotation>
            <xs:documentation>
                Retrieve a Hazelcast IdGenerator instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.IdGenerator"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
    </xs:element>
    <xs:element name="atomicLong" type="hazelcast-type">
        <xs:annotation>
            <xs:documentation>
                Retrieve a Hazelcast IAtomicLong instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.IAtomicLong"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
    </xs:element>
    <xs:element name="atomicReference" type="hazelcast-type">
        <xs:annotation>
            <xs:documentation>
                Retrieve a Hazelcast IAtomicReference instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.IAtomicReference"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
    </xs:element>
    <xs:element name="countDownLatch" type="hazelcast-type">
        <xs:annotation>
            <xs:documentation>
                Retrieve a Hazelcast ICountDownLatch instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.ICountDownLatch"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
    </xs:element>
    <xs:element name="semaphore" type="hazelcast-type">
        <xs:annotation>
            <xs:documentation>
                Retrieve a Hazelcast ISemaphore instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.ISemaphore"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
    </xs:element>
    <xs:element name="lock" type="hazelcast-type">
        <xs:annotation>
            <xs:documentation>
                Retrieve a Hazelcast ILock instance
            </xs:documentation>
            <xs:appinfo>
                <tool:annotation>
                    <tool:exports type="com.hazelcast.core.ILock"/>
                </tool:annotation>
            </xs:appinfo>
        </xs:annotation>
    </xs:element>

    <xs:element name="hibernate-region-factory" type="hibernate-cache"/>

    <!-- internal elements -->
    <xs:complexType name="hazelcast-bean">
        <xs:attribute name="id" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>
                    <![CDATA[The unique identifier for a bean.
                    A bean ID may not be used more than once within the same <beans> element.]]>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="lazy-init" type="xs:string" use="optional" default="false">
            <xs:annotation>
                <xs:documentation>
                    <![CDATA[Indicates whether or not this bean is to be lazily initialized.
                    If false, it will be instantiated on startup by bean factories that perform
                    eager initialization of singletons.]]>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="scope" type="xs:string" use="optional" default="singleton">
            <xs:annotation>
                <xs:documentation>
                    <![CDATA[The scope of this bean: typically "singleton", or "prototype".]]>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="depends-on" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>
                    <![CDATA[The names of the beans that this bean depends on being initialized.]]>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="hazelcast-type">
        <xs:complexContent>
            <xs:extension base="hazelcast-bean">
                <xs:sequence/>
                <xs:attribute name="instance-ref" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>
                            <![CDATA[The name of the HazelcastInstance that this bean depends on.]]>
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="name" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>
                            <![CDATA[The name of this bean in Hazelcast context (HazelcastInstance.getMap(name)).]]>
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="network">
        <xs:sequence>
            <xs:element name="outbound-ports" type="outbound-ports" minOccurs="0" maxOccurs="1"/>
            <xs:element name="join" type="join" minOccurs="0" maxOccurs="1"/>
            <xs:element name="interfaces" type="interfaces" minOccurs="0" maxOccurs="1"/>
            <xs:element name="ssl" type="ssl" minOccurs="0" maxOccurs="1"/>
            <xs:element name="socket-interceptor" type="socket-interceptor" minOccurs="0" maxOccurs="1"/>
            <xs:element name="symmetric-encryption" type="symmetric-encryption" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>
                        Encryption algorithm such as DES/ECB/PKCS5Padding, PBEWithMD5AndDES, AES/CBC/PKCS5Padding,
                        Blowfish, DESede.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="reuse-address" type="parameterized-boolean" minOccurs="0" maxOccurs="1" default="false"/>
        </xs:sequence>
        <xs:attribute name="public-address" type="xs:string" use="optional"/>
        <xs:attribute name="port" type="xs:string" use="required"/>
        <xs:attribute name="port-auto-increment" type="xs:string" use="optional" default="true"/>
    </xs:complexType>

    <xs:complexType name="tcp-ip">
        <xs:sequence>
            <xs:element name="required-member" type="xs:string" minOccurs="0" maxOccurs="1"/>
            <xs:choice>
                <xs:element name="members" type="members" default="127.0.0.1"/>
                <xs:sequence>
                    <xs:element name="member" type="member" default="127.0.0.1" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
                <xs:sequence>
                    <xs:element name="interface" type="interface" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:choice>
        </xs:sequence>
        <xs:attribute name="enabled" type="xs:string" use="optional" default="false"/>
        <xs:attribute name="connection-timeout-seconds" type="xs:string" use="optional" default="5"/>
    </xs:complexType>

    <xs:complexType name="multicast">
        <xs:sequence>
            <xs:element name="trusted-interfaces" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>
                        Includes IP addresses of trusted members. When a node wants to join to the cluster,
                        its join request will be rejected if it is not a trusted member. You can give an IP
                        addresses range using the wildcard (*) on the last digit of the IP address
                        (e.g. 192.168.1.* or 192.168.1.100-110).
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="interface" type="interface" minOccurs="0" maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="enabled" type="xs:string" use="optional" default="true"/>
        <xs:attribute name="multicast-group" type="xs:string" use="optional" default="224.2.2.3"/>
        <xs:attribute name="multicast-port" type="xs:string" use="optional" default="54327"/>
        <xs:attribute name="multicast-timeout-seconds" type="xs:string" use="optional" default="2"/>
        <xs:attribute name="multicast-time-to-live" type="xs:string" use="optional" default="32"/>
        <xs:attribute name="loopback-mode-enabled" type="parameterized-boolean" use="optional" default="false"/>
    </xs:complexType>

    <xs:complexType name="aws">
        <xs:sequence/>
        <xs:attribute name="enabled" type="xs:string" use="optional" default="true"/>
        <xs:attribute name="access-key" type="xs:string" use="optional"/>
        <xs:attribute name="secret-key" type="xs:string" use="optional"/>
        <xs:attribute name="iam-role" type="xs:string" use="optional"/>
        <xs:attribute name="region" type="xs:string" use="optional" default="us-east-1"/>
        <xs:attribute name="host-header" type="xs:string" use="optional" default="ec2.amazonaws.com"/>
        <xs:attribute name="security-group-name" type="xs:string" use="optional" default=""/>
        <xs:attribute name="tag-key" type="xs:string" use="optional" default=""/>
        <xs:attribute name="tag-value" type="xs:string" use="optional" default=""/>
        <xs:attribute name="connection-timeout-seconds" type="xs:string" use="optional" default="5"/>
    </xs:complexType>

    <xs:complexType name="discovery-strategies">
        <xs:sequence>
            <xs:element name="node-filter" type="discovery-node-filter" minOccurs="0" maxOccurs="1"/>
            <xs:element name="discovery-strategy" type="discovery-strategy" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="discovery-service-provider" type="discovery-service-provider" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="discovery-service-provider">
        <xs:attributeGroup ref="class-or-bean-name"/>
    </xs:complexType>
    <xs:complexType name="discovery-node-filter">
        <xs:attributeGroup ref="class-or-bean-name"/>
    </xs:complexType>
    <xs:complexType name="discovery-strategy">
        <xs:sequence>
            <xs:element name="properties" type="properties" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attributeGroup ref="class-or-bean-name"/>
        <xs:attribute name="discovery-strategy-factory" type="non-space-string" use="optional"/>
    </xs:complexType>

    <xs:complexType name="merge-policies">
        <xs:sequence>
            <xs:element name="map-merge-policy" type="map-merge-policy" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="map-merge-policy">
        <xs:attribute name="name" type="xs:string" use="required"/>
        <xs:attributeGroup ref="class-or-bean-name"/>
    </xs:complexType>

    <xs:complexType name="map-eviction-policy">
        <xs:attributeGroup ref="class-or-bean-name"/>
    </xs:complexType>

    <xs:complexType name="outbound-ports">
        <xs:sequence>
            <xs:element name="ports" minOccurs="0" maxOccurs="unbounded">
                <xs:simpleType>
                    <xs:restriction base="xs:string"/>
                </xs:simpleType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="join">
        <xs:sequence>
            <xs:element name="multicast" type="multicast" minOccurs="0"/>
            <xs:element name="tcp-ip" type="tcp-ip" minOccurs="0"/>
            <xs:element name="aws" type="aws" minOccurs="0"/>
            <xs:element name="discovery-strategies" type="discovery-strategies" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="interfaces">
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="interface" type="interface" default="127.0.0.1"/>
        </xs:sequence>
        <xs:attribute name="enabled" type="xs:string" use="optional" default="false"/>
    </xs:complexType>

    <xs:simpleType name="interface">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>

    <xs:simpleType name="cache-deserialized">
        <xs:restriction base="non-space-string">
            <xs:enumeration value="NEVER"/>
            <xs:enumeration value="ALWAYS"/>
            <xs:enumeration value="INDEX-ONLY"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="member">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>

    <xs:simpleType name="members">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>

    <xs:complexType name="group">
        <xs:sequence/>
        <xs:attribute name="name" type="xs:string" use="required"/>
        <xs:attribute name="password" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:simpleType name="propertyNameEnum">
        <xs:restriction base="xs:string">
            <xs:enumeration value="hazelcast.merge.first.run.delay.seconds"/>
            <xs:enumeration value="hazelcast.merge.next.run.delay.seconds"/>
            <xs:enumeration value="hazelcast.redo.wait.millis"/>
            <xs:enumeration value="hazelcast.socket.bind.any"/>
            <xs:enumeration value="hazelcast.serializer.gzip.enabled"/>
            <xs:enumeration value="hazelcast.serializer.shared"/>
            <xs:enumeration value="hazelcast.shutdownhook.enabled"/>
            <xs:enumeration value="hazelcast.wait.seconds.before.join"/>
            <xs:enumeration value="hazelcast.max.no.heartbeat.seconds"/>
            <xs:enumeration value="hazelcast.initial.wait.seconds"/>
            <xs:enumeration value="hazelcast.restart.on.max.idle"/>
            <xs:enumeration value="hazelcast.map.partition.count"/>
            <xs:enumeration value="hazelcast.map.remove.delay.seconds"/>
            <xs:enumeration value="hazelcast.map.cleanup.delay.seconds"/>
            <xs:enumeration value="hazelcast.executor.query.thread.count"/>
            <xs:enumeration value="hazelcast.executor.event.thread.count"/>
            <xs:enumeration value="hazelcast.executor.migration.thread.count"/>
            <xs:enumeration value="hazelcast.executor.client.thread.count"/>
            <xs:enumeration value="hazelcast.executor.store.thread.count"/>
            <xs:enumeration value="hazelcast.log.state"/>
            <xs:enumeration value="hazelcast.jmx"/>
            <xs:enumeration value="hazelcast.jmx.detailed"/>
            <xs:enumeration value="hazelcast.mancenter.enabled"/>
            <xs:enumeration value="hazelcast.memcache.enabled"/>
            <xs:enumeration value="hazelcast.rest.enabled"/>
            <xs:enumeration value="hazelcast.map.load.chunk.size"/>
            <xs:enumeration value="hazelcast.in.thread.priority"/>
            <xs:enumeration value="hazelcast.out.thread.priority"/>
            <xs:enumeration value="hazelcast.service.thread.priority"/>
            <xs:enumeration value="hazelcast.socket.receive.buffer.size"/>
            <xs:enumeration value="hazelcast.socket.send.buffer.size"/>
            <xs:enumeration value="hazelcast.socket.keep.alive"/>
            <xs:enumeration value="hazelcast.socket.no.delay"/>
            <xs:enumeration value="hazelcast.heartbeat.interval.seconds"/>
            <xs:enumeration value="hazelcast.icmp.enabled"/>
            <xs:enumeration value="hazelcast.initial.min.cluster.size"/>
            <xs:enumeration value="hazelcast.mc.atomiclong.excludes"/>
            <xs:enumeration value="hazelcast.mc.countdownlatch.excludes"/>
            <xs:enumeration value="hazelcast.mc.map.excludes"/>
            <xs:enumeration value="hazelcast.mc.queue.excludes"/>
            <xs:enumeration value="hazelcast.mc.semaphore.excludes"/>
            <xs:enumeration value="hazelcast.mc.topic.excludes"/>
            <xs:enumeration value="hazelcast.phone.home.enabled"/>
            <xs:enumeration value="hazelcast.map.max.backup.count"/>
            <xs:enumeration value="hazelcast.max.wait.seconds.before.join"/>
            <xs:enumeration value="hazelcast.mc.max.visible.instance.count"/>
            <xs:enumeration value="hazelcast.logging.type"/>
            <xs:enumeration value="hazelcast.compatibility.3.6.client"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="propertyNameString">
        <xs:restriction base="non-space-string"/>
    </xs:simpleType>
    <xs:simpleType name="propertyName">
        <xs:union memberTypes="propertyNameEnum propertyNameString"/>
    </xs:simpleType>
    <xs:complexType name="property">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="name" use="required" type="propertyName"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="properties">
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="property" type="property"/>
        </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="attributeName">
        <xs:restriction base="non-space-string"/>
    </xs:simpleType>
    <xs:simpleType name="attributeTypeEnum">
        <xs:restriction base="xs:string">
            <xs:enumeration value="boolean"/>
            <xs:enumeration value="byte"/>
            <xs:enumeration value="double"/>
            <xs:enumeration value="float"/>
            <xs:enumeration value="int"/>
            <xs:enumeration value="long"/>
            <xs:enumeration value="short"/>
            <xs:enumeration value="string"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="attribute">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="name" use="required" type="attributeName"/>
                <!--xs:attribute name="name" use="required" type="xs:ID"/-->
                <xs:attribute name="type" use="optional" default="string" type="attributeTypeEnum"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    <xs:complexType name="attributes">
        <xs:sequence>
            <xs:element name="attribute" type="attribute" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="ssl">
        <xs:sequence>
            <xs:element name="properties" type="properties" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="enabled" default="false" type="xs:string"/>
        <xs:attribute name="factory-class-name" type="xs:string" use="optional"/>
        <xs:attribute name="factory-implementation" type="xs:string" use="optional"/>
    </xs:complexType>

    <xs:complexType name="socket-interceptor">
        <xs:sequence>
            <xs:element name="properties" type="properties" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="enabled" default="false" type="xs:string"/>
        <xs:attributeGroup ref="class-or-bean-name"/>
    </xs:complexType>

    <xs:complexType name="symmetric-encryption">
        <xs:sequence/>
        <xs:attribute name="enabled" type="xs:string" use="optional" default="false"/>
        <xs:attribute name="algorithm" use="optional" type="xs:string"/>
        <xs:attribute name="salt" use="optional" type="xs:string"/>
        <xs:attribute name="password" use="optional" type="xs:string"/>
        <xs:attribute name="iteration-count" use="optional" type="xs:string"/>
    </xs:complexType>

    <xs:complexType name="hibernate-cache">
        <xs:complexContent>
            <xs:extension base="hazelcast-bean">
                <xs:attribute name="instance-ref" type="xs:string" use="required"/>
                <!-- valid values are DISTRIBUTED and LOCAL -->
                <xs:attribute name="mode" type="xs:string" use="optional" default="DISTRIBUTED"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:simpleType name="non-space-string">
        <xs:restriction base="xs:string">
            <xs:pattern value="\S.*"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="wan-replication">
        <xs:sequence>
            <xs:element name="wan-publisher" minOccurs="0" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="queue-full-behavior" type="wan-queue-full-behavior" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="queue-capacity" type="xs:integer" default="10000" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="properties" type="properties" minOccurs="0" maxOccurs="1"/>
                    </xs:sequence>
                    <xs:attributeGroup ref="class-or-bean-name"/>
                    <xs:attribute name="group-name" use="required">
                        <xs:simpleType>
                            <xs:restriction base="xs:string"/>
                        </xs:simpleType>
                    </xs:attribute>
                </xs:complexType>
            </xs:element>
            <xs:element name = "wan-consumer" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="properties" type="properties" minOccurs="0" maxOccurs="1"/>
                    </xs:sequence>
                    <xs:attributeGroup ref="class-or-bean-name"/>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="name" use="required">
            <xs:simpleType>
                <xs:restriction base="xs:string"/>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="partition-group">
        <xs:sequence>
            <xs:element name="member-group" minOccurs="0" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="interface" type="interface" minOccurs="0" maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="enabled" type="parameterized-boolean" use="required"/>
        <xs:attribute name="group-type" type="xs:string" use="optional"/>
    </xs:complexType>

    <xs:complexType name="management-center">
        <xs:attribute name="enabled" type="xs:string" default="false" use="optional"/>
        <xs:attribute name="url" type="xs:string" use="optional"/>
        <xs:attribute name="update-interval" type="xs:string" default="3" use="optional"/>
    </xs:complexType>
    <xs:complexType name="cache-entry-listener">
        <xs:attribute name="cache-entry-listener-factory" type="non-space-string" use="optional"/>
        <xs:attribute name="cache-entry-event-filter-factory" type="non-space-string" use="optional"/>
        <xs:attribute name="old-value-required" type="parameterized-boolean" use="optional" default="false"/>
        <xs:attribute name="synchronous" type="parameterized-boolean" use="optional" default="false"/>
    </xs:complexType>
    <xs:complexType name="listener">
        <xs:attributeGroup ref="class-or-bean-name"/>
    </xs:complexType>
    <xs:complexType name="item-listener">
        <xs:complexContent>
            <xs:extension base="listener">
                <xs:attribute name="include-value" type="xs:string" use="optional" default="true"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="entry-listener">
        <xs:complexContent>
            <xs:extension base="item-listener">
                <xs:attribute name="local" type="xs:string" use="optional" default="false"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="security">
        <xs:sequence>
            <xs:element name="member-credentials-factory" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="properties" type="properties" minOccurs="0" maxOccurs="1"/>
                    </xs:sequence>
                    <xs:attributeGroup ref="class-or-bean-name"/>
                </xs:complexType>
            </xs:element>
            <xs:element name="member-login-modules" type="login-modules" minOccurs="0" maxOccurs="1"/>
            <xs:element name="client-login-modules" type="login-modules" minOccurs="0" maxOccurs="1"/>
            <xs:element name="client-permission-policy" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="properties" type="properties" minOccurs="0" maxOccurs="1"/>
                    </xs:sequence>
                    <xs:attributeGroup ref="class-or-bean-name"/>
                </xs:complexType>
            </xs:element>
            <xs:element name="client-permissions" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="all-permissions" type="base-permission" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="map-permission" type="instance-permission" minOccurs="0"
                                    maxOccurs="unbounded"/>
                        <xs:element name="queue-permission" type="instance-permission" minOccurs="0"
                                    maxOccurs="unbounded"/>
                        <xs:element name="multimap-permission" type="instance-permission" minOccurs="0"
                                    maxOccurs="unbounded"/>
                        <xs:element name="topic-permission" type="instance-permission" minOccurs="0"
                                    maxOccurs="unbounded"/>
                        <xs:element name="list-permission" type="instance-permission" minOccurs="0"
                                    maxOccurs="unbounded"/>
                        <xs:element name="set-permission" type="instance-permission" minOccurs="0"
                                    maxOccurs="unbounded"/>
                        <xs:element name="lock-permission" type="instance-permission" minOccurs="0"
                                    maxOccurs="unbounded"/>
                        <xs:element name="atomic-long-permission" type="instance-permission" minOccurs="0"
                                    maxOccurs="unbounded"/>
                        <xs:element name="countdown-latch-permission" type="instance-permission" minOccurs="0"
                                    maxOccurs="unbounded"/>
                        <xs:element name="semaphore-permission" type="instance-permission" minOccurs="0"
                                    maxOccurs="unbounded"/>
                        <xs:element name="id-generator-permission" type="instance-permission" minOccurs="0"
                                    maxOccurs="unbounded"/>
                        <xs:element name="executor-service-permission" type="instance-permission" minOccurs="0"
                                    maxOccurs="unbounded"/>
                        <xs:element name="durable-executor-service-permission" type="instance-permission" minOccurs="0"
                                    maxOccurs="unbounded"/>
                        <xs:element name="cardinality-estimator-permission" type="instance-permission" minOccurs="0"
                                    maxOccurs="unbounded"/>
                        <xs:element name="scheduled-executor-permission" type="instance-permission" minOccurs="0"
                                    maxOccurs="unbounded"/>
                        <xs:element name="transaction-permission" type="base-permission" minOccurs="0" maxOccurs="1"/>
                        <xs:element name="cache-permission" type="instance-permission" minOccurs="0"
                                    maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="security-interceptors" type="interceptors" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="enabled" type="xs:string" default="false"/>
    </xs:complexType>

    <xs:complexType name="interceptors">
        <xs:sequence>
            <xs:element name="interceptor" type="interceptor" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="interceptor">
        <xs:attributeGroup ref="class-or-bean-name"/>
    </xs:complexType>

    <xs:complexType name="login-modules">
        <xs:sequence>
            <xs:element name="login-module" type="login-module" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="login-module">
        <xs:sequence>
            <xs:element name="properties" type="properties" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attributeGroup ref="class-or-bean-name"/>
        <xs:attribute name="usage" use="optional" default="required">
            <xs:simpleType>
                <xs:union>
                    <xs:simpleType>
                        <xs:restriction base="xs:string">
                            <xs:enumeration value="REQUIRED"/>
                            <xs:enumeration value="OPTIONAL"/>
                            <xs:enumeration value="REQUISITE"/>
                            <xs:enumeration value="SUFFICIENT"/>
                        </xs:restriction>
                    </xs:simpleType>
                    <xs:simpleType>
                        <xs:restriction base="non-space-string"/>
                    </xs:simpleType>
                </xs:union>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="base-permission">
        <xs:sequence>
            <xs:element name="endpoints" type="endpoints" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="principal" type="xs:string" use="optional" default="*">
            <xs:annotation>
                <xs:documentation>
                    Name of the principal. Wildcards(*) can be used.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="instance-permission">
        <xs:complexContent>
            <xs:extension base="base-permission">
                <xs:sequence>
                    <xs:element name="actions" type="actions" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
                <xs:attribute name="name" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>
                            Name of the permission. Wildcards(*) can be used.
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="endpoints">
        <xs:sequence>
            <xs:element name="endpoint" minOccurs="1" maxOccurs="unbounded" default="127.0.0.1">
                <xs:annotation>
                    <xs:documentation>
                        Endpoint address of principal. Wildcards(*) can be used.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string"/>
                </xs:simpleType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="actions">
        <xs:sequence>
            <xs:element name="action" minOccurs="1" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>
                        Permission actions that are permitted on Hazelcast instance objects.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:union>
                        <xs:simpleType>
                            <xs:restriction base="xs:string">
                                <xs:enumeration value="all"/>
                                <xs:enumeration value="create"/>
                                <xs:enumeration value="destroy"/>
                                <xs:enumeration value="modify"/>
                                <xs:enumeration value="read"/>
                                <xs:enumeration value="remove"/>
                                <xs:enumeration value="lock"/>
                                <xs:enumeration value="listen"/>
                                <xs:enumeration value="release"/>
                                <xs:enumeration value="acquire"/>
                                <xs:enumeration value="put"/>
                                <xs:enumeration value="add"/>
                                <xs:enumeration value="index"/>
                                <xs:enumeration value="intercept"/>
                                <xs:enumeration value="publish"/>
                            </xs:restriction>
                        </xs:simpleType>
                        <xs:simpleType>
                            <xs:restriction base="non-space-string"/>
                        </xs:simpleType>
                    </xs:union>
                </xs:simpleType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="serialization">
        <xs:sequence>
            <xs:element ref="data-serializable-factories" minOccurs="0" maxOccurs="1"/>
            <xs:element ref="portable-factories" minOccurs="0" maxOccurs="1"/>
            <xs:element ref="serializers" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="use-native-byte-order" use="optional" type="xs:string" default="false"/>
        <xs:attribute name="byte-order" use="optional" default="BIG_ENDIAN">
            <xs:simpleType>
                <xs:restriction base="non-space-string">
                    <xs:enumeration value="BIG_ENDIAN"/>
                    <xs:enumeration value="LITTLE_ENDIAN"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="portable-version" use="optional" type="xs:string"/>
        <xs:attribute name="check-class-def-errors" use="optional" type="xs:string" default="true"/>
        <xs:attribute name="enable-compression" use="optional" type="xs:string" default="false"/>
        <xs:attribute name="enable-shared-object" use="optional" type="xs:string" default="true"/>
        <xs:attribute name="allow-unsafe" use="optional" type="xs:string" default="false"/>
    </xs:complexType>

    <xs:complexType name="network-client">
        <xs:sequence>
            <xs:element name="member" type="member" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="socket-options" type="socket-options" minOccurs="0" maxOccurs="1"/>
            <xs:element name="socket-interceptor" type="socket-interceptor" minOccurs="0" maxOccurs="1"/>
            <xs:element name="ssl" type="ssl" minOccurs="0" maxOccurs="1"/>
            <xs:element name="aws" type="aws-client" minOccurs="0" maxOccurs="1"/>
            <xs:element name="discovery-strategies" type="discovery-strategies" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="smart-routing" use="optional" type="parameterized-boolean" default="true"/>
        <xs:attribute name="redo-operation" use="optional" type="parameterized-boolean" default="false"/>
        <xs:attribute name="connection-timeout" use="optional" type="parameterized-positive-integer" default="5000"/>
        <xs:attribute name="connection-attempt-period" use="optional" type="parameterized-positive-integer" default="3000"/>
        <xs:attribute name="connection-attempt-limit" use="optional" type="parameterized-non-negative-integer" default="2"/>
    </xs:complexType>

    <xs:complexType name="socket-options">
        <xs:attribute name="tcp-no-delay" type="parameterized-boolean" use="optional" default="false"/>
        <xs:attribute name="keep-alive" type="parameterized-boolean" use="optional" default="true"/>
        <xs:attribute name="reuse-address" type="parameterized-boolean" use="optional" default="true"/>
        <xs:attribute name="linger-seconds" type="parameterized-unsigned-int" use="optional" default="3"/>
        <xs:attribute name="buffer-size" use="optional" default="32">
            <xs:simpleType>
                <xs:restriction base="xs:unsignedInt">
                    <xs:minInclusive value="1"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="services">
        <xs:sequence>
            <xs:element name="service" type="service" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="enable-defaults" type="parameterized-boolean" default="true"/>
    </xs:complexType>
    <xs:complexType name="service">
        <xs:sequence>
            <xs:element name="name" type="xs:string" minOccurs="1" maxOccurs="1"/>
            <xs:element name="class-name" type="xs:string" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>
                        Deprecated element, subject to remove. Please use class-name/implementation attributes instead
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="properties" type="properties" minOccurs="0" maxOccurs="1"/>
            <xs:element name="configuration" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <xs:sequence>
                        <xs:any minOccurs="0" maxOccurs="unbounded"/>
                    </xs:sequence>
                    <xs:attribute name="parser" type="xs:string" use="required"/>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
        <xs:attributeGroup ref="class-or-bean-name"/>
        <xs:attribute name="enabled" type="parameterized-boolean" default="true"/>
    </xs:complexType>

    <xs:simpleType name="parameterizedValueType">
        <xs:restriction base="xs:string">
            <xs:pattern value="[$#]\{([^=^:]+)\}"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="parameterized-boolean">
        <xs:union memberTypes="xs:boolean parameterizedValueType"/>
    </xs:simpleType>
    <xs:simpleType name="parameterized-unsigned-int">
        <xs:union memberTypes="xs:unsignedInt parameterizedValueType"/>
    </xs:simpleType>
    <xs:simpleType name="parameterized-positive-integer">
        <xs:union memberTypes="xs:positiveInteger parameterizedValueType"/>
    </xs:simpleType>
    <xs:simpleType name="parameterized-backup-count">
        <xs:union memberTypes="backup-count parameterizedValueType"/>
    </xs:simpleType>
    <xs:simpleType name="backup-count">
        <xs:restriction base="xs:byte">
            <xs:minInclusive value="0"/>
            <xs:maxInclusive value="6"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="parameterized-non-negative-integer">
        <xs:union memberTypes="xs:nonNegativeInteger parameterizedValueType"/>
    </xs:simpleType>

    <xs:complexType name="listeners">
        <xs:sequence>
            <xs:element name="listener" type="listener" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="client-security">
        <xs:sequence>
            <xs:element name="credentials" type="credentials" minOccurs="1" maxOccurs="1"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="credentials">
        <xs:annotation>
            <xs:documentation>Credentials className
            </xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="non-space-string"/>
        </xs:simpleContent>
    </xs:complexType>
    <xs:complexType name="proxy-factories">
        <xs:sequence>
            <xs:element name="proxy-factory" type="proxy-factory" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="proxy-factory">
        <xs:attribute name="service">
            <xs:simpleType>
                <xs:restriction base="non-space-string"/>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="class-name">
            <xs:simpleType>
                <xs:restriction base="non-space-string"/>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="load-balancer">
        <xs:attribute name="type" use="required">
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="random"/>
                    <xs:enumeration value="round-robin"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="near-cache-client">
        <xs:complexContent>
            <xs:extension base="near-cache">
                <xs:attribute name="name" use="required">
                    <xs:simpleType>
                        <xs:restriction base="xs:string"/>
                    </xs:simpleType>
                </xs:attribute>
                <xs:attribute name="local-update-policy" type="local-update-policy-enum" use="optional" default="INVALIDATE"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="aws-client">
        <xs:complexContent>
            <xs:extension base="aws">
                <xs:attribute name="inside-aws" use="optional" type="parameterized-boolean" default="false"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="near-cache">
        <xs:sequence>
            <xs:element name="eviction" type="eviction" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="max-size" use="optional" type="xs:string" default="0"/>
        <xs:attribute name="time-to-live-seconds" use="optional" type="xs:string" default="0"/>
        <xs:attribute name="max-idle-seconds" use="optional" type="xs:string" default="0"/>
        <xs:attribute name="eviction-policy" use="optional" type="eviction-policy" default="LRU"/>
        <xs:attribute name="invalidate-on-change" use="optional" type="xs:string" default="true"/>
        <xs:attribute name="cache-local-entries" use="optional" type="xs:string" default="false"/>
        <xs:attribute name="in-memory-format" type="in-memory-format" use="optional" default="BINARY"/>
    </xs:complexType>

    <xs:complexType name="query-caches">
        <xs:sequence>
            <xs:element name="query-cache" type="query-cache" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="query-cache">
        <xs:all>
            <xs:element name="include-value" type="parameterized-boolean" minOccurs="0" maxOccurs="1" default="true"/>
            <xs:element name="predicate" type="predicate" minOccurs="1" maxOccurs="1"/>
            <xs:element name="entry-listeners" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>
                        This configuration lets you add listeners (listener classes) for the
                        map entries.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="entry-listener" type="entry-listener" minOccurs="0"
                                    maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="in-memory-format" type="in-memory-format" minOccurs="0" maxOccurs="1" default="BINARY"/>
            <xs:element name="populate" type="parameterized-boolean" minOccurs="0" maxOccurs="1" default="true"/>
            <xs:element name="coalesce" type="parameterized-boolean" minOccurs="0" maxOccurs="1" default="false"/>
            <xs:element name="delay-seconds" type="parameterized-unsigned-int" minOccurs="0" maxOccurs="1" default="0"/>
            <xs:element name="batch-size" type="parameterized-unsigned-int" minOccurs="0" maxOccurs="1" default="1"/>
            <xs:element name="buffer-size" type="parameterized-unsigned-int" minOccurs="0" maxOccurs="1" default="16"/>
            <xs:element name="eviction" type="eviction" minOccurs="0" maxOccurs="1"/>
            <xs:element name="indexes" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>
                        This configuration lets you index the attributes and also order them.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="index" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:attribute name="attribute" type="xs:string" use="required"/>
                                <xs:attribute name="ordered" type="xs:string" use="optional"
                                              default="false"/>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:all>
        <xs:attribute name="name" use="required">
            <xs:simpleType>
                <xs:restriction base="xs:string"/>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="query-caches-client">
        <xs:sequence>
            <xs:element name="query-cache" type="query-cache-client" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="query-cache-client">
        <xs:all>
            <xs:element name="include-value" type="parameterized-boolean" minOccurs="0" maxOccurs="1" default="true"/>
            <xs:element name="predicate" type="predicate" minOccurs="1" maxOccurs="1"/>
            <xs:element name="entry-listeners" type="entry-listeners" minOccurs="0" maxOccurs="1"/>
            <xs:element name="in-memory-format" type="in-memory-format" minOccurs="0" maxOccurs="1" default="BINARY"/>
            <xs:element name="populate" type="parameterized-boolean" minOccurs="0" maxOccurs="1" default="true"/>
            <xs:element name="coalesce" type="parameterized-boolean" minOccurs="0" maxOccurs="1" default="false"/>
            <xs:element name="delay-seconds" type="parameterized-unsigned-int" minOccurs="0" maxOccurs="1" default="0"/>
            <xs:element name="batch-size" type="parameterized-unsigned-int" minOccurs="0" maxOccurs="1" default="1"/>
            <xs:element name="buffer-size" type="parameterized-unsigned-int" minOccurs="0" maxOccurs="1" default="16"/>
            <xs:element name="eviction" type="eviction" minOccurs="0" maxOccurs="1"/>
            <xs:element name="indexes" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>
                        This configuration lets you index the attributes and also order them.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="index" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:attribute name="attribute" type="xs:string" use="required"/>
                                <xs:attribute name="ordered" type="xs:string" use="optional"
                                              default="false"/>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:all>
        <xs:attribute name="name" use="required">
            <xs:simpleType>
                <xs:restriction base="xs:string"/>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="mapName" use="required">
            <xs:simpleType>
                <xs:restriction base="xs:string"/>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="predicate">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="type" use="required">
                    <xs:simpleType>
                        <xs:restriction base="non-space-string">
                            <xs:enumeration value="class-name"/>
                            <xs:enumeration value="sql"/>
                        </xs:restriction>
                    </xs:simpleType>
                </xs:attribute>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    <xs:complexType name="index">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="ordered" type="parameterized-boolean" use="optional" default="false"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    <xs:complexType name="entry-listeners">
        <xs:sequence>
            <xs:element name="entry-listener" type="entry-listener" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="listener-base">
        <xs:annotation>
            <xs:documentation>One of membership-listener, instance-listener or migration-listener
            </xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="non-space-string"/>
        </xs:simpleContent>
    </xs:complexType>
    <xs:simpleType name="eviction-policy-enum">
        <xs:restriction base="xs:string">
            <xs:enumeration value="NONE"/>
            <xs:enumeration value="LRU"/>
            <xs:enumeration value="LFU"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="eviction-policy">
        <xs:union memberTypes="eviction-policy-enum non-space-string"/>
    </xs:simpleType>

    <xs:simpleType name="in-memory-format-enum">
        <xs:restriction base="xs:string">
            <xs:enumeration value="BINARY"/>
            <xs:enumeration value="OBJECT"/>
            <xs:enumeration value="NATIVE"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="in-memory-format">
        <xs:union memberTypes="in-memory-format-enum non-space-string"/>
    </xs:simpleType>

    <xs:simpleType name="local-update-policy-enum">
        <xs:restriction base="xs:string">
            <xs:enumeration value="INVALIDATE"/>
            <xs:enumeration value="CACHE_ON_UPDATE"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="topic-overload-policy-enum">
        <xs:restriction base="xs:string">
            <xs:enumeration value="DISCARD_OLDEST"/>
            <xs:enumeration value="DISCARD_NEWEST"/>
            <xs:enumeration value="BLOCK"/>
            <xs:enumeration value="ERROR"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="topic-overload-policy">
        <xs:union memberTypes="topic-overload-policy-enum non-space-string"/>
    </xs:simpleType>

    <xs:simpleType name="time-unit">
        <xs:restriction base="non-space-string">
            <xs:enumeration value="NANOSECONDS"/>
            <xs:enumeration value="MICROSECONDS"/>
            <xs:enumeration value="MILLISECONDS"/>
            <xs:enumeration value="SECONDS"/>
            <xs:enumeration value="MINUTES"/>
            <xs:enumeration value="HOURS"/>
            <xs:enumeration value="DAYS"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="expiry-policy-type">
        <xs:restriction base="non-space-string">
            <xs:enumeration value="CREATED"/>
            <xs:enumeration value="ACCESSED"/>
            <xs:enumeration value="ETERNAL"/>
            <xs:enumeration value="MODIFIED"/>
            <xs:enumeration value="TOUCHED"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="timed-expiry-policy-factory">
        <xs:attribute name="expiry-policy-type" type="expiry-policy-type" use="required"/>
        <xs:attribute name="duration-amount" type="xs:unsignedLong" use="optional"/>
        <xs:attribute name="time-unit" type="time-unit" use="optional"/>
    </xs:complexType>

    <xs:simpleType name="concurrency-level">
        <xs:restriction base="xs:int">
            <xs:minInclusive value="0"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="topology-changed-strategy">
        <xs:restriction base="xs:string">
            <xs:enumeration value="CANCEL_RUNNING_OPERATION"/>
            <xs:enumeration value="DISCARD_AND_RESTART"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="max-size-policy">
        <xs:restriction base="xs:string">
            <xs:enumeration value="ENTRY_COUNT"/>
            <xs:enumeration value="USED_NATIVE_MEMORY_SIZE"/>
            <xs:enumeration value="USED_NATIVE_MEMORY_PERCENTAGE"/>
            <xs:enumeration value="FREE_NATIVE_MEMORY_SIZE"/>
            <xs:enumeration value="FREE_NATIVE_MEMORY_PERCENTAGE"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="eviction">
        <xs:attribute name="size" type="xs:nonNegativeInteger" default="10000" use="optional"/>
        <xs:attribute name="max-size-policy" type="max-size-policy" default="ENTRY_COUNT" use="optional"/>
        <xs:attribute name="eviction-policy" type="eviction-policy" default="LRU" use="optional"/>
        <xs:attribute name="comparator-class-name" type="xs:string" use="optional"/>
        <xs:attribute name="comparator-bean" type="xs:string" use="optional"/>
    </xs:complexType>

    <xs:complexType name="wan-replication-ref">
        <xs:all>
            <xs:element name="filters" type="wan-replication-ref-filters" minOccurs="0" maxOccurs="1"></xs:element>
        </xs:all>
        <xs:attribute name="name" use="required" type="xs:string"/>
        <xs:attribute name="merge-policy" use="required" type="xs:string"/>
        <xs:attribute name="republishing-enabled" use="optional" type="parameterized-boolean" default="true"/>
    </xs:complexType>
    <xs:complexType name="native-memory">
        <xs:all>
            <xs:element name="size" type="memory-size" minOccurs="0" maxOccurs="1"/>
        </xs:all>
        <xs:attribute name="min-block-size" use="optional" type="xs:positiveInteger"/>
        <xs:attribute name="page-size" use="optional" type="xs:positiveInteger"/>
        <xs:attribute name="metadata-space-percentage" use="optional">
            <xs:simpleType>
                <xs:restriction base="xs:decimal">
                    <xs:totalDigits value="3"/>
                    <xs:fractionDigits value="1"/>
                    <xs:minInclusive value="5"/>
                    <xs:maxInclusive value="95"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="allocator-type" default="POOLED" type="memory-allocator-type"/>
        <xs:attribute name="enabled" default="true" type="parameterized-boolean"/>
    </xs:complexType>
    <xs:complexType name="memory-size">
        <xs:attribute name="value" type="parameterized-non-negative-integer" default="128"/>
        <xs:attribute name="unit" type="memory-unit" default="MEGABYTES"/>
    </xs:complexType>
    <xs:simpleType name="memory-unit">
        <xs:restriction base="xs:string">
            <xs:enumeration value="BYTES"/>
            <xs:enumeration value="KILOBYTES"/>
            <xs:enumeration value="MEGABYTES"/>
            <xs:enumeration value="GIGABYTES"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="memory-allocator-type">
        <xs:restriction base="xs:string">
            <xs:enumeration value="STANDARD"/>
            <xs:enumeration value="POOLED"/>
        </xs:restriction>
    </xs:simpleType>


    <xs:complexType name="quorum">
        <xs:all>
            <xs:element name="quorum-size" type="quorum-size" minOccurs="0" maxOccurs="1"/>
            <xs:element name="quorum-type" type="quorum-type" minOccurs="0" maxOccurs="1"/>
            <xs:element name="quorum-function-class-name" type="xs:string" minOccurs="0" maxOccurs="1"/>
            <xs:element name="quorum-listeners" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="quorum-listener" type="quorum-listener" maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:all>
        <xs:attribute name="enabled" type="parameterized-boolean" use="required"/>
        <xs:attribute name="name" use="required">
            <xs:simpleType>
                <xs:restriction base="xs:string"/>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>

    <xs:simpleType name="quorum-type">
        <xs:restriction base="xs:string">
            <xs:enumeration value="READ"/>
            <xs:enumeration value="WRITE"/>
            <xs:enumeration value="READ_WRITE"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="quorum-size">
        <xs:restriction base="xs:int">
            <xs:minInclusive value="2"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="quorum-listener">
        <xs:complexContent>
            <xs:extension base="listener">
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="wan-replication-ref-filters">
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="filter-impl" type="xs:string"></xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="wan-ack-type-format-enum">
        <xs:restriction base="xs:string">
            <xs:enumeration value="ACK_ON_RECEIPT"/>
            <xs:enumeration value="ACK_ON_OPERATION_COMPLETE"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="wan-queue-full-behavior-format-enum">
        <xs:restriction base="xs:string">
            <xs:enumeration value="DISCARD_AFTER_MUTATION"/>
            <xs:enumeration value="THROW_EXCEPTION"/>
            <xs:enumeration value="THROW_EXCEPTION_ONLY_IF_REPLICATION_ACTIVE"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="wan-ack-type">
        <xs:union memberTypes="wan-ack-type-format-enum non-space-string"/>
    </xs:simpleType>

    <xs:simpleType name="wan-queue-full-behavior">
        <xs:union memberTypes="wan-queue-full-behavior-format-enum non-space-string"/>
    </xs:simpleType>

    <xs:complexType name="hot-restart-persistence">
        <xs:sequence>
            <xs:element name="base-dir" type="xs:string" minOccurs="0" maxOccurs="1" default="hot-restart">
                <xs:annotation>
                    <xs:documentation>
                        Base directory for all hot-restart data. Can be an absolute or relative path to the node startup
                        directory.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="backup-dir" type="xs:string" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>
                        Base directory for hot backups. Each new backup will be created in a separate directory inside this one.
                        Can be an absolute or relative path to the node startup directory.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="enabled" type="parameterized-boolean">
            <xs:annotation>
                <xs:documentation>
                    True to enable hot-restart, false otherwise.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="validation-timeout-seconds" type="parameterized-unsigned-int">
            <xs:annotation>
                <xs:documentation>
                    Validation timeout for hot-restart process, includes validating
                    cluster members expected to join and partition table on all cluster.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="data-load-timeout-seconds" type="parameterized-unsigned-int">
            <xs:annotation>
                <xs:documentation>
                    Data load timeout for hot-restart process,
                    all members in the cluster should complete restoring their local data
                    before this timeout.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="cluster-data-recovery-policy" default="FULL_RECOVERY_ONLY">
            <xs:annotation>
                <xs:documentation>
                    Specifies the policy that will be respected during hot restart cluster start. Valid values are :
                    FULL_RECOVERY_ONLY : Starts the cluster only when all expected nodes are present and correct.
                    Otherwise, it fails.
                    PARTIAL_RECOVERY_MOST_RECENT : Starts the cluster with the members which have most up-to-date
                    partition table and successfully restored their data. All other members will leave the cluster and
                    force-start themselves. If no member restores its data successfully, cluster start fails.
                    PARTIAL_RECOVERY_MOST_COMPLETE : Starts the cluster with the largest group of members which have the
                    same partition table version and successfully restored their data. All other members will leave the
                    cluster and force-start themselves. If no member restores its data successfully, cluster start fails.
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="non-space-string">
                    <xs:enumeration value="FULL_RECOVERY_ONLY"/>
                    <xs:enumeration value="PARTIAL_RECOVERY_MOST_RECENT"/>
                    <xs:enumeration value="PARTIAL_RECOVERY_MOST_COMPLETE"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="hot-restart">
        <xs:attribute name="fsync" type="parameterized-boolean" default="false">
            <xs:annotation>
                <xs:documentation>
                    True if disk write should be followed by an fsync() system call,
                    false otherwise.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="enabled" type="parameterized-boolean" default="false">
            <xs:annotation>
                <xs:documentation>
                    True if hot-restart is enabled, false otherwise
                    Only available on Hazelcast Enterprise.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:attributeGroup name="class-or-bean-name">
        <xs:attribute name="class-name" type="non-space-string" use="optional"/>
        <xs:attribute name="implementation" type="non-space-string" use="optional"/>
    </xs:attributeGroup>
</xs:schema>
